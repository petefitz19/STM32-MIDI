
MidiNotes.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e7c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08006010  08006010  00016010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006068  08006068  00020138  2**0
                  CONTENTS
  4 .ARM          00000008  08006068  08006068  00016068  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006070  08006070  00020138  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006070  08006070  00016070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006074  08006074  00016074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000138  20000000  08006078  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000024d0  20000138  080061b0  00020138  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002608  080061b0  00022608  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020138  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001239b  00000000  00000000  00020168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ce9  00000000  00000000  00032503  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b28  00000000  00000000  000351f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009f0  00000000  00000000  00035d18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017d16  00000000  00000000  00036708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ea94  00000000  00000000  0004e41e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008654f  00000000  00000000  0005ceb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e3401  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c50  00000000  00000000  000e3454  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000138 	.word	0x20000138
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08005ff8 	.word	0x08005ff8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000013c 	.word	0x2000013c
 80001d0:	08005ff8 	.word	0x08005ff8

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e8:	f000 b96e 	b.w	80004c8 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468c      	mov	ip, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	f040 8083 	bne.w	800031a <__udivmoddi4+0x116>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d947      	bls.n	80002aa <__udivmoddi4+0xa6>
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	b142      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 8000220:	f1c2 0020 	rsb	r0, r2, #32
 8000224:	fa24 f000 	lsr.w	r0, r4, r0
 8000228:	4091      	lsls	r1, r2
 800022a:	4097      	lsls	r7, r2
 800022c:	ea40 0c01 	orr.w	ip, r0, r1
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000236:	0c23      	lsrs	r3, r4, #16
 8000238:	fbbc f6f8 	udiv	r6, ip, r8
 800023c:	fa1f fe87 	uxth.w	lr, r7
 8000240:	fb08 c116 	mls	r1, r8, r6, ip
 8000244:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000248:	fb06 f10e 	mul.w	r1, r6, lr
 800024c:	4299      	cmp	r1, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18fb      	adds	r3, r7, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000256:	f080 8119 	bcs.w	800048c <__udivmoddi4+0x288>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 8116 	bls.w	800048c <__udivmoddi4+0x288>
 8000260:	3e02      	subs	r6, #2
 8000262:	443b      	add	r3, r7
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 fe0e 	mul.w	lr, r0, lr
 8000278:	45a6      	cmp	lr, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x8c>
 800027c:	193c      	adds	r4, r7, r4
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000282:	f080 8105 	bcs.w	8000490 <__udivmoddi4+0x28c>
 8000286:	45a6      	cmp	lr, r4
 8000288:	f240 8102 	bls.w	8000490 <__udivmoddi4+0x28c>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000294:	eba4 040e 	sub.w	r4, r4, lr
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa0>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	b902      	cbnz	r2, 80002ae <__udivmoddi4+0xaa>
 80002ac:	deff      	udf	#255	; 0xff
 80002ae:	fab2 f282 	clz	r2, r2
 80002b2:	2a00      	cmp	r2, #0
 80002b4:	d150      	bne.n	8000358 <__udivmoddi4+0x154>
 80002b6:	1bcb      	subs	r3, r1, r7
 80002b8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002bc:	fa1f f887 	uxth.w	r8, r7
 80002c0:	2601      	movs	r6, #1
 80002c2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c6:	0c21      	lsrs	r1, r4, #16
 80002c8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d0:	fb08 f30c 	mul.w	r3, r8, ip
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d907      	bls.n	80002e8 <__udivmoddi4+0xe4>
 80002d8:	1879      	adds	r1, r7, r1
 80002da:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002de:	d202      	bcs.n	80002e6 <__udivmoddi4+0xe2>
 80002e0:	428b      	cmp	r3, r1
 80002e2:	f200 80e9 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 80002e6:	4684      	mov	ip, r0
 80002e8:	1ac9      	subs	r1, r1, r3
 80002ea:	b2a3      	uxth	r3, r4
 80002ec:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f0:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f8:	fb08 f800 	mul.w	r8, r8, r0
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	d907      	bls.n	8000310 <__udivmoddi4+0x10c>
 8000300:	193c      	adds	r4, r7, r4
 8000302:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000306:	d202      	bcs.n	800030e <__udivmoddi4+0x10a>
 8000308:	45a0      	cmp	r8, r4
 800030a:	f200 80d9 	bhi.w	80004c0 <__udivmoddi4+0x2bc>
 800030e:	4618      	mov	r0, r3
 8000310:	eba4 0408 	sub.w	r4, r4, r8
 8000314:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000318:	e7bf      	b.n	800029a <__udivmoddi4+0x96>
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x12e>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80b1 	beq.w	8000486 <__udivmoddi4+0x282>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x1cc>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0x140>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80b8 	bhi.w	80004b4 <__udivmoddi4+0x2b0>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0103 	sbc.w	r1, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	468c      	mov	ip, r1
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0a8      	beq.n	80002a4 <__udivmoddi4+0xa0>
 8000352:	e9c5 4c00 	strd	r4, ip, [r5]
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000358:	f1c2 0320 	rsb	r3, r2, #32
 800035c:	fa20 f603 	lsr.w	r6, r0, r3
 8000360:	4097      	lsls	r7, r2
 8000362:	fa01 f002 	lsl.w	r0, r1, r2
 8000366:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036a:	40d9      	lsrs	r1, r3
 800036c:	4330      	orrs	r0, r6
 800036e:	0c03      	lsrs	r3, r0, #16
 8000370:	fbb1 f6fe 	udiv	r6, r1, lr
 8000374:	fa1f f887 	uxth.w	r8, r7
 8000378:	fb0e 1116 	mls	r1, lr, r6, r1
 800037c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000380:	fb06 f108 	mul.w	r1, r6, r8
 8000384:	4299      	cmp	r1, r3
 8000386:	fa04 f402 	lsl.w	r4, r4, r2
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x19c>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000392:	f080 808d 	bcs.w	80004b0 <__udivmoddi4+0x2ac>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 808a 	bls.w	80004b0 <__udivmoddi4+0x2ac>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b281      	uxth	r1, r0
 80003a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b0:	fb00 f308 	mul.w	r3, r0, r8
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d907      	bls.n	80003c8 <__udivmoddi4+0x1c4>
 80003b8:	1879      	adds	r1, r7, r1
 80003ba:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003be:	d273      	bcs.n	80004a8 <__udivmoddi4+0x2a4>
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d971      	bls.n	80004a8 <__udivmoddi4+0x2a4>
 80003c4:	3802      	subs	r0, #2
 80003c6:	4439      	add	r1, r7
 80003c8:	1acb      	subs	r3, r1, r3
 80003ca:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ce:	e778      	b.n	80002c2 <__udivmoddi4+0xbe>
 80003d0:	f1c6 0c20 	rsb	ip, r6, #32
 80003d4:	fa03 f406 	lsl.w	r4, r3, r6
 80003d8:	fa22 f30c 	lsr.w	r3, r2, ip
 80003dc:	431c      	orrs	r4, r3
 80003de:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ea:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ee:	431f      	orrs	r7, r3
 80003f0:	0c3b      	lsrs	r3, r7, #16
 80003f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f6:	fa1f f884 	uxth.w	r8, r4
 80003fa:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000402:	fb09 fa08 	mul.w	sl, r9, r8
 8000406:	458a      	cmp	sl, r1
 8000408:	fa02 f206 	lsl.w	r2, r2, r6
 800040c:	fa00 f306 	lsl.w	r3, r0, r6
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x220>
 8000412:	1861      	adds	r1, r4, r1
 8000414:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000418:	d248      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800041a:	458a      	cmp	sl, r1
 800041c:	d946      	bls.n	80004ac <__udivmoddi4+0x2a8>
 800041e:	f1a9 0902 	sub.w	r9, r9, #2
 8000422:	4421      	add	r1, r4
 8000424:	eba1 010a 	sub.w	r1, r1, sl
 8000428:	b2bf      	uxth	r7, r7
 800042a:	fbb1 f0fe 	udiv	r0, r1, lr
 800042e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000432:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000436:	fb00 f808 	mul.w	r8, r0, r8
 800043a:	45b8      	cmp	r8, r7
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x24a>
 800043e:	19e7      	adds	r7, r4, r7
 8000440:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000444:	d22e      	bcs.n	80004a4 <__udivmoddi4+0x2a0>
 8000446:	45b8      	cmp	r8, r7
 8000448:	d92c      	bls.n	80004a4 <__udivmoddi4+0x2a0>
 800044a:	3802      	subs	r0, #2
 800044c:	4427      	add	r7, r4
 800044e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000452:	eba7 0708 	sub.w	r7, r7, r8
 8000456:	fba0 8902 	umull	r8, r9, r0, r2
 800045a:	454f      	cmp	r7, r9
 800045c:	46c6      	mov	lr, r8
 800045e:	4649      	mov	r1, r9
 8000460:	d31a      	bcc.n	8000498 <__udivmoddi4+0x294>
 8000462:	d017      	beq.n	8000494 <__udivmoddi4+0x290>
 8000464:	b15d      	cbz	r5, 800047e <__udivmoddi4+0x27a>
 8000466:	ebb3 020e 	subs.w	r2, r3, lr
 800046a:	eb67 0701 	sbc.w	r7, r7, r1
 800046e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000472:	40f2      	lsrs	r2, r6
 8000474:	ea4c 0202 	orr.w	r2, ip, r2
 8000478:	40f7      	lsrs	r7, r6
 800047a:	e9c5 2700 	strd	r2, r7, [r5]
 800047e:	2600      	movs	r6, #0
 8000480:	4631      	mov	r1, r6
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	462e      	mov	r6, r5
 8000488:	4628      	mov	r0, r5
 800048a:	e70b      	b.n	80002a4 <__udivmoddi4+0xa0>
 800048c:	4606      	mov	r6, r0
 800048e:	e6e9      	b.n	8000264 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fd      	b.n	8000290 <__udivmoddi4+0x8c>
 8000494:	4543      	cmp	r3, r8
 8000496:	d2e5      	bcs.n	8000464 <__udivmoddi4+0x260>
 8000498:	ebb8 0e02 	subs.w	lr, r8, r2
 800049c:	eb69 0104 	sbc.w	r1, r9, r4
 80004a0:	3801      	subs	r0, #1
 80004a2:	e7df      	b.n	8000464 <__udivmoddi4+0x260>
 80004a4:	4608      	mov	r0, r1
 80004a6:	e7d2      	b.n	800044e <__udivmoddi4+0x24a>
 80004a8:	4660      	mov	r0, ip
 80004aa:	e78d      	b.n	80003c8 <__udivmoddi4+0x1c4>
 80004ac:	4681      	mov	r9, r0
 80004ae:	e7b9      	b.n	8000424 <__udivmoddi4+0x220>
 80004b0:	4666      	mov	r6, ip
 80004b2:	e775      	b.n	80003a0 <__udivmoddi4+0x19c>
 80004b4:	4630      	mov	r0, r6
 80004b6:	e74a      	b.n	800034e <__udivmoddi4+0x14a>
 80004b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004bc:	4439      	add	r1, r7
 80004be:	e713      	b.n	80002e8 <__udivmoddi4+0xe4>
 80004c0:	3802      	subs	r0, #2
 80004c2:	443c      	add	r4, r7
 80004c4:	e724      	b.n	8000310 <__udivmoddi4+0x10c>
 80004c6:	bf00      	nop

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d0:	f000 f958 	bl	8000784 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d4:	f000 f816 	bl	8000504 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d8:	f000 f880 	bl	80005dc <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80004dc:	f005 f852 	bl	8005584 <MX_USB_DEVICE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    MIDI_note_on(100, 127);
 80004e0:	217f      	movs	r1, #127	; 0x7f
 80004e2:	2064      	movs	r0, #100	; 0x64
 80004e4:	f005 fa0f 	bl	8005906 <MIDI_note_on>
    HAL_Delay(1000);
 80004e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004ec:	f000 f9bc 	bl	8000868 <HAL_Delay>
    MIDI_note_off(100, 0);
 80004f0:	2100      	movs	r1, #0
 80004f2:	2064      	movs	r0, #100	; 0x64
 80004f4:	f005 fa21 	bl	800593a <MIDI_note_off>
    HAL_Delay(1000);
 80004f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004fc:	f000 f9b4 	bl	8000868 <HAL_Delay>
    MIDI_note_on(100, 127);
 8000500:	e7ee      	b.n	80004e0 <main+0x14>
	...

08000504 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b094      	sub	sp, #80	; 0x50
 8000508:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800050a:	f107 0320 	add.w	r3, r7, #32
 800050e:	2230      	movs	r2, #48	; 0x30
 8000510:	2100      	movs	r1, #0
 8000512:	4618      	mov	r0, r3
 8000514:	f005 fd68 	bl	8005fe8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000518:	f107 030c 	add.w	r3, r7, #12
 800051c:	2200      	movs	r2, #0
 800051e:	601a      	str	r2, [r3, #0]
 8000520:	605a      	str	r2, [r3, #4]
 8000522:	609a      	str	r2, [r3, #8]
 8000524:	60da      	str	r2, [r3, #12]
 8000526:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000528:	2300      	movs	r3, #0
 800052a:	60bb      	str	r3, [r7, #8]
 800052c:	4b29      	ldr	r3, [pc, #164]	; (80005d4 <SystemClock_Config+0xd0>)
 800052e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000530:	4a28      	ldr	r2, [pc, #160]	; (80005d4 <SystemClock_Config+0xd0>)
 8000532:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000536:	6413      	str	r3, [r2, #64]	; 0x40
 8000538:	4b26      	ldr	r3, [pc, #152]	; (80005d4 <SystemClock_Config+0xd0>)
 800053a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800053c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000540:	60bb      	str	r3, [r7, #8]
 8000542:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000544:	2300      	movs	r3, #0
 8000546:	607b      	str	r3, [r7, #4]
 8000548:	4b23      	ldr	r3, [pc, #140]	; (80005d8 <SystemClock_Config+0xd4>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000550:	4a21      	ldr	r2, [pc, #132]	; (80005d8 <SystemClock_Config+0xd4>)
 8000552:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000556:	6013      	str	r3, [r2, #0]
 8000558:	4b1f      	ldr	r3, [pc, #124]	; (80005d8 <SystemClock_Config+0xd4>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000560:	607b      	str	r3, [r7, #4]
 8000562:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000564:	2301      	movs	r3, #1
 8000566:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000568:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800056c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800056e:	2302      	movs	r3, #2
 8000570:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000572:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000576:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000578:	2319      	movs	r3, #25
 800057a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800057c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000580:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000582:	2304      	movs	r3, #4
 8000584:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000586:	2307      	movs	r3, #7
 8000588:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800058a:	f107 0320 	add.w	r3, r7, #32
 800058e:	4618      	mov	r0, r3
 8000590:	f001 fda8 	bl	80020e4 <HAL_RCC_OscConfig>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800059a:	f000 f855 	bl	8000648 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800059e:	230f      	movs	r3, #15
 80005a0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005a2:	2302      	movs	r3, #2
 80005a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a6:	2300      	movs	r3, #0
 80005a8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005ae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005b0:	2300      	movs	r3, #0
 80005b2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005b4:	f107 030c 	add.w	r3, r7, #12
 80005b8:	2102      	movs	r1, #2
 80005ba:	4618      	mov	r0, r3
 80005bc:	f002 f80a 	bl	80025d4 <HAL_RCC_ClockConfig>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80005c6:	f000 f83f 	bl	8000648 <Error_Handler>
  }
}
 80005ca:	bf00      	nop
 80005cc:	3750      	adds	r7, #80	; 0x50
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	40023800 	.word	0x40023800
 80005d8:	40007000 	.word	0x40007000

080005dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	b085      	sub	sp, #20
 80005e0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005e2:	2300      	movs	r3, #0
 80005e4:	60fb      	str	r3, [r7, #12]
 80005e6:	4b17      	ldr	r3, [pc, #92]	; (8000644 <MX_GPIO_Init+0x68>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	4a16      	ldr	r2, [pc, #88]	; (8000644 <MX_GPIO_Init+0x68>)
 80005ec:	f043 0304 	orr.w	r3, r3, #4
 80005f0:	6313      	str	r3, [r2, #48]	; 0x30
 80005f2:	4b14      	ldr	r3, [pc, #80]	; (8000644 <MX_GPIO_Init+0x68>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f6:	f003 0304 	and.w	r3, r3, #4
 80005fa:	60fb      	str	r3, [r7, #12]
 80005fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005fe:	2300      	movs	r3, #0
 8000600:	60bb      	str	r3, [r7, #8]
 8000602:	4b10      	ldr	r3, [pc, #64]	; (8000644 <MX_GPIO_Init+0x68>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000606:	4a0f      	ldr	r2, [pc, #60]	; (8000644 <MX_GPIO_Init+0x68>)
 8000608:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800060c:	6313      	str	r3, [r2, #48]	; 0x30
 800060e:	4b0d      	ldr	r3, [pc, #52]	; (8000644 <MX_GPIO_Init+0x68>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000612:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000616:	60bb      	str	r3, [r7, #8]
 8000618:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800061a:	2300      	movs	r3, #0
 800061c:	607b      	str	r3, [r7, #4]
 800061e:	4b09      	ldr	r3, [pc, #36]	; (8000644 <MX_GPIO_Init+0x68>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000622:	4a08      	ldr	r2, [pc, #32]	; (8000644 <MX_GPIO_Init+0x68>)
 8000624:	f043 0301 	orr.w	r3, r3, #1
 8000628:	6313      	str	r3, [r2, #48]	; 0x30
 800062a:	4b06      	ldr	r3, [pc, #24]	; (8000644 <MX_GPIO_Init+0x68>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062e:	f003 0301 	and.w	r3, r3, #1
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	687b      	ldr	r3, [r7, #4]

}
 8000636:	bf00      	nop
 8000638:	3714      	adds	r7, #20
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop
 8000644:	40023800 	.word	0x40023800

08000648 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800064c:	b672      	cpsid	i
}
 800064e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000650:	e7fe      	b.n	8000650 <Error_Handler+0x8>
	...

08000654 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000654:	b480      	push	{r7}
 8000656:	b083      	sub	sp, #12
 8000658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800065a:	2300      	movs	r3, #0
 800065c:	607b      	str	r3, [r7, #4]
 800065e:	4b10      	ldr	r3, [pc, #64]	; (80006a0 <HAL_MspInit+0x4c>)
 8000660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000662:	4a0f      	ldr	r2, [pc, #60]	; (80006a0 <HAL_MspInit+0x4c>)
 8000664:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000668:	6453      	str	r3, [r2, #68]	; 0x44
 800066a:	4b0d      	ldr	r3, [pc, #52]	; (80006a0 <HAL_MspInit+0x4c>)
 800066c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800066e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000672:	607b      	str	r3, [r7, #4]
 8000674:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000676:	2300      	movs	r3, #0
 8000678:	603b      	str	r3, [r7, #0]
 800067a:	4b09      	ldr	r3, [pc, #36]	; (80006a0 <HAL_MspInit+0x4c>)
 800067c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800067e:	4a08      	ldr	r2, [pc, #32]	; (80006a0 <HAL_MspInit+0x4c>)
 8000680:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000684:	6413      	str	r3, [r2, #64]	; 0x40
 8000686:	4b06      	ldr	r3, [pc, #24]	; (80006a0 <HAL_MspInit+0x4c>)
 8000688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800068a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800068e:	603b      	str	r3, [r7, #0]
 8000690:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000692:	bf00      	nop
 8000694:	370c      	adds	r7, #12
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop
 80006a0:	40023800 	.word	0x40023800

080006a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006a8:	e7fe      	b.n	80006a8 <NMI_Handler+0x4>

080006aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006aa:	b480      	push	{r7}
 80006ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006ae:	e7fe      	b.n	80006ae <HardFault_Handler+0x4>

080006b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006b4:	e7fe      	b.n	80006b4 <MemManage_Handler+0x4>

080006b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006b6:	b480      	push	{r7}
 80006b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006ba:	e7fe      	b.n	80006ba <BusFault_Handler+0x4>

080006bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006c0:	e7fe      	b.n	80006c0 <UsageFault_Handler+0x4>

080006c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006c2:	b480      	push	{r7}
 80006c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006c6:	bf00      	nop
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr

080006d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006d4:	bf00      	nop
 80006d6:	46bd      	mov	sp, r7
 80006d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006dc:	4770      	bx	lr

080006de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006de:	b480      	push	{r7}
 80006e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006e2:	bf00      	nop
 80006e4:	46bd      	mov	sp, r7
 80006e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ea:	4770      	bx	lr

080006ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006f0:	f000 f89a 	bl	8000828 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006f4:	bf00      	nop
 80006f6:	bd80      	pop	{r7, pc}

080006f8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80006fc:	4802      	ldr	r0, [pc, #8]	; (8000708 <OTG_FS_IRQHandler+0x10>)
 80006fe:	f000 fcbd 	bl	800107c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000702:	bf00      	nop
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	20002200 	.word	0x20002200

0800070c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000710:	4b06      	ldr	r3, [pc, #24]	; (800072c <SystemInit+0x20>)
 8000712:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000716:	4a05      	ldr	r2, [pc, #20]	; (800072c <SystemInit+0x20>)
 8000718:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800071c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000720:	bf00      	nop
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr
 800072a:	bf00      	nop
 800072c:	e000ed00 	.word	0xe000ed00

08000730 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000730:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000768 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000734:	480d      	ldr	r0, [pc, #52]	; (800076c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000736:	490e      	ldr	r1, [pc, #56]	; (8000770 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000738:	4a0e      	ldr	r2, [pc, #56]	; (8000774 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800073a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800073c:	e002      	b.n	8000744 <LoopCopyDataInit>

0800073e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800073e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000740:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000742:	3304      	adds	r3, #4

08000744 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000744:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000746:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000748:	d3f9      	bcc.n	800073e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800074a:	4a0b      	ldr	r2, [pc, #44]	; (8000778 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800074c:	4c0b      	ldr	r4, [pc, #44]	; (800077c <LoopFillZerobss+0x26>)
  movs r3, #0
 800074e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000750:	e001      	b.n	8000756 <LoopFillZerobss>

08000752 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000752:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000754:	3204      	adds	r2, #4

08000756 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000756:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000758:	d3fb      	bcc.n	8000752 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800075a:	f7ff ffd7 	bl	800070c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800075e:	f005 fc11 	bl	8005f84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000762:	f7ff feb3 	bl	80004cc <main>
  bx  lr    
 8000766:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000768:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800076c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000770:	20000138 	.word	0x20000138
  ldr r2, =_sidata
 8000774:	08006078 	.word	0x08006078
  ldr r2, =_sbss
 8000778:	20000138 	.word	0x20000138
  ldr r4, =_ebss
 800077c:	20002608 	.word	0x20002608

08000780 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000780:	e7fe      	b.n	8000780 <ADC_IRQHandler>
	...

08000784 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000788:	4b0e      	ldr	r3, [pc, #56]	; (80007c4 <HAL_Init+0x40>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4a0d      	ldr	r2, [pc, #52]	; (80007c4 <HAL_Init+0x40>)
 800078e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000792:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000794:	4b0b      	ldr	r3, [pc, #44]	; (80007c4 <HAL_Init+0x40>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4a0a      	ldr	r2, [pc, #40]	; (80007c4 <HAL_Init+0x40>)
 800079a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800079e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007a0:	4b08      	ldr	r3, [pc, #32]	; (80007c4 <HAL_Init+0x40>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4a07      	ldr	r2, [pc, #28]	; (80007c4 <HAL_Init+0x40>)
 80007a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007ac:	2003      	movs	r0, #3
 80007ae:	f000 f94f 	bl	8000a50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007b2:	200f      	movs	r0, #15
 80007b4:	f000 f808 	bl	80007c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007b8:	f7ff ff4c 	bl	8000654 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007bc:	2300      	movs	r3, #0
}
 80007be:	4618      	mov	r0, r3
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	40023c00 	.word	0x40023c00

080007c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007d0:	4b12      	ldr	r3, [pc, #72]	; (800081c <HAL_InitTick+0x54>)
 80007d2:	681a      	ldr	r2, [r3, #0]
 80007d4:	4b12      	ldr	r3, [pc, #72]	; (8000820 <HAL_InitTick+0x58>)
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	4619      	mov	r1, r3
 80007da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007de:	fbb3 f3f1 	udiv	r3, r3, r1
 80007e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80007e6:	4618      	mov	r0, r3
 80007e8:	f000 f967 	bl	8000aba <HAL_SYSTICK_Config>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007f2:	2301      	movs	r3, #1
 80007f4:	e00e      	b.n	8000814 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	2b0f      	cmp	r3, #15
 80007fa:	d80a      	bhi.n	8000812 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007fc:	2200      	movs	r2, #0
 80007fe:	6879      	ldr	r1, [r7, #4]
 8000800:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000804:	f000 f92f 	bl	8000a66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000808:	4a06      	ldr	r2, [pc, #24]	; (8000824 <HAL_InitTick+0x5c>)
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800080e:	2300      	movs	r3, #0
 8000810:	e000      	b.n	8000814 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000812:	2301      	movs	r3, #1
}
 8000814:	4618      	mov	r0, r3
 8000816:	3708      	adds	r7, #8
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	20000000 	.word	0x20000000
 8000820:	20000008 	.word	0x20000008
 8000824:	20000004 	.word	0x20000004

08000828 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800082c:	4b06      	ldr	r3, [pc, #24]	; (8000848 <HAL_IncTick+0x20>)
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	461a      	mov	r2, r3
 8000832:	4b06      	ldr	r3, [pc, #24]	; (800084c <HAL_IncTick+0x24>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	4413      	add	r3, r2
 8000838:	4a04      	ldr	r2, [pc, #16]	; (800084c <HAL_IncTick+0x24>)
 800083a:	6013      	str	r3, [r2, #0]
}
 800083c:	bf00      	nop
 800083e:	46bd      	mov	sp, r7
 8000840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000844:	4770      	bx	lr
 8000846:	bf00      	nop
 8000848:	20000008 	.word	0x20000008
 800084c:	20001d2c 	.word	0x20001d2c

08000850 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  return uwTick;
 8000854:	4b03      	ldr	r3, [pc, #12]	; (8000864 <HAL_GetTick+0x14>)
 8000856:	681b      	ldr	r3, [r3, #0]
}
 8000858:	4618      	mov	r0, r3
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr
 8000862:	bf00      	nop
 8000864:	20001d2c 	.word	0x20001d2c

08000868 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b084      	sub	sp, #16
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000870:	f7ff ffee 	bl	8000850 <HAL_GetTick>
 8000874:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000880:	d005      	beq.n	800088e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000882:	4b0a      	ldr	r3, [pc, #40]	; (80008ac <HAL_Delay+0x44>)
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	461a      	mov	r2, r3
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	4413      	add	r3, r2
 800088c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800088e:	bf00      	nop
 8000890:	f7ff ffde 	bl	8000850 <HAL_GetTick>
 8000894:	4602      	mov	r2, r0
 8000896:	68bb      	ldr	r3, [r7, #8]
 8000898:	1ad3      	subs	r3, r2, r3
 800089a:	68fa      	ldr	r2, [r7, #12]
 800089c:	429a      	cmp	r2, r3
 800089e:	d8f7      	bhi.n	8000890 <HAL_Delay+0x28>
  {
  }
}
 80008a0:	bf00      	nop
 80008a2:	bf00      	nop
 80008a4:	3710      	adds	r7, #16
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	20000008 	.word	0x20000008

080008b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b085      	sub	sp, #20
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	f003 0307 	and.w	r3, r3, #7
 80008be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008c0:	4b0c      	ldr	r3, [pc, #48]	; (80008f4 <__NVIC_SetPriorityGrouping+0x44>)
 80008c2:	68db      	ldr	r3, [r3, #12]
 80008c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008c6:	68ba      	ldr	r2, [r7, #8]
 80008c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008cc:	4013      	ands	r3, r2
 80008ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008d4:	68bb      	ldr	r3, [r7, #8]
 80008d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008e2:	4a04      	ldr	r2, [pc, #16]	; (80008f4 <__NVIC_SetPriorityGrouping+0x44>)
 80008e4:	68bb      	ldr	r3, [r7, #8]
 80008e6:	60d3      	str	r3, [r2, #12]
}
 80008e8:	bf00      	nop
 80008ea:	3714      	adds	r7, #20
 80008ec:	46bd      	mov	sp, r7
 80008ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f2:	4770      	bx	lr
 80008f4:	e000ed00 	.word	0xe000ed00

080008f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008fc:	4b04      	ldr	r3, [pc, #16]	; (8000910 <__NVIC_GetPriorityGrouping+0x18>)
 80008fe:	68db      	ldr	r3, [r3, #12]
 8000900:	0a1b      	lsrs	r3, r3, #8
 8000902:	f003 0307 	and.w	r3, r3, #7
}
 8000906:	4618      	mov	r0, r3
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr
 8000910:	e000ed00 	.word	0xe000ed00

08000914 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000914:	b480      	push	{r7}
 8000916:	b083      	sub	sp, #12
 8000918:	af00      	add	r7, sp, #0
 800091a:	4603      	mov	r3, r0
 800091c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800091e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000922:	2b00      	cmp	r3, #0
 8000924:	db0b      	blt.n	800093e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000926:	79fb      	ldrb	r3, [r7, #7]
 8000928:	f003 021f 	and.w	r2, r3, #31
 800092c:	4907      	ldr	r1, [pc, #28]	; (800094c <__NVIC_EnableIRQ+0x38>)
 800092e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000932:	095b      	lsrs	r3, r3, #5
 8000934:	2001      	movs	r0, #1
 8000936:	fa00 f202 	lsl.w	r2, r0, r2
 800093a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800093e:	bf00      	nop
 8000940:	370c      	adds	r7, #12
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	e000e100 	.word	0xe000e100

08000950 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000950:	b480      	push	{r7}
 8000952:	b083      	sub	sp, #12
 8000954:	af00      	add	r7, sp, #0
 8000956:	4603      	mov	r3, r0
 8000958:	6039      	str	r1, [r7, #0]
 800095a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800095c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000960:	2b00      	cmp	r3, #0
 8000962:	db0a      	blt.n	800097a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	b2da      	uxtb	r2, r3
 8000968:	490c      	ldr	r1, [pc, #48]	; (800099c <__NVIC_SetPriority+0x4c>)
 800096a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800096e:	0112      	lsls	r2, r2, #4
 8000970:	b2d2      	uxtb	r2, r2
 8000972:	440b      	add	r3, r1
 8000974:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000978:	e00a      	b.n	8000990 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	b2da      	uxtb	r2, r3
 800097e:	4908      	ldr	r1, [pc, #32]	; (80009a0 <__NVIC_SetPriority+0x50>)
 8000980:	79fb      	ldrb	r3, [r7, #7]
 8000982:	f003 030f 	and.w	r3, r3, #15
 8000986:	3b04      	subs	r3, #4
 8000988:	0112      	lsls	r2, r2, #4
 800098a:	b2d2      	uxtb	r2, r2
 800098c:	440b      	add	r3, r1
 800098e:	761a      	strb	r2, [r3, #24]
}
 8000990:	bf00      	nop
 8000992:	370c      	adds	r7, #12
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr
 800099c:	e000e100 	.word	0xe000e100
 80009a0:	e000ed00 	.word	0xe000ed00

080009a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b089      	sub	sp, #36	; 0x24
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	60f8      	str	r0, [r7, #12]
 80009ac:	60b9      	str	r1, [r7, #8]
 80009ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	f003 0307 	and.w	r3, r3, #7
 80009b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009b8:	69fb      	ldr	r3, [r7, #28]
 80009ba:	f1c3 0307 	rsb	r3, r3, #7
 80009be:	2b04      	cmp	r3, #4
 80009c0:	bf28      	it	cs
 80009c2:	2304      	movcs	r3, #4
 80009c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009c6:	69fb      	ldr	r3, [r7, #28]
 80009c8:	3304      	adds	r3, #4
 80009ca:	2b06      	cmp	r3, #6
 80009cc:	d902      	bls.n	80009d4 <NVIC_EncodePriority+0x30>
 80009ce:	69fb      	ldr	r3, [r7, #28]
 80009d0:	3b03      	subs	r3, #3
 80009d2:	e000      	b.n	80009d6 <NVIC_EncodePriority+0x32>
 80009d4:	2300      	movs	r3, #0
 80009d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80009dc:	69bb      	ldr	r3, [r7, #24]
 80009de:	fa02 f303 	lsl.w	r3, r2, r3
 80009e2:	43da      	mvns	r2, r3
 80009e4:	68bb      	ldr	r3, [r7, #8]
 80009e6:	401a      	ands	r2, r3
 80009e8:	697b      	ldr	r3, [r7, #20]
 80009ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80009f0:	697b      	ldr	r3, [r7, #20]
 80009f2:	fa01 f303 	lsl.w	r3, r1, r3
 80009f6:	43d9      	mvns	r1, r3
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009fc:	4313      	orrs	r3, r2
         );
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	3724      	adds	r7, #36	; 0x24
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
	...

08000a0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	3b01      	subs	r3, #1
 8000a18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a1c:	d301      	bcc.n	8000a22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a1e:	2301      	movs	r3, #1
 8000a20:	e00f      	b.n	8000a42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a22:	4a0a      	ldr	r2, [pc, #40]	; (8000a4c <SysTick_Config+0x40>)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	3b01      	subs	r3, #1
 8000a28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a2a:	210f      	movs	r1, #15
 8000a2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a30:	f7ff ff8e 	bl	8000950 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a34:	4b05      	ldr	r3, [pc, #20]	; (8000a4c <SysTick_Config+0x40>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a3a:	4b04      	ldr	r3, [pc, #16]	; (8000a4c <SysTick_Config+0x40>)
 8000a3c:	2207      	movs	r2, #7
 8000a3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a40:	2300      	movs	r3, #0
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	e000e010 	.word	0xe000e010

08000a50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a58:	6878      	ldr	r0, [r7, #4]
 8000a5a:	f7ff ff29 	bl	80008b0 <__NVIC_SetPriorityGrouping>
}
 8000a5e:	bf00      	nop
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}

08000a66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a66:	b580      	push	{r7, lr}
 8000a68:	b086      	sub	sp, #24
 8000a6a:	af00      	add	r7, sp, #0
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	60b9      	str	r1, [r7, #8]
 8000a70:	607a      	str	r2, [r7, #4]
 8000a72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a74:	2300      	movs	r3, #0
 8000a76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a78:	f7ff ff3e 	bl	80008f8 <__NVIC_GetPriorityGrouping>
 8000a7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a7e:	687a      	ldr	r2, [r7, #4]
 8000a80:	68b9      	ldr	r1, [r7, #8]
 8000a82:	6978      	ldr	r0, [r7, #20]
 8000a84:	f7ff ff8e 	bl	80009a4 <NVIC_EncodePriority>
 8000a88:	4602      	mov	r2, r0
 8000a8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a8e:	4611      	mov	r1, r2
 8000a90:	4618      	mov	r0, r3
 8000a92:	f7ff ff5d 	bl	8000950 <__NVIC_SetPriority>
}
 8000a96:	bf00      	nop
 8000a98:	3718      	adds	r7, #24
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}

08000a9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a9e:	b580      	push	{r7, lr}
 8000aa0:	b082      	sub	sp, #8
 8000aa2:	af00      	add	r7, sp, #0
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000aa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aac:	4618      	mov	r0, r3
 8000aae:	f7ff ff31 	bl	8000914 <__NVIC_EnableIRQ>
}
 8000ab2:	bf00      	nop
 8000ab4:	3708      	adds	r7, #8
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}

08000aba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000aba:	b580      	push	{r7, lr}
 8000abc:	b082      	sub	sp, #8
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ac2:	6878      	ldr	r0, [r7, #4]
 8000ac4:	f7ff ffa2 	bl	8000a0c <SysTick_Config>
 8000ac8:	4603      	mov	r3, r0
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	3708      	adds	r7, #8
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
	...

08000ad4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b089      	sub	sp, #36	; 0x24
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
 8000adc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000aea:	2300      	movs	r3, #0
 8000aec:	61fb      	str	r3, [r7, #28]
 8000aee:	e159      	b.n	8000da4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000af0:	2201      	movs	r2, #1
 8000af2:	69fb      	ldr	r3, [r7, #28]
 8000af4:	fa02 f303 	lsl.w	r3, r2, r3
 8000af8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	697a      	ldr	r2, [r7, #20]
 8000b00:	4013      	ands	r3, r2
 8000b02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000b04:	693a      	ldr	r2, [r7, #16]
 8000b06:	697b      	ldr	r3, [r7, #20]
 8000b08:	429a      	cmp	r2, r3
 8000b0a:	f040 8148 	bne.w	8000d9e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	685b      	ldr	r3, [r3, #4]
 8000b12:	f003 0303 	and.w	r3, r3, #3
 8000b16:	2b01      	cmp	r3, #1
 8000b18:	d005      	beq.n	8000b26 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	685b      	ldr	r3, [r3, #4]
 8000b1e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b22:	2b02      	cmp	r3, #2
 8000b24:	d130      	bne.n	8000b88 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	689b      	ldr	r3, [r3, #8]
 8000b2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000b2c:	69fb      	ldr	r3, [r7, #28]
 8000b2e:	005b      	lsls	r3, r3, #1
 8000b30:	2203      	movs	r2, #3
 8000b32:	fa02 f303 	lsl.w	r3, r2, r3
 8000b36:	43db      	mvns	r3, r3
 8000b38:	69ba      	ldr	r2, [r7, #24]
 8000b3a:	4013      	ands	r3, r2
 8000b3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	68da      	ldr	r2, [r3, #12]
 8000b42:	69fb      	ldr	r3, [r7, #28]
 8000b44:	005b      	lsls	r3, r3, #1
 8000b46:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4a:	69ba      	ldr	r2, [r7, #24]
 8000b4c:	4313      	orrs	r3, r2
 8000b4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	69ba      	ldr	r2, [r7, #24]
 8000b54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	685b      	ldr	r3, [r3, #4]
 8000b5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	69fb      	ldr	r3, [r7, #28]
 8000b60:	fa02 f303 	lsl.w	r3, r2, r3
 8000b64:	43db      	mvns	r3, r3
 8000b66:	69ba      	ldr	r2, [r7, #24]
 8000b68:	4013      	ands	r3, r2
 8000b6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	685b      	ldr	r3, [r3, #4]
 8000b70:	091b      	lsrs	r3, r3, #4
 8000b72:	f003 0201 	and.w	r2, r3, #1
 8000b76:	69fb      	ldr	r3, [r7, #28]
 8000b78:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7c:	69ba      	ldr	r2, [r7, #24]
 8000b7e:	4313      	orrs	r3, r2
 8000b80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	69ba      	ldr	r2, [r7, #24]
 8000b86:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	685b      	ldr	r3, [r3, #4]
 8000b8c:	f003 0303 	and.w	r3, r3, #3
 8000b90:	2b03      	cmp	r3, #3
 8000b92:	d017      	beq.n	8000bc4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	68db      	ldr	r3, [r3, #12]
 8000b98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000b9a:	69fb      	ldr	r3, [r7, #28]
 8000b9c:	005b      	lsls	r3, r3, #1
 8000b9e:	2203      	movs	r2, #3
 8000ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba4:	43db      	mvns	r3, r3
 8000ba6:	69ba      	ldr	r2, [r7, #24]
 8000ba8:	4013      	ands	r3, r2
 8000baa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	689a      	ldr	r2, [r3, #8]
 8000bb0:	69fb      	ldr	r3, [r7, #28]
 8000bb2:	005b      	lsls	r3, r3, #1
 8000bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb8:	69ba      	ldr	r2, [r7, #24]
 8000bba:	4313      	orrs	r3, r2
 8000bbc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	69ba      	ldr	r2, [r7, #24]
 8000bc2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	685b      	ldr	r3, [r3, #4]
 8000bc8:	f003 0303 	and.w	r3, r3, #3
 8000bcc:	2b02      	cmp	r3, #2
 8000bce:	d123      	bne.n	8000c18 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000bd0:	69fb      	ldr	r3, [r7, #28]
 8000bd2:	08da      	lsrs	r2, r3, #3
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	3208      	adds	r2, #8
 8000bd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000bde:	69fb      	ldr	r3, [r7, #28]
 8000be0:	f003 0307 	and.w	r3, r3, #7
 8000be4:	009b      	lsls	r3, r3, #2
 8000be6:	220f      	movs	r2, #15
 8000be8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bec:	43db      	mvns	r3, r3
 8000bee:	69ba      	ldr	r2, [r7, #24]
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	691a      	ldr	r2, [r3, #16]
 8000bf8:	69fb      	ldr	r3, [r7, #28]
 8000bfa:	f003 0307 	and.w	r3, r3, #7
 8000bfe:	009b      	lsls	r3, r3, #2
 8000c00:	fa02 f303 	lsl.w	r3, r2, r3
 8000c04:	69ba      	ldr	r2, [r7, #24]
 8000c06:	4313      	orrs	r3, r2
 8000c08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000c0a:	69fb      	ldr	r3, [r7, #28]
 8000c0c:	08da      	lsrs	r2, r3, #3
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	3208      	adds	r2, #8
 8000c12:	69b9      	ldr	r1, [r7, #24]
 8000c14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000c1e:	69fb      	ldr	r3, [r7, #28]
 8000c20:	005b      	lsls	r3, r3, #1
 8000c22:	2203      	movs	r2, #3
 8000c24:	fa02 f303 	lsl.w	r3, r2, r3
 8000c28:	43db      	mvns	r3, r3
 8000c2a:	69ba      	ldr	r2, [r7, #24]
 8000c2c:	4013      	ands	r3, r2
 8000c2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	685b      	ldr	r3, [r3, #4]
 8000c34:	f003 0203 	and.w	r2, r3, #3
 8000c38:	69fb      	ldr	r3, [r7, #28]
 8000c3a:	005b      	lsls	r3, r3, #1
 8000c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c40:	69ba      	ldr	r2, [r7, #24]
 8000c42:	4313      	orrs	r3, r2
 8000c44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	69ba      	ldr	r2, [r7, #24]
 8000c4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	685b      	ldr	r3, [r3, #4]
 8000c50:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	f000 80a2 	beq.w	8000d9e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	60fb      	str	r3, [r7, #12]
 8000c5e:	4b57      	ldr	r3, [pc, #348]	; (8000dbc <HAL_GPIO_Init+0x2e8>)
 8000c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c62:	4a56      	ldr	r2, [pc, #344]	; (8000dbc <HAL_GPIO_Init+0x2e8>)
 8000c64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c68:	6453      	str	r3, [r2, #68]	; 0x44
 8000c6a:	4b54      	ldr	r3, [pc, #336]	; (8000dbc <HAL_GPIO_Init+0x2e8>)
 8000c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c72:	60fb      	str	r3, [r7, #12]
 8000c74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000c76:	4a52      	ldr	r2, [pc, #328]	; (8000dc0 <HAL_GPIO_Init+0x2ec>)
 8000c78:	69fb      	ldr	r3, [r7, #28]
 8000c7a:	089b      	lsrs	r3, r3, #2
 8000c7c:	3302      	adds	r3, #2
 8000c7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000c84:	69fb      	ldr	r3, [r7, #28]
 8000c86:	f003 0303 	and.w	r3, r3, #3
 8000c8a:	009b      	lsls	r3, r3, #2
 8000c8c:	220f      	movs	r2, #15
 8000c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c92:	43db      	mvns	r3, r3
 8000c94:	69ba      	ldr	r2, [r7, #24]
 8000c96:	4013      	ands	r3, r2
 8000c98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	4a49      	ldr	r2, [pc, #292]	; (8000dc4 <HAL_GPIO_Init+0x2f0>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d019      	beq.n	8000cd6 <HAL_GPIO_Init+0x202>
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	4a48      	ldr	r2, [pc, #288]	; (8000dc8 <HAL_GPIO_Init+0x2f4>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d013      	beq.n	8000cd2 <HAL_GPIO_Init+0x1fe>
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	4a47      	ldr	r2, [pc, #284]	; (8000dcc <HAL_GPIO_Init+0x2f8>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d00d      	beq.n	8000cce <HAL_GPIO_Init+0x1fa>
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	4a46      	ldr	r2, [pc, #280]	; (8000dd0 <HAL_GPIO_Init+0x2fc>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d007      	beq.n	8000cca <HAL_GPIO_Init+0x1f6>
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	4a45      	ldr	r2, [pc, #276]	; (8000dd4 <HAL_GPIO_Init+0x300>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d101      	bne.n	8000cc6 <HAL_GPIO_Init+0x1f2>
 8000cc2:	2304      	movs	r3, #4
 8000cc4:	e008      	b.n	8000cd8 <HAL_GPIO_Init+0x204>
 8000cc6:	2307      	movs	r3, #7
 8000cc8:	e006      	b.n	8000cd8 <HAL_GPIO_Init+0x204>
 8000cca:	2303      	movs	r3, #3
 8000ccc:	e004      	b.n	8000cd8 <HAL_GPIO_Init+0x204>
 8000cce:	2302      	movs	r3, #2
 8000cd0:	e002      	b.n	8000cd8 <HAL_GPIO_Init+0x204>
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	e000      	b.n	8000cd8 <HAL_GPIO_Init+0x204>
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	69fa      	ldr	r2, [r7, #28]
 8000cda:	f002 0203 	and.w	r2, r2, #3
 8000cde:	0092      	lsls	r2, r2, #2
 8000ce0:	4093      	lsls	r3, r2
 8000ce2:	69ba      	ldr	r2, [r7, #24]
 8000ce4:	4313      	orrs	r3, r2
 8000ce6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ce8:	4935      	ldr	r1, [pc, #212]	; (8000dc0 <HAL_GPIO_Init+0x2ec>)
 8000cea:	69fb      	ldr	r3, [r7, #28]
 8000cec:	089b      	lsrs	r3, r3, #2
 8000cee:	3302      	adds	r3, #2
 8000cf0:	69ba      	ldr	r2, [r7, #24]
 8000cf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000cf6:	4b38      	ldr	r3, [pc, #224]	; (8000dd8 <HAL_GPIO_Init+0x304>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000cfc:	693b      	ldr	r3, [r7, #16]
 8000cfe:	43db      	mvns	r3, r3
 8000d00:	69ba      	ldr	r2, [r7, #24]
 8000d02:	4013      	ands	r3, r2
 8000d04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d003      	beq.n	8000d1a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000d12:	69ba      	ldr	r2, [r7, #24]
 8000d14:	693b      	ldr	r3, [r7, #16]
 8000d16:	4313      	orrs	r3, r2
 8000d18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000d1a:	4a2f      	ldr	r2, [pc, #188]	; (8000dd8 <HAL_GPIO_Init+0x304>)
 8000d1c:	69bb      	ldr	r3, [r7, #24]
 8000d1e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000d20:	4b2d      	ldr	r3, [pc, #180]	; (8000dd8 <HAL_GPIO_Init+0x304>)
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d26:	693b      	ldr	r3, [r7, #16]
 8000d28:	43db      	mvns	r3, r3
 8000d2a:	69ba      	ldr	r2, [r7, #24]
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d003      	beq.n	8000d44 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000d3c:	69ba      	ldr	r2, [r7, #24]
 8000d3e:	693b      	ldr	r3, [r7, #16]
 8000d40:	4313      	orrs	r3, r2
 8000d42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000d44:	4a24      	ldr	r2, [pc, #144]	; (8000dd8 <HAL_GPIO_Init+0x304>)
 8000d46:	69bb      	ldr	r3, [r7, #24]
 8000d48:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d4a:	4b23      	ldr	r3, [pc, #140]	; (8000dd8 <HAL_GPIO_Init+0x304>)
 8000d4c:	689b      	ldr	r3, [r3, #8]
 8000d4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d50:	693b      	ldr	r3, [r7, #16]
 8000d52:	43db      	mvns	r3, r3
 8000d54:	69ba      	ldr	r2, [r7, #24]
 8000d56:	4013      	ands	r3, r2
 8000d58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d003      	beq.n	8000d6e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000d66:	69ba      	ldr	r2, [r7, #24]
 8000d68:	693b      	ldr	r3, [r7, #16]
 8000d6a:	4313      	orrs	r3, r2
 8000d6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000d6e:	4a1a      	ldr	r2, [pc, #104]	; (8000dd8 <HAL_GPIO_Init+0x304>)
 8000d70:	69bb      	ldr	r3, [r7, #24]
 8000d72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000d74:	4b18      	ldr	r3, [pc, #96]	; (8000dd8 <HAL_GPIO_Init+0x304>)
 8000d76:	68db      	ldr	r3, [r3, #12]
 8000d78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d7a:	693b      	ldr	r3, [r7, #16]
 8000d7c:	43db      	mvns	r3, r3
 8000d7e:	69ba      	ldr	r2, [r7, #24]
 8000d80:	4013      	ands	r3, r2
 8000d82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d003      	beq.n	8000d98 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000d90:	69ba      	ldr	r2, [r7, #24]
 8000d92:	693b      	ldr	r3, [r7, #16]
 8000d94:	4313      	orrs	r3, r2
 8000d96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000d98:	4a0f      	ldr	r2, [pc, #60]	; (8000dd8 <HAL_GPIO_Init+0x304>)
 8000d9a:	69bb      	ldr	r3, [r7, #24]
 8000d9c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d9e:	69fb      	ldr	r3, [r7, #28]
 8000da0:	3301      	adds	r3, #1
 8000da2:	61fb      	str	r3, [r7, #28]
 8000da4:	69fb      	ldr	r3, [r7, #28]
 8000da6:	2b0f      	cmp	r3, #15
 8000da8:	f67f aea2 	bls.w	8000af0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000dac:	bf00      	nop
 8000dae:	bf00      	nop
 8000db0:	3724      	adds	r7, #36	; 0x24
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	40023800 	.word	0x40023800
 8000dc0:	40013800 	.word	0x40013800
 8000dc4:	40020000 	.word	0x40020000
 8000dc8:	40020400 	.word	0x40020400
 8000dcc:	40020800 	.word	0x40020800
 8000dd0:	40020c00 	.word	0x40020c00
 8000dd4:	40021000 	.word	0x40021000
 8000dd8:	40013c00 	.word	0x40013c00

08000ddc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dde:	b08f      	sub	sp, #60	; 0x3c
 8000de0:	af0a      	add	r7, sp, #40	; 0x28
 8000de2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d101      	bne.n	8000dee <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000dea:	2301      	movs	r3, #1
 8000dec:	e10f      	b.n	800100e <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8000dfa:	b2db      	uxtb	r3, r3
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d106      	bne.n	8000e0e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	2200      	movs	r2, #0
 8000e04:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000e08:	6878      	ldr	r0, [r7, #4]
 8000e0a:	f004 fdb1 	bl	8005970 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	2203      	movs	r2, #3
 8000e12:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000e16:	68bb      	ldr	r3, [r7, #8]
 8000e18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d102      	bne.n	8000e28 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	2200      	movs	r2, #0
 8000e26:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f001 fe8e 	bl	8002b4e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	603b      	str	r3, [r7, #0]
 8000e38:	687e      	ldr	r6, [r7, #4]
 8000e3a:	466d      	mov	r5, sp
 8000e3c:	f106 0410 	add.w	r4, r6, #16
 8000e40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e42:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e46:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e48:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000e4c:	e885 0003 	stmia.w	r5, {r0, r1}
 8000e50:	1d33      	adds	r3, r6, #4
 8000e52:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e54:	6838      	ldr	r0, [r7, #0]
 8000e56:	f001 fd65 	bl	8002924 <USB_CoreInit>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d005      	beq.n	8000e6c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	2202      	movs	r2, #2
 8000e64:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	e0d0      	b.n	800100e <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	2100      	movs	r1, #0
 8000e72:	4618      	mov	r0, r3
 8000e74:	f001 fe7c 	bl	8002b70 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e78:	2300      	movs	r3, #0
 8000e7a:	73fb      	strb	r3, [r7, #15]
 8000e7c:	e04a      	b.n	8000f14 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000e7e:	7bfa      	ldrb	r2, [r7, #15]
 8000e80:	6879      	ldr	r1, [r7, #4]
 8000e82:	4613      	mov	r3, r2
 8000e84:	00db      	lsls	r3, r3, #3
 8000e86:	1a9b      	subs	r3, r3, r2
 8000e88:	009b      	lsls	r3, r3, #2
 8000e8a:	440b      	add	r3, r1
 8000e8c:	333d      	adds	r3, #61	; 0x3d
 8000e8e:	2201      	movs	r2, #1
 8000e90:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000e92:	7bfa      	ldrb	r2, [r7, #15]
 8000e94:	6879      	ldr	r1, [r7, #4]
 8000e96:	4613      	mov	r3, r2
 8000e98:	00db      	lsls	r3, r3, #3
 8000e9a:	1a9b      	subs	r3, r3, r2
 8000e9c:	009b      	lsls	r3, r3, #2
 8000e9e:	440b      	add	r3, r1
 8000ea0:	333c      	adds	r3, #60	; 0x3c
 8000ea2:	7bfa      	ldrb	r2, [r7, #15]
 8000ea4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000ea6:	7bfa      	ldrb	r2, [r7, #15]
 8000ea8:	7bfb      	ldrb	r3, [r7, #15]
 8000eaa:	b298      	uxth	r0, r3
 8000eac:	6879      	ldr	r1, [r7, #4]
 8000eae:	4613      	mov	r3, r2
 8000eb0:	00db      	lsls	r3, r3, #3
 8000eb2:	1a9b      	subs	r3, r3, r2
 8000eb4:	009b      	lsls	r3, r3, #2
 8000eb6:	440b      	add	r3, r1
 8000eb8:	3342      	adds	r3, #66	; 0x42
 8000eba:	4602      	mov	r2, r0
 8000ebc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000ebe:	7bfa      	ldrb	r2, [r7, #15]
 8000ec0:	6879      	ldr	r1, [r7, #4]
 8000ec2:	4613      	mov	r3, r2
 8000ec4:	00db      	lsls	r3, r3, #3
 8000ec6:	1a9b      	subs	r3, r3, r2
 8000ec8:	009b      	lsls	r3, r3, #2
 8000eca:	440b      	add	r3, r1
 8000ecc:	333f      	adds	r3, #63	; 0x3f
 8000ece:	2200      	movs	r2, #0
 8000ed0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000ed2:	7bfa      	ldrb	r2, [r7, #15]
 8000ed4:	6879      	ldr	r1, [r7, #4]
 8000ed6:	4613      	mov	r3, r2
 8000ed8:	00db      	lsls	r3, r3, #3
 8000eda:	1a9b      	subs	r3, r3, r2
 8000edc:	009b      	lsls	r3, r3, #2
 8000ede:	440b      	add	r3, r1
 8000ee0:	3344      	adds	r3, #68	; 0x44
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000ee6:	7bfa      	ldrb	r2, [r7, #15]
 8000ee8:	6879      	ldr	r1, [r7, #4]
 8000eea:	4613      	mov	r3, r2
 8000eec:	00db      	lsls	r3, r3, #3
 8000eee:	1a9b      	subs	r3, r3, r2
 8000ef0:	009b      	lsls	r3, r3, #2
 8000ef2:	440b      	add	r3, r1
 8000ef4:	3348      	adds	r3, #72	; 0x48
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000efa:	7bfa      	ldrb	r2, [r7, #15]
 8000efc:	6879      	ldr	r1, [r7, #4]
 8000efe:	4613      	mov	r3, r2
 8000f00:	00db      	lsls	r3, r3, #3
 8000f02:	1a9b      	subs	r3, r3, r2
 8000f04:	009b      	lsls	r3, r3, #2
 8000f06:	440b      	add	r3, r1
 8000f08:	3350      	adds	r3, #80	; 0x50
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f0e:	7bfb      	ldrb	r3, [r7, #15]
 8000f10:	3301      	adds	r3, #1
 8000f12:	73fb      	strb	r3, [r7, #15]
 8000f14:	7bfa      	ldrb	r2, [r7, #15]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	429a      	cmp	r2, r3
 8000f1c:	d3af      	bcc.n	8000e7e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f1e:	2300      	movs	r3, #0
 8000f20:	73fb      	strb	r3, [r7, #15]
 8000f22:	e044      	b.n	8000fae <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000f24:	7bfa      	ldrb	r2, [r7, #15]
 8000f26:	6879      	ldr	r1, [r7, #4]
 8000f28:	4613      	mov	r3, r2
 8000f2a:	00db      	lsls	r3, r3, #3
 8000f2c:	1a9b      	subs	r3, r3, r2
 8000f2e:	009b      	lsls	r3, r3, #2
 8000f30:	440b      	add	r3, r1
 8000f32:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8000f36:	2200      	movs	r2, #0
 8000f38:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000f3a:	7bfa      	ldrb	r2, [r7, #15]
 8000f3c:	6879      	ldr	r1, [r7, #4]
 8000f3e:	4613      	mov	r3, r2
 8000f40:	00db      	lsls	r3, r3, #3
 8000f42:	1a9b      	subs	r3, r3, r2
 8000f44:	009b      	lsls	r3, r3, #2
 8000f46:	440b      	add	r3, r1
 8000f48:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8000f4c:	7bfa      	ldrb	r2, [r7, #15]
 8000f4e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000f50:	7bfa      	ldrb	r2, [r7, #15]
 8000f52:	6879      	ldr	r1, [r7, #4]
 8000f54:	4613      	mov	r3, r2
 8000f56:	00db      	lsls	r3, r3, #3
 8000f58:	1a9b      	subs	r3, r3, r2
 8000f5a:	009b      	lsls	r3, r3, #2
 8000f5c:	440b      	add	r3, r1
 8000f5e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8000f62:	2200      	movs	r2, #0
 8000f64:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000f66:	7bfa      	ldrb	r2, [r7, #15]
 8000f68:	6879      	ldr	r1, [r7, #4]
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	00db      	lsls	r3, r3, #3
 8000f6e:	1a9b      	subs	r3, r3, r2
 8000f70:	009b      	lsls	r3, r3, #2
 8000f72:	440b      	add	r3, r1
 8000f74:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8000f78:	2200      	movs	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000f7c:	7bfa      	ldrb	r2, [r7, #15]
 8000f7e:	6879      	ldr	r1, [r7, #4]
 8000f80:	4613      	mov	r3, r2
 8000f82:	00db      	lsls	r3, r3, #3
 8000f84:	1a9b      	subs	r3, r3, r2
 8000f86:	009b      	lsls	r3, r3, #2
 8000f88:	440b      	add	r3, r1
 8000f8a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8000f8e:	2200      	movs	r2, #0
 8000f90:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000f92:	7bfa      	ldrb	r2, [r7, #15]
 8000f94:	6879      	ldr	r1, [r7, #4]
 8000f96:	4613      	mov	r3, r2
 8000f98:	00db      	lsls	r3, r3, #3
 8000f9a:	1a9b      	subs	r3, r3, r2
 8000f9c:	009b      	lsls	r3, r3, #2
 8000f9e:	440b      	add	r3, r1
 8000fa0:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fa8:	7bfb      	ldrb	r3, [r7, #15]
 8000faa:	3301      	adds	r3, #1
 8000fac:	73fb      	strb	r3, [r7, #15]
 8000fae:	7bfa      	ldrb	r2, [r7, #15]
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	d3b5      	bcc.n	8000f24 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	603b      	str	r3, [r7, #0]
 8000fbe:	687e      	ldr	r6, [r7, #4]
 8000fc0:	466d      	mov	r5, sp
 8000fc2:	f106 0410 	add.w	r4, r6, #16
 8000fc6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fc8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fcc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fce:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000fd2:	e885 0003 	stmia.w	r5, {r0, r1}
 8000fd6:	1d33      	adds	r3, r6, #4
 8000fd8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000fda:	6838      	ldr	r0, [r7, #0]
 8000fdc:	f001 fe14 	bl	8002c08 <USB_DevInit>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d005      	beq.n	8000ff2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	2202      	movs	r2, #2
 8000fea:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	e00d      	b.n	800100e <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4618      	mov	r0, r3
 8001008:	f002 fe90 	bl	8003d2c <USB_DevDisconnect>

  return HAL_OK;
 800100c:	2300      	movs	r3, #0
}
 800100e:	4618      	mov	r0, r3
 8001010:	3714      	adds	r7, #20
 8001012:	46bd      	mov	sp, r7
 8001014:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001016 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001016:	b580      	push	{r7, lr}
 8001018:	b084      	sub	sp, #16
 800101a:	af00      	add	r7, sp, #0
 800101c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800102a:	2b01      	cmp	r3, #1
 800102c:	d101      	bne.n	8001032 <HAL_PCD_Start+0x1c>
 800102e:	2302      	movs	r3, #2
 8001030:	e020      	b.n	8001074 <HAL_PCD_Start+0x5e>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2201      	movs	r2, #1
 8001036:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800103e:	2b01      	cmp	r3, #1
 8001040:	d109      	bne.n	8001056 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001046:	2b01      	cmp	r3, #1
 8001048:	d005      	beq.n	8001056 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800104e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4618      	mov	r0, r3
 800105c:	f001 fd66 	bl	8002b2c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4618      	mov	r0, r3
 8001066:	f002 fe40 	bl	8003cea <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2200      	movs	r2, #0
 800106e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001072:	2300      	movs	r3, #0
}
 8001074:	4618      	mov	r0, r3
 8001076:	3710      	adds	r7, #16
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}

0800107c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800107c:	b590      	push	{r4, r7, lr}
 800107e:	b08d      	sub	sp, #52	; 0x34
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800108a:	6a3b      	ldr	r3, [r7, #32]
 800108c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4618      	mov	r0, r3
 8001094:	f002 fefe 	bl	8003e94 <USB_GetMode>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	f040 839d 	bne.w	80017da <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4618      	mov	r0, r3
 80010a6:	f002 fe62 	bl	8003d6e <USB_ReadInterrupts>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	f000 8393 	beq.w	80017d8 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4618      	mov	r0, r3
 80010b8:	f002 fe59 	bl	8003d6e <USB_ReadInterrupts>
 80010bc:	4603      	mov	r3, r0
 80010be:	f003 0302 	and.w	r3, r3, #2
 80010c2:	2b02      	cmp	r3, #2
 80010c4:	d107      	bne.n	80010d6 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	695a      	ldr	r2, [r3, #20]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f002 0202 	and.w	r2, r2, #2
 80010d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4618      	mov	r0, r3
 80010dc:	f002 fe47 	bl	8003d6e <USB_ReadInterrupts>
 80010e0:	4603      	mov	r3, r0
 80010e2:	f003 0310 	and.w	r3, r3, #16
 80010e6:	2b10      	cmp	r3, #16
 80010e8:	d161      	bne.n	80011ae <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	699a      	ldr	r2, [r3, #24]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f022 0210 	bic.w	r2, r2, #16
 80010f8:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80010fa:	6a3b      	ldr	r3, [r7, #32]
 80010fc:	6a1b      	ldr	r3, [r3, #32]
 80010fe:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001100:	69bb      	ldr	r3, [r7, #24]
 8001102:	f003 020f 	and.w	r2, r3, #15
 8001106:	4613      	mov	r3, r2
 8001108:	00db      	lsls	r3, r3, #3
 800110a:	1a9b      	subs	r3, r3, r2
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001112:	687a      	ldr	r2, [r7, #4]
 8001114:	4413      	add	r3, r2
 8001116:	3304      	adds	r3, #4
 8001118:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800111a:	69bb      	ldr	r3, [r7, #24]
 800111c:	0c5b      	lsrs	r3, r3, #17
 800111e:	f003 030f 	and.w	r3, r3, #15
 8001122:	2b02      	cmp	r3, #2
 8001124:	d124      	bne.n	8001170 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001126:	69ba      	ldr	r2, [r7, #24]
 8001128:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800112c:	4013      	ands	r3, r2
 800112e:	2b00      	cmp	r3, #0
 8001130:	d035      	beq.n	800119e <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001136:	69bb      	ldr	r3, [r7, #24]
 8001138:	091b      	lsrs	r3, r3, #4
 800113a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800113c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001140:	b29b      	uxth	r3, r3
 8001142:	461a      	mov	r2, r3
 8001144:	6a38      	ldr	r0, [r7, #32]
 8001146:	f002 fc7e 	bl	8003a46 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	68da      	ldr	r2, [r3, #12]
 800114e:	69bb      	ldr	r3, [r7, #24]
 8001150:	091b      	lsrs	r3, r3, #4
 8001152:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001156:	441a      	add	r2, r3
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	699a      	ldr	r2, [r3, #24]
 8001160:	69bb      	ldr	r3, [r7, #24]
 8001162:	091b      	lsrs	r3, r3, #4
 8001164:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001168:	441a      	add	r2, r3
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	619a      	str	r2, [r3, #24]
 800116e:	e016      	b.n	800119e <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001170:	69bb      	ldr	r3, [r7, #24]
 8001172:	0c5b      	lsrs	r3, r3, #17
 8001174:	f003 030f 	and.w	r3, r3, #15
 8001178:	2b06      	cmp	r3, #6
 800117a:	d110      	bne.n	800119e <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001182:	2208      	movs	r2, #8
 8001184:	4619      	mov	r1, r3
 8001186:	6a38      	ldr	r0, [r7, #32]
 8001188:	f002 fc5d 	bl	8003a46 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	699a      	ldr	r2, [r3, #24]
 8001190:	69bb      	ldr	r3, [r7, #24]
 8001192:	091b      	lsrs	r3, r3, #4
 8001194:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001198:	441a      	add	r2, r3
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	699a      	ldr	r2, [r3, #24]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f042 0210 	orr.w	r2, r2, #16
 80011ac:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4618      	mov	r0, r3
 80011b4:	f002 fddb 	bl	8003d6e <USB_ReadInterrupts>
 80011b8:	4603      	mov	r3, r0
 80011ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80011be:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80011c2:	d16e      	bne.n	80012a2 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80011c4:	2300      	movs	r3, #0
 80011c6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4618      	mov	r0, r3
 80011ce:	f002 fde1 	bl	8003d94 <USB_ReadDevAllOutEpInterrupt>
 80011d2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80011d4:	e062      	b.n	800129c <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80011d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011d8:	f003 0301 	and.w	r3, r3, #1
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d057      	beq.n	8001290 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011e6:	b2d2      	uxtb	r2, r2
 80011e8:	4611      	mov	r1, r2
 80011ea:	4618      	mov	r0, r3
 80011ec:	f002 fe06 	bl	8003dfc <USB_ReadDevOutEPInterrupt>
 80011f0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	f003 0301 	and.w	r3, r3, #1
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d00c      	beq.n	8001216 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80011fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011fe:	015a      	lsls	r2, r3, #5
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	4413      	add	r3, r2
 8001204:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001208:	461a      	mov	r2, r3
 800120a:	2301      	movs	r3, #1
 800120c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800120e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	f000 fdb1 	bl	8001d78 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	f003 0308 	and.w	r3, r3, #8
 800121c:	2b00      	cmp	r3, #0
 800121e:	d00c      	beq.n	800123a <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001222:	015a      	lsls	r2, r3, #5
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	4413      	add	r3, r2
 8001228:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800122c:	461a      	mov	r2, r3
 800122e:	2308      	movs	r3, #8
 8001230:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001232:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001234:	6878      	ldr	r0, [r7, #4]
 8001236:	f000 feab 	bl	8001f90 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	f003 0310 	and.w	r3, r3, #16
 8001240:	2b00      	cmp	r3, #0
 8001242:	d008      	beq.n	8001256 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001246:	015a      	lsls	r2, r3, #5
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	4413      	add	r3, r2
 800124c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001250:	461a      	mov	r2, r3
 8001252:	2310      	movs	r3, #16
 8001254:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	f003 0320 	and.w	r3, r3, #32
 800125c:	2b00      	cmp	r3, #0
 800125e:	d008      	beq.n	8001272 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001262:	015a      	lsls	r2, r3, #5
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	4413      	add	r3, r2
 8001268:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800126c:	461a      	mov	r2, r3
 800126e:	2320      	movs	r3, #32
 8001270:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001278:	2b00      	cmp	r3, #0
 800127a:	d009      	beq.n	8001290 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800127c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800127e:	015a      	lsls	r2, r3, #5
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	4413      	add	r3, r2
 8001284:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001288:	461a      	mov	r2, r3
 800128a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800128e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001292:	3301      	adds	r3, #1
 8001294:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001298:	085b      	lsrs	r3, r3, #1
 800129a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800129c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d199      	bne.n	80011d6 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4618      	mov	r0, r3
 80012a8:	f002 fd61 	bl	8003d6e <USB_ReadInterrupts>
 80012ac:	4603      	mov	r3, r0
 80012ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012b2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80012b6:	f040 80c0 	bne.w	800143a <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4618      	mov	r0, r3
 80012c0:	f002 fd82 	bl	8003dc8 <USB_ReadDevAllInEpInterrupt>
 80012c4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80012c6:	2300      	movs	r3, #0
 80012c8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80012ca:	e0b2      	b.n	8001432 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80012cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012ce:	f003 0301 	and.w	r3, r3, #1
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	f000 80a7 	beq.w	8001426 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012de:	b2d2      	uxtb	r2, r2
 80012e0:	4611      	mov	r1, r2
 80012e2:	4618      	mov	r0, r3
 80012e4:	f002 fda8 	bl	8003e38 <USB_ReadDevInEPInterrupt>
 80012e8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	f003 0301 	and.w	r3, r3, #1
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d057      	beq.n	80013a4 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80012f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f6:	f003 030f 	and.w	r3, r3, #15
 80012fa:	2201      	movs	r2, #1
 80012fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001300:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001308:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	43db      	mvns	r3, r3
 800130e:	69f9      	ldr	r1, [r7, #28]
 8001310:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001314:	4013      	ands	r3, r2
 8001316:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800131a:	015a      	lsls	r2, r3, #5
 800131c:	69fb      	ldr	r3, [r7, #28]
 800131e:	4413      	add	r3, r2
 8001320:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001324:	461a      	mov	r2, r3
 8001326:	2301      	movs	r3, #1
 8001328:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	691b      	ldr	r3, [r3, #16]
 800132e:	2b01      	cmp	r3, #1
 8001330:	d132      	bne.n	8001398 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001332:	6879      	ldr	r1, [r7, #4]
 8001334:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001336:	4613      	mov	r3, r2
 8001338:	00db      	lsls	r3, r3, #3
 800133a:	1a9b      	subs	r3, r3, r2
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	440b      	add	r3, r1
 8001340:	3348      	adds	r3, #72	; 0x48
 8001342:	6819      	ldr	r1, [r3, #0]
 8001344:	6878      	ldr	r0, [r7, #4]
 8001346:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001348:	4613      	mov	r3, r2
 800134a:	00db      	lsls	r3, r3, #3
 800134c:	1a9b      	subs	r3, r3, r2
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	4403      	add	r3, r0
 8001352:	3344      	adds	r3, #68	; 0x44
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4419      	add	r1, r3
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800135c:	4613      	mov	r3, r2
 800135e:	00db      	lsls	r3, r3, #3
 8001360:	1a9b      	subs	r3, r3, r2
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	4403      	add	r3, r0
 8001366:	3348      	adds	r3, #72	; 0x48
 8001368:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800136a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800136c:	2b00      	cmp	r3, #0
 800136e:	d113      	bne.n	8001398 <HAL_PCD_IRQHandler+0x31c>
 8001370:	6879      	ldr	r1, [r7, #4]
 8001372:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001374:	4613      	mov	r3, r2
 8001376:	00db      	lsls	r3, r3, #3
 8001378:	1a9b      	subs	r3, r3, r2
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	440b      	add	r3, r1
 800137e:	3350      	adds	r3, #80	; 0x50
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d108      	bne.n	8001398 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6818      	ldr	r0, [r3, #0]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001390:	461a      	mov	r2, r3
 8001392:	2101      	movs	r1, #1
 8001394:	f002 fdb0 	bl	8003ef8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800139a:	b2db      	uxtb	r3, r3
 800139c:	4619      	mov	r1, r3
 800139e:	6878      	ldr	r0, [r7, #4]
 80013a0:	f004 fb67 	bl	8005a72 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	f003 0308 	and.w	r3, r3, #8
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d008      	beq.n	80013c0 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80013ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b0:	015a      	lsls	r2, r3, #5
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	4413      	add	r3, r2
 80013b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80013ba:	461a      	mov	r2, r3
 80013bc:	2308      	movs	r3, #8
 80013be:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	f003 0310 	and.w	r3, r3, #16
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d008      	beq.n	80013dc <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80013ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013cc:	015a      	lsls	r2, r3, #5
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	4413      	add	r3, r2
 80013d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80013d6:	461a      	mov	r2, r3
 80013d8:	2310      	movs	r3, #16
 80013da:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d008      	beq.n	80013f8 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80013e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e8:	015a      	lsls	r2, r3, #5
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	4413      	add	r3, r2
 80013ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80013f2:	461a      	mov	r2, r3
 80013f4:	2340      	movs	r3, #64	; 0x40
 80013f6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	f003 0302 	and.w	r3, r3, #2
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d008      	beq.n	8001414 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001404:	015a      	lsls	r2, r3, #5
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	4413      	add	r3, r2
 800140a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800140e:	461a      	mov	r2, r3
 8001410:	2302      	movs	r3, #2
 8001412:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800141a:	2b00      	cmp	r3, #0
 800141c:	d003      	beq.n	8001426 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800141e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001420:	6878      	ldr	r0, [r7, #4]
 8001422:	f000 fc1b 	bl	8001c5c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001428:	3301      	adds	r3, #1
 800142a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800142c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800142e:	085b      	lsrs	r3, r3, #1
 8001430:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001434:	2b00      	cmp	r3, #0
 8001436:	f47f af49 	bne.w	80012cc <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4618      	mov	r0, r3
 8001440:	f002 fc95 	bl	8003d6e <USB_ReadInterrupts>
 8001444:	4603      	mov	r3, r0
 8001446:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800144a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800144e:	d122      	bne.n	8001496 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	69fa      	ldr	r2, [r7, #28]
 800145a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800145e:	f023 0301 	bic.w	r3, r3, #1
 8001462:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800146a:	2b01      	cmp	r3, #1
 800146c:	d108      	bne.n	8001480 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2200      	movs	r2, #0
 8001472:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001476:	2100      	movs	r1, #0
 8001478:	6878      	ldr	r0, [r7, #4]
 800147a:	f000 fe27 	bl	80020cc <HAL_PCDEx_LPM_Callback>
 800147e:	e002      	b.n	8001486 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001480:	6878      	ldr	r0, [r7, #4]
 8001482:	f004 fb63 	bl	8005b4c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	695a      	ldr	r2, [r3, #20]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001494:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4618      	mov	r0, r3
 800149c:	f002 fc67 	bl	8003d6e <USB_ReadInterrupts>
 80014a0:	4603      	mov	r3, r0
 80014a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80014a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80014aa:	d112      	bne.n	80014d2 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80014ac:	69fb      	ldr	r3, [r7, #28]
 80014ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	f003 0301 	and.w	r3, r3, #1
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d102      	bne.n	80014c2 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80014bc:	6878      	ldr	r0, [r7, #4]
 80014be:	f004 fb1f 	bl	8005b00 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	695a      	ldr	r2, [r3, #20]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80014d0:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4618      	mov	r0, r3
 80014d8:	f002 fc49 	bl	8003d6e <USB_ReadInterrupts>
 80014dc:	4603      	mov	r3, r0
 80014de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80014e6:	f040 80c7 	bne.w	8001678 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	69fa      	ldr	r2, [r7, #28]
 80014f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80014f8:	f023 0301 	bic.w	r3, r3, #1
 80014fc:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	2110      	movs	r1, #16
 8001504:	4618      	mov	r0, r3
 8001506:	f001 fce3 	bl	8002ed0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800150a:	2300      	movs	r3, #0
 800150c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800150e:	e056      	b.n	80015be <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001512:	015a      	lsls	r2, r3, #5
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	4413      	add	r3, r2
 8001518:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800151c:	461a      	mov	r2, r3
 800151e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001522:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001526:	015a      	lsls	r2, r3, #5
 8001528:	69fb      	ldr	r3, [r7, #28]
 800152a:	4413      	add	r3, r2
 800152c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001534:	0151      	lsls	r1, r2, #5
 8001536:	69fa      	ldr	r2, [r7, #28]
 8001538:	440a      	add	r2, r1
 800153a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800153e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001542:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8001544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001546:	015a      	lsls	r2, r3, #5
 8001548:	69fb      	ldr	r3, [r7, #28]
 800154a:	4413      	add	r3, r2
 800154c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001554:	0151      	lsls	r1, r2, #5
 8001556:	69fa      	ldr	r2, [r7, #28]
 8001558:	440a      	add	r2, r1
 800155a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800155e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001562:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001566:	015a      	lsls	r2, r3, #5
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	4413      	add	r3, r2
 800156c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001570:	461a      	mov	r2, r3
 8001572:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001576:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800157a:	015a      	lsls	r2, r3, #5
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	4413      	add	r3, r2
 8001580:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001588:	0151      	lsls	r1, r2, #5
 800158a:	69fa      	ldr	r2, [r7, #28]
 800158c:	440a      	add	r2, r1
 800158e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001592:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001596:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800159a:	015a      	lsls	r2, r3, #5
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	4413      	add	r3, r2
 80015a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015a8:	0151      	lsls	r1, r2, #5
 80015aa:	69fa      	ldr	r2, [r7, #28]
 80015ac:	440a      	add	r2, r1
 80015ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80015b2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80015b6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015ba:	3301      	adds	r3, #1
 80015bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d3a3      	bcc.n	8001510 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80015c8:	69fb      	ldr	r3, [r7, #28]
 80015ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015ce:	69db      	ldr	r3, [r3, #28]
 80015d0:	69fa      	ldr	r2, [r7, #28]
 80015d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80015d6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80015da:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d016      	beq.n	8001612 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80015e4:	69fb      	ldr	r3, [r7, #28]
 80015e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80015ee:	69fa      	ldr	r2, [r7, #28]
 80015f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80015f4:	f043 030b 	orr.w	r3, r3, #11
 80015f8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001602:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001604:	69fa      	ldr	r2, [r7, #28]
 8001606:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800160a:	f043 030b 	orr.w	r3, r3, #11
 800160e:	6453      	str	r3, [r2, #68]	; 0x44
 8001610:	e015      	b.n	800163e <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001618:	695b      	ldr	r3, [r3, #20]
 800161a:	69fa      	ldr	r2, [r7, #28]
 800161c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001620:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001624:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001628:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001630:	691b      	ldr	r3, [r3, #16]
 8001632:	69fa      	ldr	r2, [r7, #28]
 8001634:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001638:	f043 030b 	orr.w	r3, r3, #11
 800163c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	69fa      	ldr	r2, [r7, #28]
 8001648:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800164c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001650:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6818      	ldr	r0, [r3, #0]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	691b      	ldr	r3, [r3, #16]
 800165a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001662:	461a      	mov	r2, r3
 8001664:	f002 fc48 	bl	8003ef8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	695a      	ldr	r2, [r3, #20]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001676:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4618      	mov	r0, r3
 800167e:	f002 fb76 	bl	8003d6e <USB_ReadInterrupts>
 8001682:	4603      	mov	r3, r0
 8001684:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001688:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800168c:	d124      	bne.n	80016d8 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4618      	mov	r0, r3
 8001694:	f002 fc0c 	bl	8003eb0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4618      	mov	r0, r3
 800169e:	f001 fc74 	bl	8002f8a <USB_GetDevSpeed>
 80016a2:	4603      	mov	r3, r0
 80016a4:	461a      	mov	r2, r3
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681c      	ldr	r4, [r3, #0]
 80016ae:	f001 f92d 	bl	800290c <HAL_RCC_GetHCLKFreq>
 80016b2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	461a      	mov	r2, r3
 80016bc:	4620      	mov	r0, r4
 80016be:	f001 f993 	bl	80029e8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f004 f9fd 	bl	8005ac2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	695a      	ldr	r2, [r3, #20]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80016d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4618      	mov	r0, r3
 80016de:	f002 fb46 	bl	8003d6e <USB_ReadInterrupts>
 80016e2:	4603      	mov	r3, r0
 80016e4:	f003 0308 	and.w	r3, r3, #8
 80016e8:	2b08      	cmp	r3, #8
 80016ea:	d10a      	bne.n	8001702 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	f004 f9da 	bl	8005aa6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	695a      	ldr	r2, [r3, #20]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f002 0208 	and.w	r2, r2, #8
 8001700:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4618      	mov	r0, r3
 8001708:	f002 fb31 	bl	8003d6e <USB_ReadInterrupts>
 800170c:	4603      	mov	r3, r0
 800170e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001712:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001716:	d10f      	bne.n	8001738 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001718:	2300      	movs	r3, #0
 800171a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800171c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800171e:	b2db      	uxtb	r3, r3
 8001720:	4619      	mov	r1, r3
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	f004 fa32 	bl	8005b8c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	695a      	ldr	r2, [r3, #20]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001736:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4618      	mov	r0, r3
 800173e:	f002 fb16 	bl	8003d6e <USB_ReadInterrupts>
 8001742:	4603      	mov	r3, r0
 8001744:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001748:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800174c:	d10f      	bne.n	800176e <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800174e:	2300      	movs	r3, #0
 8001750:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001754:	b2db      	uxtb	r3, r3
 8001756:	4619      	mov	r1, r3
 8001758:	6878      	ldr	r0, [r7, #4]
 800175a:	f004 fa05 	bl	8005b68 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	695a      	ldr	r2, [r3, #20]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800176c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4618      	mov	r0, r3
 8001774:	f002 fafb 	bl	8003d6e <USB_ReadInterrupts>
 8001778:	4603      	mov	r3, r0
 800177a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800177e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001782:	d10a      	bne.n	800179a <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001784:	6878      	ldr	r0, [r7, #4]
 8001786:	f004 fa13 	bl	8005bb0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	695a      	ldr	r2, [r3, #20]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001798:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4618      	mov	r0, r3
 80017a0:	f002 fae5 	bl	8003d6e <USB_ReadInterrupts>
 80017a4:	4603      	mov	r3, r0
 80017a6:	f003 0304 	and.w	r3, r3, #4
 80017aa:	2b04      	cmp	r3, #4
 80017ac:	d115      	bne.n	80017da <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80017b6:	69bb      	ldr	r3, [r7, #24]
 80017b8:	f003 0304 	and.w	r3, r3, #4
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d002      	beq.n	80017c6 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80017c0:	6878      	ldr	r0, [r7, #4]
 80017c2:	f004 fa03 	bl	8005bcc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	6859      	ldr	r1, [r3, #4]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	69ba      	ldr	r2, [r7, #24]
 80017d2:	430a      	orrs	r2, r1
 80017d4:	605a      	str	r2, [r3, #4]
 80017d6:	e000      	b.n	80017da <HAL_PCD_IRQHandler+0x75e>
      return;
 80017d8:	bf00      	nop
    }
  }
}
 80017da:	3734      	adds	r7, #52	; 0x34
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd90      	pop	{r4, r7, pc}

080017e0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	460b      	mov	r3, r1
 80017ea:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d101      	bne.n	80017fa <HAL_PCD_SetAddress+0x1a>
 80017f6:	2302      	movs	r3, #2
 80017f8:	e013      	b.n	8001822 <HAL_PCD_SetAddress+0x42>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2201      	movs	r2, #1
 80017fe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	78fa      	ldrb	r2, [r7, #3]
 8001806:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	78fa      	ldrb	r2, [r7, #3]
 8001810:	4611      	mov	r1, r2
 8001812:	4618      	mov	r0, r3
 8001814:	f002 fa43 	bl	8003c9e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2200      	movs	r2, #0
 800181c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001820:	2300      	movs	r3, #0
}
 8001822:	4618      	mov	r0, r3
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}

0800182a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800182a:	b580      	push	{r7, lr}
 800182c:	b084      	sub	sp, #16
 800182e:	af00      	add	r7, sp, #0
 8001830:	6078      	str	r0, [r7, #4]
 8001832:	4608      	mov	r0, r1
 8001834:	4611      	mov	r1, r2
 8001836:	461a      	mov	r2, r3
 8001838:	4603      	mov	r3, r0
 800183a:	70fb      	strb	r3, [r7, #3]
 800183c:	460b      	mov	r3, r1
 800183e:	803b      	strh	r3, [r7, #0]
 8001840:	4613      	mov	r3, r2
 8001842:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001844:	2300      	movs	r3, #0
 8001846:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001848:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800184c:	2b00      	cmp	r3, #0
 800184e:	da0f      	bge.n	8001870 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001850:	78fb      	ldrb	r3, [r7, #3]
 8001852:	f003 020f 	and.w	r2, r3, #15
 8001856:	4613      	mov	r3, r2
 8001858:	00db      	lsls	r3, r3, #3
 800185a:	1a9b      	subs	r3, r3, r2
 800185c:	009b      	lsls	r3, r3, #2
 800185e:	3338      	adds	r3, #56	; 0x38
 8001860:	687a      	ldr	r2, [r7, #4]
 8001862:	4413      	add	r3, r2
 8001864:	3304      	adds	r3, #4
 8001866:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	2201      	movs	r2, #1
 800186c:	705a      	strb	r2, [r3, #1]
 800186e:	e00f      	b.n	8001890 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001870:	78fb      	ldrb	r3, [r7, #3]
 8001872:	f003 020f 	and.w	r2, r3, #15
 8001876:	4613      	mov	r3, r2
 8001878:	00db      	lsls	r3, r3, #3
 800187a:	1a9b      	subs	r3, r3, r2
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001882:	687a      	ldr	r2, [r7, #4]
 8001884:	4413      	add	r3, r2
 8001886:	3304      	adds	r3, #4
 8001888:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	2200      	movs	r2, #0
 800188e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001890:	78fb      	ldrb	r3, [r7, #3]
 8001892:	f003 030f 	and.w	r3, r3, #15
 8001896:	b2da      	uxtb	r2, r3
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800189c:	883a      	ldrh	r2, [r7, #0]
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	78ba      	ldrb	r2, [r7, #2]
 80018a6:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	785b      	ldrb	r3, [r3, #1]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d004      	beq.n	80018ba <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	b29a      	uxth	r2, r3
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80018ba:	78bb      	ldrb	r3, [r7, #2]
 80018bc:	2b02      	cmp	r3, #2
 80018be:	d102      	bne.n	80018c6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	2200      	movs	r2, #0
 80018c4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d101      	bne.n	80018d4 <HAL_PCD_EP_Open+0xaa>
 80018d0:	2302      	movs	r3, #2
 80018d2:	e00e      	b.n	80018f2 <HAL_PCD_EP_Open+0xc8>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2201      	movs	r2, #1
 80018d8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	68f9      	ldr	r1, [r7, #12]
 80018e2:	4618      	mov	r0, r3
 80018e4:	f001 fb76 	bl	8002fd4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2200      	movs	r2, #0
 80018ec:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80018f0:	7afb      	ldrb	r3, [r7, #11]
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3710      	adds	r7, #16
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}

080018fa <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80018fa:	b580      	push	{r7, lr}
 80018fc:	b084      	sub	sp, #16
 80018fe:	af00      	add	r7, sp, #0
 8001900:	6078      	str	r0, [r7, #4]
 8001902:	460b      	mov	r3, r1
 8001904:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001906:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800190a:	2b00      	cmp	r3, #0
 800190c:	da0f      	bge.n	800192e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800190e:	78fb      	ldrb	r3, [r7, #3]
 8001910:	f003 020f 	and.w	r2, r3, #15
 8001914:	4613      	mov	r3, r2
 8001916:	00db      	lsls	r3, r3, #3
 8001918:	1a9b      	subs	r3, r3, r2
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	3338      	adds	r3, #56	; 0x38
 800191e:	687a      	ldr	r2, [r7, #4]
 8001920:	4413      	add	r3, r2
 8001922:	3304      	adds	r3, #4
 8001924:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	2201      	movs	r2, #1
 800192a:	705a      	strb	r2, [r3, #1]
 800192c:	e00f      	b.n	800194e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800192e:	78fb      	ldrb	r3, [r7, #3]
 8001930:	f003 020f 	and.w	r2, r3, #15
 8001934:	4613      	mov	r3, r2
 8001936:	00db      	lsls	r3, r3, #3
 8001938:	1a9b      	subs	r3, r3, r2
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001940:	687a      	ldr	r2, [r7, #4]
 8001942:	4413      	add	r3, r2
 8001944:	3304      	adds	r3, #4
 8001946:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	2200      	movs	r2, #0
 800194c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800194e:	78fb      	ldrb	r3, [r7, #3]
 8001950:	f003 030f 	and.w	r3, r3, #15
 8001954:	b2da      	uxtb	r2, r3
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001960:	2b01      	cmp	r3, #1
 8001962:	d101      	bne.n	8001968 <HAL_PCD_EP_Close+0x6e>
 8001964:	2302      	movs	r3, #2
 8001966:	e00e      	b.n	8001986 <HAL_PCD_EP_Close+0x8c>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2201      	movs	r2, #1
 800196c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	68f9      	ldr	r1, [r7, #12]
 8001976:	4618      	mov	r0, r3
 8001978:	f001 fbb4 	bl	80030e4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2200      	movs	r2, #0
 8001980:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001984:	2300      	movs	r3, #0
}
 8001986:	4618      	mov	r0, r3
 8001988:	3710      	adds	r7, #16
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}

0800198e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800198e:	b580      	push	{r7, lr}
 8001990:	b086      	sub	sp, #24
 8001992:	af00      	add	r7, sp, #0
 8001994:	60f8      	str	r0, [r7, #12]
 8001996:	607a      	str	r2, [r7, #4]
 8001998:	603b      	str	r3, [r7, #0]
 800199a:	460b      	mov	r3, r1
 800199c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800199e:	7afb      	ldrb	r3, [r7, #11]
 80019a0:	f003 020f 	and.w	r2, r3, #15
 80019a4:	4613      	mov	r3, r2
 80019a6:	00db      	lsls	r3, r3, #3
 80019a8:	1a9b      	subs	r3, r3, r2
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80019b0:	68fa      	ldr	r2, [r7, #12]
 80019b2:	4413      	add	r3, r2
 80019b4:	3304      	adds	r3, #4
 80019b6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	687a      	ldr	r2, [r7, #4]
 80019bc:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	683a      	ldr	r2, [r7, #0]
 80019c2:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	2200      	movs	r2, #0
 80019c8:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	2200      	movs	r2, #0
 80019ce:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80019d0:	7afb      	ldrb	r3, [r7, #11]
 80019d2:	f003 030f 	and.w	r3, r3, #15
 80019d6:	b2da      	uxtb	r2, r3
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	691b      	ldr	r3, [r3, #16]
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d102      	bne.n	80019ea <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80019e4:	687a      	ldr	r2, [r7, #4]
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80019ea:	7afb      	ldrb	r3, [r7, #11]
 80019ec:	f003 030f 	and.w	r3, r3, #15
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d109      	bne.n	8001a08 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	6818      	ldr	r0, [r3, #0]
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	691b      	ldr	r3, [r3, #16]
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	461a      	mov	r2, r3
 8001a00:	6979      	ldr	r1, [r7, #20]
 8001a02:	f001 fe8f 	bl	8003724 <USB_EP0StartXfer>
 8001a06:	e008      	b.n	8001a1a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	6818      	ldr	r0, [r3, #0]
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	691b      	ldr	r3, [r3, #16]
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	461a      	mov	r2, r3
 8001a14:	6979      	ldr	r1, [r7, #20]
 8001a16:	f001 fc41 	bl	800329c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001a1a:	2300      	movs	r3, #0
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3718      	adds	r7, #24
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}

08001a24 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	460b      	mov	r3, r1
 8001a2e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001a30:	78fb      	ldrb	r3, [r7, #3]
 8001a32:	f003 020f 	and.w	r2, r3, #15
 8001a36:	6879      	ldr	r1, [r7, #4]
 8001a38:	4613      	mov	r3, r2
 8001a3a:	00db      	lsls	r3, r3, #3
 8001a3c:	1a9b      	subs	r3, r3, r2
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	440b      	add	r3, r1
 8001a42:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001a46:	681b      	ldr	r3, [r3, #0]
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	370c      	adds	r7, #12
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr

08001a54 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b086      	sub	sp, #24
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	60f8      	str	r0, [r7, #12]
 8001a5c:	607a      	str	r2, [r7, #4]
 8001a5e:	603b      	str	r3, [r7, #0]
 8001a60:	460b      	mov	r3, r1
 8001a62:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a64:	7afb      	ldrb	r3, [r7, #11]
 8001a66:	f003 020f 	and.w	r2, r3, #15
 8001a6a:	4613      	mov	r3, r2
 8001a6c:	00db      	lsls	r3, r3, #3
 8001a6e:	1a9b      	subs	r3, r3, r2
 8001a70:	009b      	lsls	r3, r3, #2
 8001a72:	3338      	adds	r3, #56	; 0x38
 8001a74:	68fa      	ldr	r2, [r7, #12]
 8001a76:	4413      	add	r3, r2
 8001a78:	3304      	adds	r3, #4
 8001a7a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	687a      	ldr	r2, [r7, #4]
 8001a80:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	683a      	ldr	r2, [r7, #0]
 8001a86:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	2201      	movs	r2, #1
 8001a92:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a94:	7afb      	ldrb	r3, [r7, #11]
 8001a96:	f003 030f 	and.w	r3, r3, #15
 8001a9a:	b2da      	uxtb	r2, r3
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	691b      	ldr	r3, [r3, #16]
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d102      	bne.n	8001aae <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001aa8:	687a      	ldr	r2, [r7, #4]
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001aae:	7afb      	ldrb	r3, [r7, #11]
 8001ab0:	f003 030f 	and.w	r3, r3, #15
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d109      	bne.n	8001acc <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	6818      	ldr	r0, [r3, #0]
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	691b      	ldr	r3, [r3, #16]
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	6979      	ldr	r1, [r7, #20]
 8001ac6:	f001 fe2d 	bl	8003724 <USB_EP0StartXfer>
 8001aca:	e008      	b.n	8001ade <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	6818      	ldr	r0, [r3, #0]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	691b      	ldr	r3, [r3, #16]
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	6979      	ldr	r1, [r7, #20]
 8001ada:	f001 fbdf 	bl	800329c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001ade:	2300      	movs	r3, #0
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3718      	adds	r7, #24
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	460b      	mov	r3, r1
 8001af2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001af4:	78fb      	ldrb	r3, [r7, #3]
 8001af6:	f003 020f 	and.w	r2, r3, #15
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d901      	bls.n	8001b06 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e050      	b.n	8001ba8 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001b06:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	da0f      	bge.n	8001b2e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b0e:	78fb      	ldrb	r3, [r7, #3]
 8001b10:	f003 020f 	and.w	r2, r3, #15
 8001b14:	4613      	mov	r3, r2
 8001b16:	00db      	lsls	r3, r3, #3
 8001b18:	1a9b      	subs	r3, r3, r2
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	3338      	adds	r3, #56	; 0x38
 8001b1e:	687a      	ldr	r2, [r7, #4]
 8001b20:	4413      	add	r3, r2
 8001b22:	3304      	adds	r3, #4
 8001b24:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	2201      	movs	r2, #1
 8001b2a:	705a      	strb	r2, [r3, #1]
 8001b2c:	e00d      	b.n	8001b4a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001b2e:	78fa      	ldrb	r2, [r7, #3]
 8001b30:	4613      	mov	r3, r2
 8001b32:	00db      	lsls	r3, r3, #3
 8001b34:	1a9b      	subs	r3, r3, r2
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001b3c:	687a      	ldr	r2, [r7, #4]
 8001b3e:	4413      	add	r3, r2
 8001b40:	3304      	adds	r3, #4
 8001b42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	2200      	movs	r2, #0
 8001b48:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b50:	78fb      	ldrb	r3, [r7, #3]
 8001b52:	f003 030f 	and.w	r3, r3, #15
 8001b56:	b2da      	uxtb	r2, r3
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d101      	bne.n	8001b6a <HAL_PCD_EP_SetStall+0x82>
 8001b66:	2302      	movs	r3, #2
 8001b68:	e01e      	b.n	8001ba8 <HAL_PCD_EP_SetStall+0xc0>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	68f9      	ldr	r1, [r7, #12]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f001 ffbc 	bl	8003af6 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001b7e:	78fb      	ldrb	r3, [r7, #3]
 8001b80:	f003 030f 	and.w	r3, r3, #15
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d10a      	bne.n	8001b9e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6818      	ldr	r0, [r3, #0]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	691b      	ldr	r3, [r3, #16]
 8001b90:	b2d9      	uxtb	r1, r3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001b98:	461a      	mov	r2, r3
 8001b9a:	f002 f9ad 	bl	8003ef8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001ba6:	2300      	movs	r3, #0
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3710      	adds	r7, #16
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	460b      	mov	r3, r1
 8001bba:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001bbc:	78fb      	ldrb	r3, [r7, #3]
 8001bbe:	f003 020f 	and.w	r2, r3, #15
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	d901      	bls.n	8001bce <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e042      	b.n	8001c54 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001bce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	da0f      	bge.n	8001bf6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001bd6:	78fb      	ldrb	r3, [r7, #3]
 8001bd8:	f003 020f 	and.w	r2, r3, #15
 8001bdc:	4613      	mov	r3, r2
 8001bde:	00db      	lsls	r3, r3, #3
 8001be0:	1a9b      	subs	r3, r3, r2
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	3338      	adds	r3, #56	; 0x38
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	4413      	add	r3, r2
 8001bea:	3304      	adds	r3, #4
 8001bec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	705a      	strb	r2, [r3, #1]
 8001bf4:	e00f      	b.n	8001c16 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001bf6:	78fb      	ldrb	r3, [r7, #3]
 8001bf8:	f003 020f 	and.w	r2, r3, #15
 8001bfc:	4613      	mov	r3, r2
 8001bfe:	00db      	lsls	r3, r3, #3
 8001c00:	1a9b      	subs	r3, r3, r2
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001c08:	687a      	ldr	r2, [r7, #4]
 8001c0a:	4413      	add	r3, r2
 8001c0c:	3304      	adds	r3, #4
 8001c0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	2200      	movs	r2, #0
 8001c14:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c1c:	78fb      	ldrb	r3, [r7, #3]
 8001c1e:	f003 030f 	and.w	r3, r3, #15
 8001c22:	b2da      	uxtb	r2, r3
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d101      	bne.n	8001c36 <HAL_PCD_EP_ClrStall+0x86>
 8001c32:	2302      	movs	r3, #2
 8001c34:	e00e      	b.n	8001c54 <HAL_PCD_EP_ClrStall+0xa4>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2201      	movs	r2, #1
 8001c3a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	68f9      	ldr	r1, [r7, #12]
 8001c44:	4618      	mov	r0, r3
 8001c46:	f001 ffc4 	bl	8003bd2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001c52:	2300      	movs	r3, #0
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3710      	adds	r7, #16
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b08a      	sub	sp, #40	; 0x28
 8001c60:	af02      	add	r7, sp, #8
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001c70:	683a      	ldr	r2, [r7, #0]
 8001c72:	4613      	mov	r3, r2
 8001c74:	00db      	lsls	r3, r3, #3
 8001c76:	1a9b      	subs	r3, r3, r2
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	3338      	adds	r3, #56	; 0x38
 8001c7c:	687a      	ldr	r2, [r7, #4]
 8001c7e:	4413      	add	r3, r2
 8001c80:	3304      	adds	r3, #4
 8001c82:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	699a      	ldr	r2, [r3, #24]
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	695b      	ldr	r3, [r3, #20]
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d901      	bls.n	8001c94 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	e06c      	b.n	8001d6e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	695a      	ldr	r2, [r3, #20]
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	699b      	ldr	r3, [r3, #24]
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	69fa      	ldr	r2, [r7, #28]
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d902      	bls.n	8001cb0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	3303      	adds	r3, #3
 8001cb4:	089b      	lsrs	r3, r3, #2
 8001cb6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001cb8:	e02b      	b.n	8001d12 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	695a      	ldr	r2, [r3, #20]
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	699b      	ldr	r3, [r3, #24]
 8001cc2:	1ad3      	subs	r3, r2, r3
 8001cc4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	69fa      	ldr	r2, [r7, #28]
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d902      	bls.n	8001cd6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	3303      	adds	r3, #3
 8001cda:	089b      	lsrs	r3, r3, #2
 8001cdc:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	68d9      	ldr	r1, [r3, #12]
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	b2da      	uxtb	r2, r3
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	9300      	str	r3, [sp, #0]
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	6978      	ldr	r0, [r7, #20]
 8001cf6:	f001 fe68 	bl	80039ca <USB_WritePacket>

    ep->xfer_buff  += len;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	68da      	ldr	r2, [r3, #12]
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	441a      	add	r2, r3
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	699a      	ldr	r2, [r3, #24]
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	441a      	add	r2, r3
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	015a      	lsls	r2, r3, #5
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	4413      	add	r3, r2
 8001d1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d1e:	699b      	ldr	r3, [r3, #24]
 8001d20:	b29b      	uxth	r3, r3
 8001d22:	69ba      	ldr	r2, [r7, #24]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d809      	bhi.n	8001d3c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	699a      	ldr	r2, [r3, #24]
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d203      	bcs.n	8001d3c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	695b      	ldr	r3, [r3, #20]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d1be      	bne.n	8001cba <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	695a      	ldr	r2, [r3, #20]
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	699b      	ldr	r3, [r3, #24]
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d811      	bhi.n	8001d6c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	f003 030f 	and.w	r3, r3, #15
 8001d4e:	2201      	movs	r2, #1
 8001d50:	fa02 f303 	lsl.w	r3, r2, r3
 8001d54:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	43db      	mvns	r3, r3
 8001d62:	6939      	ldr	r1, [r7, #16]
 8001d64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001d68:	4013      	ands	r3, r2
 8001d6a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8001d6c:	2300      	movs	r3, #0
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3720      	adds	r7, #32
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
	...

08001d78 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b086      	sub	sp, #24
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	333c      	adds	r3, #60	; 0x3c
 8001d90:	3304      	adds	r3, #4
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	015a      	lsls	r2, r3, #5
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	4413      	add	r3, r2
 8001d9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	691b      	ldr	r3, [r3, #16]
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	f040 80a0 	bne.w	8001ef0 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	f003 0308 	and.w	r3, r3, #8
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d015      	beq.n	8001de6 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	4a72      	ldr	r2, [pc, #456]	; (8001f88 <PCD_EP_OutXfrComplete_int+0x210>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	f240 80dd 	bls.w	8001f7e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	f000 80d7 	beq.w	8001f7e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	015a      	lsls	r2, r3, #5
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	4413      	add	r3, r2
 8001dd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ddc:	461a      	mov	r2, r3
 8001dde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001de2:	6093      	str	r3, [r2, #8]
 8001de4:	e0cb      	b.n	8001f7e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	f003 0320 	and.w	r3, r3, #32
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d009      	beq.n	8001e04 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	015a      	lsls	r2, r3, #5
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	4413      	add	r3, r2
 8001df8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	2320      	movs	r3, #32
 8001e00:	6093      	str	r3, [r2, #8]
 8001e02:	e0bc      	b.n	8001f7e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	f040 80b7 	bne.w	8001f7e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	4a5d      	ldr	r2, [pc, #372]	; (8001f88 <PCD_EP_OutXfrComplete_int+0x210>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d90f      	bls.n	8001e38 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d00a      	beq.n	8001e38 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	015a      	lsls	r2, r3, #5
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	4413      	add	r3, r2
 8001e2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e2e:	461a      	mov	r2, r3
 8001e30:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e34:	6093      	str	r3, [r2, #8]
 8001e36:	e0a2      	b.n	8001f7e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8001e38:	6879      	ldr	r1, [r7, #4]
 8001e3a:	683a      	ldr	r2, [r7, #0]
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	00db      	lsls	r3, r3, #3
 8001e40:	1a9b      	subs	r3, r3, r2
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	440b      	add	r3, r1
 8001e46:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001e4a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	0159      	lsls	r1, r3, #5
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	440b      	add	r3, r1
 8001e54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e58:	691b      	ldr	r3, [r3, #16]
 8001e5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8001e5e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	683a      	ldr	r2, [r7, #0]
 8001e64:	4613      	mov	r3, r2
 8001e66:	00db      	lsls	r3, r3, #3
 8001e68:	1a9b      	subs	r3, r3, r2
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	4403      	add	r3, r0
 8001e6e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001e72:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8001e74:	6879      	ldr	r1, [r7, #4]
 8001e76:	683a      	ldr	r2, [r7, #0]
 8001e78:	4613      	mov	r3, r2
 8001e7a:	00db      	lsls	r3, r3, #3
 8001e7c:	1a9b      	subs	r3, r3, r2
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	440b      	add	r3, r1
 8001e82:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001e86:	6819      	ldr	r1, [r3, #0]
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	683a      	ldr	r2, [r7, #0]
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	00db      	lsls	r3, r3, #3
 8001e90:	1a9b      	subs	r3, r3, r2
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	4403      	add	r3, r0
 8001e96:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4419      	add	r1, r3
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	683a      	ldr	r2, [r7, #0]
 8001ea2:	4613      	mov	r3, r2
 8001ea4:	00db      	lsls	r3, r3, #3
 8001ea6:	1a9b      	subs	r3, r3, r2
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	4403      	add	r3, r0
 8001eac:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001eb0:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d114      	bne.n	8001ee2 <PCD_EP_OutXfrComplete_int+0x16a>
 8001eb8:	6879      	ldr	r1, [r7, #4]
 8001eba:	683a      	ldr	r2, [r7, #0]
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	00db      	lsls	r3, r3, #3
 8001ec0:	1a9b      	subs	r3, r3, r2
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	440b      	add	r3, r1
 8001ec6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d108      	bne.n	8001ee2 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6818      	ldr	r0, [r3, #0]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001eda:	461a      	mov	r2, r3
 8001edc:	2101      	movs	r1, #1
 8001ede:	f002 f80b 	bl	8003ef8 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f003 fda7 	bl	8005a3c <HAL_PCD_DataOutStageCallback>
 8001eee:	e046      	b.n	8001f7e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	4a26      	ldr	r2, [pc, #152]	; (8001f8c <PCD_EP_OutXfrComplete_int+0x214>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d124      	bne.n	8001f42 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d00a      	beq.n	8001f18 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	015a      	lsls	r2, r3, #5
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	4413      	add	r3, r2
 8001f0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f0e:	461a      	mov	r2, r3
 8001f10:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f14:	6093      	str	r3, [r2, #8]
 8001f16:	e032      	b.n	8001f7e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	f003 0320 	and.w	r3, r3, #32
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d008      	beq.n	8001f34 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	015a      	lsls	r2, r3, #5
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	4413      	add	r3, r2
 8001f2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f2e:	461a      	mov	r2, r3
 8001f30:	2320      	movs	r3, #32
 8001f32:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	4619      	mov	r1, r3
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f003 fd7e 	bl	8005a3c <HAL_PCD_DataOutStageCallback>
 8001f40:	e01d      	b.n	8001f7e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d114      	bne.n	8001f72 <PCD_EP_OutXfrComplete_int+0x1fa>
 8001f48:	6879      	ldr	r1, [r7, #4]
 8001f4a:	683a      	ldr	r2, [r7, #0]
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	00db      	lsls	r3, r3, #3
 8001f50:	1a9b      	subs	r3, r3, r2
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	440b      	add	r3, r1
 8001f56:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d108      	bne.n	8001f72 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6818      	ldr	r0, [r3, #0]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	2100      	movs	r1, #0
 8001f6e:	f001 ffc3 	bl	8003ef8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	4619      	mov	r1, r3
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	f003 fd5f 	bl	8005a3c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8001f7e:	2300      	movs	r3, #0
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3718      	adds	r7, #24
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	4f54300a 	.word	0x4f54300a
 8001f8c:	4f54310a 	.word	0x4f54310a

08001f90 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b086      	sub	sp, #24
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	333c      	adds	r3, #60	; 0x3c
 8001fa8:	3304      	adds	r3, #4
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	015a      	lsls	r2, r3, #5
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	4413      	add	r3, r2
 8001fb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	4a15      	ldr	r2, [pc, #84]	; (8002018 <PCD_EP_OutSetupPacket_int+0x88>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d90e      	bls.n	8001fe4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d009      	beq.n	8001fe4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	015a      	lsls	r2, r3, #5
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	4413      	add	r3, r2
 8001fd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fdc:	461a      	mov	r2, r3
 8001fde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001fe2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f003 fd17 	bl	8005a18 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	4a0a      	ldr	r2, [pc, #40]	; (8002018 <PCD_EP_OutSetupPacket_int+0x88>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d90c      	bls.n	800200c <PCD_EP_OutSetupPacket_int+0x7c>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	691b      	ldr	r3, [r3, #16]
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d108      	bne.n	800200c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6818      	ldr	r0, [r3, #0]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002004:	461a      	mov	r2, r3
 8002006:	2101      	movs	r1, #1
 8002008:	f001 ff76 	bl	8003ef8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800200c:	2300      	movs	r3, #0
}
 800200e:	4618      	mov	r0, r3
 8002010:	3718      	adds	r7, #24
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	4f54300a 	.word	0x4f54300a

0800201c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800201c:	b480      	push	{r7}
 800201e:	b085      	sub	sp, #20
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	460b      	mov	r3, r1
 8002026:	70fb      	strb	r3, [r7, #3]
 8002028:	4613      	mov	r3, r2
 800202a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002032:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002034:	78fb      	ldrb	r3, [r7, #3]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d107      	bne.n	800204a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800203a:	883b      	ldrh	r3, [r7, #0]
 800203c:	0419      	lsls	r1, r3, #16
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	68ba      	ldr	r2, [r7, #8]
 8002044:	430a      	orrs	r2, r1
 8002046:	629a      	str	r2, [r3, #40]	; 0x28
 8002048:	e028      	b.n	800209c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002050:	0c1b      	lsrs	r3, r3, #16
 8002052:	68ba      	ldr	r2, [r7, #8]
 8002054:	4413      	add	r3, r2
 8002056:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002058:	2300      	movs	r3, #0
 800205a:	73fb      	strb	r3, [r7, #15]
 800205c:	e00d      	b.n	800207a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	7bfb      	ldrb	r3, [r7, #15]
 8002064:	3340      	adds	r3, #64	; 0x40
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	4413      	add	r3, r2
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	0c1b      	lsrs	r3, r3, #16
 800206e:	68ba      	ldr	r2, [r7, #8]
 8002070:	4413      	add	r3, r2
 8002072:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002074:	7bfb      	ldrb	r3, [r7, #15]
 8002076:	3301      	adds	r3, #1
 8002078:	73fb      	strb	r3, [r7, #15]
 800207a:	7bfa      	ldrb	r2, [r7, #15]
 800207c:	78fb      	ldrb	r3, [r7, #3]
 800207e:	3b01      	subs	r3, #1
 8002080:	429a      	cmp	r2, r3
 8002082:	d3ec      	bcc.n	800205e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002084:	883b      	ldrh	r3, [r7, #0]
 8002086:	0418      	lsls	r0, r3, #16
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6819      	ldr	r1, [r3, #0]
 800208c:	78fb      	ldrb	r3, [r7, #3]
 800208e:	3b01      	subs	r3, #1
 8002090:	68ba      	ldr	r2, [r7, #8]
 8002092:	4302      	orrs	r2, r0
 8002094:	3340      	adds	r3, #64	; 0x40
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	440b      	add	r3, r1
 800209a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800209c:	2300      	movs	r3, #0
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3714      	adds	r7, #20
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr

080020aa <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80020aa:	b480      	push	{r7}
 80020ac:	b083      	sub	sp, #12
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	6078      	str	r0, [r7, #4]
 80020b2:	460b      	mov	r3, r1
 80020b4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	887a      	ldrh	r2, [r7, #2]
 80020bc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80020be:	2300      	movs	r3, #0
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	370c      	adds	r7, #12
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr

080020cc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	460b      	mov	r3, r1
 80020d6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80020d8:	bf00      	nop
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b086      	sub	sp, #24
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d101      	bne.n	80020f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e264      	b.n	80025c0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 0301 	and.w	r3, r3, #1
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d075      	beq.n	80021ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002102:	4ba3      	ldr	r3, [pc, #652]	; (8002390 <HAL_RCC_OscConfig+0x2ac>)
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	f003 030c 	and.w	r3, r3, #12
 800210a:	2b04      	cmp	r3, #4
 800210c:	d00c      	beq.n	8002128 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800210e:	4ba0      	ldr	r3, [pc, #640]	; (8002390 <HAL_RCC_OscConfig+0x2ac>)
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002116:	2b08      	cmp	r3, #8
 8002118:	d112      	bne.n	8002140 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800211a:	4b9d      	ldr	r3, [pc, #628]	; (8002390 <HAL_RCC_OscConfig+0x2ac>)
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002122:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002126:	d10b      	bne.n	8002140 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002128:	4b99      	ldr	r3, [pc, #612]	; (8002390 <HAL_RCC_OscConfig+0x2ac>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002130:	2b00      	cmp	r3, #0
 8002132:	d05b      	beq.n	80021ec <HAL_RCC_OscConfig+0x108>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d157      	bne.n	80021ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e23f      	b.n	80025c0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002148:	d106      	bne.n	8002158 <HAL_RCC_OscConfig+0x74>
 800214a:	4b91      	ldr	r3, [pc, #580]	; (8002390 <HAL_RCC_OscConfig+0x2ac>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a90      	ldr	r2, [pc, #576]	; (8002390 <HAL_RCC_OscConfig+0x2ac>)
 8002150:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002154:	6013      	str	r3, [r2, #0]
 8002156:	e01d      	b.n	8002194 <HAL_RCC_OscConfig+0xb0>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002160:	d10c      	bne.n	800217c <HAL_RCC_OscConfig+0x98>
 8002162:	4b8b      	ldr	r3, [pc, #556]	; (8002390 <HAL_RCC_OscConfig+0x2ac>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a8a      	ldr	r2, [pc, #552]	; (8002390 <HAL_RCC_OscConfig+0x2ac>)
 8002168:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800216c:	6013      	str	r3, [r2, #0]
 800216e:	4b88      	ldr	r3, [pc, #544]	; (8002390 <HAL_RCC_OscConfig+0x2ac>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a87      	ldr	r2, [pc, #540]	; (8002390 <HAL_RCC_OscConfig+0x2ac>)
 8002174:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002178:	6013      	str	r3, [r2, #0]
 800217a:	e00b      	b.n	8002194 <HAL_RCC_OscConfig+0xb0>
 800217c:	4b84      	ldr	r3, [pc, #528]	; (8002390 <HAL_RCC_OscConfig+0x2ac>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a83      	ldr	r2, [pc, #524]	; (8002390 <HAL_RCC_OscConfig+0x2ac>)
 8002182:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002186:	6013      	str	r3, [r2, #0]
 8002188:	4b81      	ldr	r3, [pc, #516]	; (8002390 <HAL_RCC_OscConfig+0x2ac>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a80      	ldr	r2, [pc, #512]	; (8002390 <HAL_RCC_OscConfig+0x2ac>)
 800218e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002192:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d013      	beq.n	80021c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800219c:	f7fe fb58 	bl	8000850 <HAL_GetTick>
 80021a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021a2:	e008      	b.n	80021b6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021a4:	f7fe fb54 	bl	8000850 <HAL_GetTick>
 80021a8:	4602      	mov	r2, r0
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	2b64      	cmp	r3, #100	; 0x64
 80021b0:	d901      	bls.n	80021b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80021b2:	2303      	movs	r3, #3
 80021b4:	e204      	b.n	80025c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021b6:	4b76      	ldr	r3, [pc, #472]	; (8002390 <HAL_RCC_OscConfig+0x2ac>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d0f0      	beq.n	80021a4 <HAL_RCC_OscConfig+0xc0>
 80021c2:	e014      	b.n	80021ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c4:	f7fe fb44 	bl	8000850 <HAL_GetTick>
 80021c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021ca:	e008      	b.n	80021de <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021cc:	f7fe fb40 	bl	8000850 <HAL_GetTick>
 80021d0:	4602      	mov	r2, r0
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	2b64      	cmp	r3, #100	; 0x64
 80021d8:	d901      	bls.n	80021de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80021da:	2303      	movs	r3, #3
 80021dc:	e1f0      	b.n	80025c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021de:	4b6c      	ldr	r3, [pc, #432]	; (8002390 <HAL_RCC_OscConfig+0x2ac>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d1f0      	bne.n	80021cc <HAL_RCC_OscConfig+0xe8>
 80021ea:	e000      	b.n	80021ee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0302 	and.w	r3, r3, #2
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d063      	beq.n	80022c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80021fa:	4b65      	ldr	r3, [pc, #404]	; (8002390 <HAL_RCC_OscConfig+0x2ac>)
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	f003 030c 	and.w	r3, r3, #12
 8002202:	2b00      	cmp	r3, #0
 8002204:	d00b      	beq.n	800221e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002206:	4b62      	ldr	r3, [pc, #392]	; (8002390 <HAL_RCC_OscConfig+0x2ac>)
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800220e:	2b08      	cmp	r3, #8
 8002210:	d11c      	bne.n	800224c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002212:	4b5f      	ldr	r3, [pc, #380]	; (8002390 <HAL_RCC_OscConfig+0x2ac>)
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d116      	bne.n	800224c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800221e:	4b5c      	ldr	r3, [pc, #368]	; (8002390 <HAL_RCC_OscConfig+0x2ac>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0302 	and.w	r3, r3, #2
 8002226:	2b00      	cmp	r3, #0
 8002228:	d005      	beq.n	8002236 <HAL_RCC_OscConfig+0x152>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	68db      	ldr	r3, [r3, #12]
 800222e:	2b01      	cmp	r3, #1
 8002230:	d001      	beq.n	8002236 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e1c4      	b.n	80025c0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002236:	4b56      	ldr	r3, [pc, #344]	; (8002390 <HAL_RCC_OscConfig+0x2ac>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	691b      	ldr	r3, [r3, #16]
 8002242:	00db      	lsls	r3, r3, #3
 8002244:	4952      	ldr	r1, [pc, #328]	; (8002390 <HAL_RCC_OscConfig+0x2ac>)
 8002246:	4313      	orrs	r3, r2
 8002248:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800224a:	e03a      	b.n	80022c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d020      	beq.n	8002296 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002254:	4b4f      	ldr	r3, [pc, #316]	; (8002394 <HAL_RCC_OscConfig+0x2b0>)
 8002256:	2201      	movs	r2, #1
 8002258:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800225a:	f7fe faf9 	bl	8000850 <HAL_GetTick>
 800225e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002260:	e008      	b.n	8002274 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002262:	f7fe faf5 	bl	8000850 <HAL_GetTick>
 8002266:	4602      	mov	r2, r0
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	2b02      	cmp	r3, #2
 800226e:	d901      	bls.n	8002274 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002270:	2303      	movs	r3, #3
 8002272:	e1a5      	b.n	80025c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002274:	4b46      	ldr	r3, [pc, #280]	; (8002390 <HAL_RCC_OscConfig+0x2ac>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 0302 	and.w	r3, r3, #2
 800227c:	2b00      	cmp	r3, #0
 800227e:	d0f0      	beq.n	8002262 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002280:	4b43      	ldr	r3, [pc, #268]	; (8002390 <HAL_RCC_OscConfig+0x2ac>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	691b      	ldr	r3, [r3, #16]
 800228c:	00db      	lsls	r3, r3, #3
 800228e:	4940      	ldr	r1, [pc, #256]	; (8002390 <HAL_RCC_OscConfig+0x2ac>)
 8002290:	4313      	orrs	r3, r2
 8002292:	600b      	str	r3, [r1, #0]
 8002294:	e015      	b.n	80022c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002296:	4b3f      	ldr	r3, [pc, #252]	; (8002394 <HAL_RCC_OscConfig+0x2b0>)
 8002298:	2200      	movs	r2, #0
 800229a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800229c:	f7fe fad8 	bl	8000850 <HAL_GetTick>
 80022a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022a2:	e008      	b.n	80022b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022a4:	f7fe fad4 	bl	8000850 <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d901      	bls.n	80022b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e184      	b.n	80025c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022b6:	4b36      	ldr	r3, [pc, #216]	; (8002390 <HAL_RCC_OscConfig+0x2ac>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0302 	and.w	r3, r3, #2
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d1f0      	bne.n	80022a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0308 	and.w	r3, r3, #8
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d030      	beq.n	8002330 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	695b      	ldr	r3, [r3, #20]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d016      	beq.n	8002304 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022d6:	4b30      	ldr	r3, [pc, #192]	; (8002398 <HAL_RCC_OscConfig+0x2b4>)
 80022d8:	2201      	movs	r2, #1
 80022da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022dc:	f7fe fab8 	bl	8000850 <HAL_GetTick>
 80022e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022e2:	e008      	b.n	80022f6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022e4:	f7fe fab4 	bl	8000850 <HAL_GetTick>
 80022e8:	4602      	mov	r2, r0
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d901      	bls.n	80022f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	e164      	b.n	80025c0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022f6:	4b26      	ldr	r3, [pc, #152]	; (8002390 <HAL_RCC_OscConfig+0x2ac>)
 80022f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022fa:	f003 0302 	and.w	r3, r3, #2
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d0f0      	beq.n	80022e4 <HAL_RCC_OscConfig+0x200>
 8002302:	e015      	b.n	8002330 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002304:	4b24      	ldr	r3, [pc, #144]	; (8002398 <HAL_RCC_OscConfig+0x2b4>)
 8002306:	2200      	movs	r2, #0
 8002308:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800230a:	f7fe faa1 	bl	8000850 <HAL_GetTick>
 800230e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002310:	e008      	b.n	8002324 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002312:	f7fe fa9d 	bl	8000850 <HAL_GetTick>
 8002316:	4602      	mov	r2, r0
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	2b02      	cmp	r3, #2
 800231e:	d901      	bls.n	8002324 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002320:	2303      	movs	r3, #3
 8002322:	e14d      	b.n	80025c0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002324:	4b1a      	ldr	r3, [pc, #104]	; (8002390 <HAL_RCC_OscConfig+0x2ac>)
 8002326:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002328:	f003 0302 	and.w	r3, r3, #2
 800232c:	2b00      	cmp	r3, #0
 800232e:	d1f0      	bne.n	8002312 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0304 	and.w	r3, r3, #4
 8002338:	2b00      	cmp	r3, #0
 800233a:	f000 80a0 	beq.w	800247e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800233e:	2300      	movs	r3, #0
 8002340:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002342:	4b13      	ldr	r3, [pc, #76]	; (8002390 <HAL_RCC_OscConfig+0x2ac>)
 8002344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002346:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d10f      	bne.n	800236e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800234e:	2300      	movs	r3, #0
 8002350:	60bb      	str	r3, [r7, #8]
 8002352:	4b0f      	ldr	r3, [pc, #60]	; (8002390 <HAL_RCC_OscConfig+0x2ac>)
 8002354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002356:	4a0e      	ldr	r2, [pc, #56]	; (8002390 <HAL_RCC_OscConfig+0x2ac>)
 8002358:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800235c:	6413      	str	r3, [r2, #64]	; 0x40
 800235e:	4b0c      	ldr	r3, [pc, #48]	; (8002390 <HAL_RCC_OscConfig+0x2ac>)
 8002360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002362:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002366:	60bb      	str	r3, [r7, #8]
 8002368:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800236a:	2301      	movs	r3, #1
 800236c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800236e:	4b0b      	ldr	r3, [pc, #44]	; (800239c <HAL_RCC_OscConfig+0x2b8>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002376:	2b00      	cmp	r3, #0
 8002378:	d121      	bne.n	80023be <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800237a:	4b08      	ldr	r3, [pc, #32]	; (800239c <HAL_RCC_OscConfig+0x2b8>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a07      	ldr	r2, [pc, #28]	; (800239c <HAL_RCC_OscConfig+0x2b8>)
 8002380:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002384:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002386:	f7fe fa63 	bl	8000850 <HAL_GetTick>
 800238a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800238c:	e011      	b.n	80023b2 <HAL_RCC_OscConfig+0x2ce>
 800238e:	bf00      	nop
 8002390:	40023800 	.word	0x40023800
 8002394:	42470000 	.word	0x42470000
 8002398:	42470e80 	.word	0x42470e80
 800239c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023a0:	f7fe fa56 	bl	8000850 <HAL_GetTick>
 80023a4:	4602      	mov	r2, r0
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d901      	bls.n	80023b2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	e106      	b.n	80025c0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023b2:	4b85      	ldr	r3, [pc, #532]	; (80025c8 <HAL_RCC_OscConfig+0x4e4>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d0f0      	beq.n	80023a0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d106      	bne.n	80023d4 <HAL_RCC_OscConfig+0x2f0>
 80023c6:	4b81      	ldr	r3, [pc, #516]	; (80025cc <HAL_RCC_OscConfig+0x4e8>)
 80023c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023ca:	4a80      	ldr	r2, [pc, #512]	; (80025cc <HAL_RCC_OscConfig+0x4e8>)
 80023cc:	f043 0301 	orr.w	r3, r3, #1
 80023d0:	6713      	str	r3, [r2, #112]	; 0x70
 80023d2:	e01c      	b.n	800240e <HAL_RCC_OscConfig+0x32a>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	2b05      	cmp	r3, #5
 80023da:	d10c      	bne.n	80023f6 <HAL_RCC_OscConfig+0x312>
 80023dc:	4b7b      	ldr	r3, [pc, #492]	; (80025cc <HAL_RCC_OscConfig+0x4e8>)
 80023de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023e0:	4a7a      	ldr	r2, [pc, #488]	; (80025cc <HAL_RCC_OscConfig+0x4e8>)
 80023e2:	f043 0304 	orr.w	r3, r3, #4
 80023e6:	6713      	str	r3, [r2, #112]	; 0x70
 80023e8:	4b78      	ldr	r3, [pc, #480]	; (80025cc <HAL_RCC_OscConfig+0x4e8>)
 80023ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023ec:	4a77      	ldr	r2, [pc, #476]	; (80025cc <HAL_RCC_OscConfig+0x4e8>)
 80023ee:	f043 0301 	orr.w	r3, r3, #1
 80023f2:	6713      	str	r3, [r2, #112]	; 0x70
 80023f4:	e00b      	b.n	800240e <HAL_RCC_OscConfig+0x32a>
 80023f6:	4b75      	ldr	r3, [pc, #468]	; (80025cc <HAL_RCC_OscConfig+0x4e8>)
 80023f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023fa:	4a74      	ldr	r2, [pc, #464]	; (80025cc <HAL_RCC_OscConfig+0x4e8>)
 80023fc:	f023 0301 	bic.w	r3, r3, #1
 8002400:	6713      	str	r3, [r2, #112]	; 0x70
 8002402:	4b72      	ldr	r3, [pc, #456]	; (80025cc <HAL_RCC_OscConfig+0x4e8>)
 8002404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002406:	4a71      	ldr	r2, [pc, #452]	; (80025cc <HAL_RCC_OscConfig+0x4e8>)
 8002408:	f023 0304 	bic.w	r3, r3, #4
 800240c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d015      	beq.n	8002442 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002416:	f7fe fa1b 	bl	8000850 <HAL_GetTick>
 800241a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800241c:	e00a      	b.n	8002434 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800241e:	f7fe fa17 	bl	8000850 <HAL_GetTick>
 8002422:	4602      	mov	r2, r0
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	1ad3      	subs	r3, r2, r3
 8002428:	f241 3288 	movw	r2, #5000	; 0x1388
 800242c:	4293      	cmp	r3, r2
 800242e:	d901      	bls.n	8002434 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002430:	2303      	movs	r3, #3
 8002432:	e0c5      	b.n	80025c0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002434:	4b65      	ldr	r3, [pc, #404]	; (80025cc <HAL_RCC_OscConfig+0x4e8>)
 8002436:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002438:	f003 0302 	and.w	r3, r3, #2
 800243c:	2b00      	cmp	r3, #0
 800243e:	d0ee      	beq.n	800241e <HAL_RCC_OscConfig+0x33a>
 8002440:	e014      	b.n	800246c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002442:	f7fe fa05 	bl	8000850 <HAL_GetTick>
 8002446:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002448:	e00a      	b.n	8002460 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800244a:	f7fe fa01 	bl	8000850 <HAL_GetTick>
 800244e:	4602      	mov	r2, r0
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	f241 3288 	movw	r2, #5000	; 0x1388
 8002458:	4293      	cmp	r3, r2
 800245a:	d901      	bls.n	8002460 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800245c:	2303      	movs	r3, #3
 800245e:	e0af      	b.n	80025c0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002460:	4b5a      	ldr	r3, [pc, #360]	; (80025cc <HAL_RCC_OscConfig+0x4e8>)
 8002462:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002464:	f003 0302 	and.w	r3, r3, #2
 8002468:	2b00      	cmp	r3, #0
 800246a:	d1ee      	bne.n	800244a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800246c:	7dfb      	ldrb	r3, [r7, #23]
 800246e:	2b01      	cmp	r3, #1
 8002470:	d105      	bne.n	800247e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002472:	4b56      	ldr	r3, [pc, #344]	; (80025cc <HAL_RCC_OscConfig+0x4e8>)
 8002474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002476:	4a55      	ldr	r2, [pc, #340]	; (80025cc <HAL_RCC_OscConfig+0x4e8>)
 8002478:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800247c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	699b      	ldr	r3, [r3, #24]
 8002482:	2b00      	cmp	r3, #0
 8002484:	f000 809b 	beq.w	80025be <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002488:	4b50      	ldr	r3, [pc, #320]	; (80025cc <HAL_RCC_OscConfig+0x4e8>)
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	f003 030c 	and.w	r3, r3, #12
 8002490:	2b08      	cmp	r3, #8
 8002492:	d05c      	beq.n	800254e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	699b      	ldr	r3, [r3, #24]
 8002498:	2b02      	cmp	r3, #2
 800249a:	d141      	bne.n	8002520 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800249c:	4b4c      	ldr	r3, [pc, #304]	; (80025d0 <HAL_RCC_OscConfig+0x4ec>)
 800249e:	2200      	movs	r2, #0
 80024a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a2:	f7fe f9d5 	bl	8000850 <HAL_GetTick>
 80024a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024a8:	e008      	b.n	80024bc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024aa:	f7fe f9d1 	bl	8000850 <HAL_GetTick>
 80024ae:	4602      	mov	r2, r0
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	d901      	bls.n	80024bc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80024b8:	2303      	movs	r3, #3
 80024ba:	e081      	b.n	80025c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024bc:	4b43      	ldr	r3, [pc, #268]	; (80025cc <HAL_RCC_OscConfig+0x4e8>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d1f0      	bne.n	80024aa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	69da      	ldr	r2, [r3, #28]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6a1b      	ldr	r3, [r3, #32]
 80024d0:	431a      	orrs	r2, r3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d6:	019b      	lsls	r3, r3, #6
 80024d8:	431a      	orrs	r2, r3
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024de:	085b      	lsrs	r3, r3, #1
 80024e0:	3b01      	subs	r3, #1
 80024e2:	041b      	lsls	r3, r3, #16
 80024e4:	431a      	orrs	r2, r3
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ea:	061b      	lsls	r3, r3, #24
 80024ec:	4937      	ldr	r1, [pc, #220]	; (80025cc <HAL_RCC_OscConfig+0x4e8>)
 80024ee:	4313      	orrs	r3, r2
 80024f0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024f2:	4b37      	ldr	r3, [pc, #220]	; (80025d0 <HAL_RCC_OscConfig+0x4ec>)
 80024f4:	2201      	movs	r2, #1
 80024f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f8:	f7fe f9aa 	bl	8000850 <HAL_GetTick>
 80024fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024fe:	e008      	b.n	8002512 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002500:	f7fe f9a6 	bl	8000850 <HAL_GetTick>
 8002504:	4602      	mov	r2, r0
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	2b02      	cmp	r3, #2
 800250c:	d901      	bls.n	8002512 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e056      	b.n	80025c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002512:	4b2e      	ldr	r3, [pc, #184]	; (80025cc <HAL_RCC_OscConfig+0x4e8>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d0f0      	beq.n	8002500 <HAL_RCC_OscConfig+0x41c>
 800251e:	e04e      	b.n	80025be <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002520:	4b2b      	ldr	r3, [pc, #172]	; (80025d0 <HAL_RCC_OscConfig+0x4ec>)
 8002522:	2200      	movs	r2, #0
 8002524:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002526:	f7fe f993 	bl	8000850 <HAL_GetTick>
 800252a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800252c:	e008      	b.n	8002540 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800252e:	f7fe f98f 	bl	8000850 <HAL_GetTick>
 8002532:	4602      	mov	r2, r0
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	2b02      	cmp	r3, #2
 800253a:	d901      	bls.n	8002540 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800253c:	2303      	movs	r3, #3
 800253e:	e03f      	b.n	80025c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002540:	4b22      	ldr	r3, [pc, #136]	; (80025cc <HAL_RCC_OscConfig+0x4e8>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002548:	2b00      	cmp	r3, #0
 800254a:	d1f0      	bne.n	800252e <HAL_RCC_OscConfig+0x44a>
 800254c:	e037      	b.n	80025be <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	699b      	ldr	r3, [r3, #24]
 8002552:	2b01      	cmp	r3, #1
 8002554:	d101      	bne.n	800255a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e032      	b.n	80025c0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800255a:	4b1c      	ldr	r3, [pc, #112]	; (80025cc <HAL_RCC_OscConfig+0x4e8>)
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	699b      	ldr	r3, [r3, #24]
 8002564:	2b01      	cmp	r3, #1
 8002566:	d028      	beq.n	80025ba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002572:	429a      	cmp	r2, r3
 8002574:	d121      	bne.n	80025ba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002580:	429a      	cmp	r2, r3
 8002582:	d11a      	bne.n	80025ba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002584:	68fa      	ldr	r2, [r7, #12]
 8002586:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800258a:	4013      	ands	r3, r2
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002590:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002592:	4293      	cmp	r3, r2
 8002594:	d111      	bne.n	80025ba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025a0:	085b      	lsrs	r3, r3, #1
 80025a2:	3b01      	subs	r3, #1
 80025a4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d107      	bne.n	80025ba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025b4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025b6:	429a      	cmp	r2, r3
 80025b8:	d001      	beq.n	80025be <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e000      	b.n	80025c0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80025be:	2300      	movs	r3, #0
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3718      	adds	r7, #24
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	40007000 	.word	0x40007000
 80025cc:	40023800 	.word	0x40023800
 80025d0:	42470060 	.word	0x42470060

080025d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b084      	sub	sp, #16
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d101      	bne.n	80025e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	e0cc      	b.n	8002782 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025e8:	4b68      	ldr	r3, [pc, #416]	; (800278c <HAL_RCC_ClockConfig+0x1b8>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 0307 	and.w	r3, r3, #7
 80025f0:	683a      	ldr	r2, [r7, #0]
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d90c      	bls.n	8002610 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025f6:	4b65      	ldr	r3, [pc, #404]	; (800278c <HAL_RCC_ClockConfig+0x1b8>)
 80025f8:	683a      	ldr	r2, [r7, #0]
 80025fa:	b2d2      	uxtb	r2, r2
 80025fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025fe:	4b63      	ldr	r3, [pc, #396]	; (800278c <HAL_RCC_ClockConfig+0x1b8>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 0307 	and.w	r3, r3, #7
 8002606:	683a      	ldr	r2, [r7, #0]
 8002608:	429a      	cmp	r2, r3
 800260a:	d001      	beq.n	8002610 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	e0b8      	b.n	8002782 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0302 	and.w	r3, r3, #2
 8002618:	2b00      	cmp	r3, #0
 800261a:	d020      	beq.n	800265e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 0304 	and.w	r3, r3, #4
 8002624:	2b00      	cmp	r3, #0
 8002626:	d005      	beq.n	8002634 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002628:	4b59      	ldr	r3, [pc, #356]	; (8002790 <HAL_RCC_ClockConfig+0x1bc>)
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	4a58      	ldr	r2, [pc, #352]	; (8002790 <HAL_RCC_ClockConfig+0x1bc>)
 800262e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002632:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0308 	and.w	r3, r3, #8
 800263c:	2b00      	cmp	r3, #0
 800263e:	d005      	beq.n	800264c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002640:	4b53      	ldr	r3, [pc, #332]	; (8002790 <HAL_RCC_ClockConfig+0x1bc>)
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	4a52      	ldr	r2, [pc, #328]	; (8002790 <HAL_RCC_ClockConfig+0x1bc>)
 8002646:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800264a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800264c:	4b50      	ldr	r3, [pc, #320]	; (8002790 <HAL_RCC_ClockConfig+0x1bc>)
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	494d      	ldr	r1, [pc, #308]	; (8002790 <HAL_RCC_ClockConfig+0x1bc>)
 800265a:	4313      	orrs	r3, r2
 800265c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0301 	and.w	r3, r3, #1
 8002666:	2b00      	cmp	r3, #0
 8002668:	d044      	beq.n	80026f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	2b01      	cmp	r3, #1
 8002670:	d107      	bne.n	8002682 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002672:	4b47      	ldr	r3, [pc, #284]	; (8002790 <HAL_RCC_ClockConfig+0x1bc>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d119      	bne.n	80026b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e07f      	b.n	8002782 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	2b02      	cmp	r3, #2
 8002688:	d003      	beq.n	8002692 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800268e:	2b03      	cmp	r3, #3
 8002690:	d107      	bne.n	80026a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002692:	4b3f      	ldr	r3, [pc, #252]	; (8002790 <HAL_RCC_ClockConfig+0x1bc>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d109      	bne.n	80026b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e06f      	b.n	8002782 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026a2:	4b3b      	ldr	r3, [pc, #236]	; (8002790 <HAL_RCC_ClockConfig+0x1bc>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 0302 	and.w	r3, r3, #2
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d101      	bne.n	80026b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e067      	b.n	8002782 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026b2:	4b37      	ldr	r3, [pc, #220]	; (8002790 <HAL_RCC_ClockConfig+0x1bc>)
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	f023 0203 	bic.w	r2, r3, #3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	4934      	ldr	r1, [pc, #208]	; (8002790 <HAL_RCC_ClockConfig+0x1bc>)
 80026c0:	4313      	orrs	r3, r2
 80026c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026c4:	f7fe f8c4 	bl	8000850 <HAL_GetTick>
 80026c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026ca:	e00a      	b.n	80026e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026cc:	f7fe f8c0 	bl	8000850 <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80026da:	4293      	cmp	r3, r2
 80026dc:	d901      	bls.n	80026e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026de:	2303      	movs	r3, #3
 80026e0:	e04f      	b.n	8002782 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026e2:	4b2b      	ldr	r3, [pc, #172]	; (8002790 <HAL_RCC_ClockConfig+0x1bc>)
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	f003 020c 	and.w	r2, r3, #12
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d1eb      	bne.n	80026cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026f4:	4b25      	ldr	r3, [pc, #148]	; (800278c <HAL_RCC_ClockConfig+0x1b8>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 0307 	and.w	r3, r3, #7
 80026fc:	683a      	ldr	r2, [r7, #0]
 80026fe:	429a      	cmp	r2, r3
 8002700:	d20c      	bcs.n	800271c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002702:	4b22      	ldr	r3, [pc, #136]	; (800278c <HAL_RCC_ClockConfig+0x1b8>)
 8002704:	683a      	ldr	r2, [r7, #0]
 8002706:	b2d2      	uxtb	r2, r2
 8002708:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800270a:	4b20      	ldr	r3, [pc, #128]	; (800278c <HAL_RCC_ClockConfig+0x1b8>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0307 	and.w	r3, r3, #7
 8002712:	683a      	ldr	r2, [r7, #0]
 8002714:	429a      	cmp	r2, r3
 8002716:	d001      	beq.n	800271c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	e032      	b.n	8002782 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0304 	and.w	r3, r3, #4
 8002724:	2b00      	cmp	r3, #0
 8002726:	d008      	beq.n	800273a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002728:	4b19      	ldr	r3, [pc, #100]	; (8002790 <HAL_RCC_ClockConfig+0x1bc>)
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	4916      	ldr	r1, [pc, #88]	; (8002790 <HAL_RCC_ClockConfig+0x1bc>)
 8002736:	4313      	orrs	r3, r2
 8002738:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0308 	and.w	r3, r3, #8
 8002742:	2b00      	cmp	r3, #0
 8002744:	d009      	beq.n	800275a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002746:	4b12      	ldr	r3, [pc, #72]	; (8002790 <HAL_RCC_ClockConfig+0x1bc>)
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	691b      	ldr	r3, [r3, #16]
 8002752:	00db      	lsls	r3, r3, #3
 8002754:	490e      	ldr	r1, [pc, #56]	; (8002790 <HAL_RCC_ClockConfig+0x1bc>)
 8002756:	4313      	orrs	r3, r2
 8002758:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800275a:	f000 f821 	bl	80027a0 <HAL_RCC_GetSysClockFreq>
 800275e:	4602      	mov	r2, r0
 8002760:	4b0b      	ldr	r3, [pc, #44]	; (8002790 <HAL_RCC_ClockConfig+0x1bc>)
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	091b      	lsrs	r3, r3, #4
 8002766:	f003 030f 	and.w	r3, r3, #15
 800276a:	490a      	ldr	r1, [pc, #40]	; (8002794 <HAL_RCC_ClockConfig+0x1c0>)
 800276c:	5ccb      	ldrb	r3, [r1, r3]
 800276e:	fa22 f303 	lsr.w	r3, r2, r3
 8002772:	4a09      	ldr	r2, [pc, #36]	; (8002798 <HAL_RCC_ClockConfig+0x1c4>)
 8002774:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002776:	4b09      	ldr	r3, [pc, #36]	; (800279c <HAL_RCC_ClockConfig+0x1c8>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4618      	mov	r0, r3
 800277c:	f7fe f824 	bl	80007c8 <HAL_InitTick>

  return HAL_OK;
 8002780:	2300      	movs	r3, #0
}
 8002782:	4618      	mov	r0, r3
 8002784:	3710      	adds	r7, #16
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	40023c00 	.word	0x40023c00
 8002790:	40023800 	.word	0x40023800
 8002794:	08006058 	.word	0x08006058
 8002798:	20000000 	.word	0x20000000
 800279c:	20000004 	.word	0x20000004

080027a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027a0:	b5b0      	push	{r4, r5, r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80027a6:	2100      	movs	r1, #0
 80027a8:	6079      	str	r1, [r7, #4]
 80027aa:	2100      	movs	r1, #0
 80027ac:	60f9      	str	r1, [r7, #12]
 80027ae:	2100      	movs	r1, #0
 80027b0:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80027b2:	2100      	movs	r1, #0
 80027b4:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027b6:	4952      	ldr	r1, [pc, #328]	; (8002900 <HAL_RCC_GetSysClockFreq+0x160>)
 80027b8:	6889      	ldr	r1, [r1, #8]
 80027ba:	f001 010c 	and.w	r1, r1, #12
 80027be:	2908      	cmp	r1, #8
 80027c0:	d00d      	beq.n	80027de <HAL_RCC_GetSysClockFreq+0x3e>
 80027c2:	2908      	cmp	r1, #8
 80027c4:	f200 8094 	bhi.w	80028f0 <HAL_RCC_GetSysClockFreq+0x150>
 80027c8:	2900      	cmp	r1, #0
 80027ca:	d002      	beq.n	80027d2 <HAL_RCC_GetSysClockFreq+0x32>
 80027cc:	2904      	cmp	r1, #4
 80027ce:	d003      	beq.n	80027d8 <HAL_RCC_GetSysClockFreq+0x38>
 80027d0:	e08e      	b.n	80028f0 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80027d2:	4b4c      	ldr	r3, [pc, #304]	; (8002904 <HAL_RCC_GetSysClockFreq+0x164>)
 80027d4:	60bb      	str	r3, [r7, #8]
       break;
 80027d6:	e08e      	b.n	80028f6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80027d8:	4b4b      	ldr	r3, [pc, #300]	; (8002908 <HAL_RCC_GetSysClockFreq+0x168>)
 80027da:	60bb      	str	r3, [r7, #8]
      break;
 80027dc:	e08b      	b.n	80028f6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027de:	4948      	ldr	r1, [pc, #288]	; (8002900 <HAL_RCC_GetSysClockFreq+0x160>)
 80027e0:	6849      	ldr	r1, [r1, #4]
 80027e2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80027e6:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80027e8:	4945      	ldr	r1, [pc, #276]	; (8002900 <HAL_RCC_GetSysClockFreq+0x160>)
 80027ea:	6849      	ldr	r1, [r1, #4]
 80027ec:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80027f0:	2900      	cmp	r1, #0
 80027f2:	d024      	beq.n	800283e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027f4:	4942      	ldr	r1, [pc, #264]	; (8002900 <HAL_RCC_GetSysClockFreq+0x160>)
 80027f6:	6849      	ldr	r1, [r1, #4]
 80027f8:	0989      	lsrs	r1, r1, #6
 80027fa:	4608      	mov	r0, r1
 80027fc:	f04f 0100 	mov.w	r1, #0
 8002800:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002804:	f04f 0500 	mov.w	r5, #0
 8002808:	ea00 0204 	and.w	r2, r0, r4
 800280c:	ea01 0305 	and.w	r3, r1, r5
 8002810:	493d      	ldr	r1, [pc, #244]	; (8002908 <HAL_RCC_GetSysClockFreq+0x168>)
 8002812:	fb01 f003 	mul.w	r0, r1, r3
 8002816:	2100      	movs	r1, #0
 8002818:	fb01 f102 	mul.w	r1, r1, r2
 800281c:	1844      	adds	r4, r0, r1
 800281e:	493a      	ldr	r1, [pc, #232]	; (8002908 <HAL_RCC_GetSysClockFreq+0x168>)
 8002820:	fba2 0101 	umull	r0, r1, r2, r1
 8002824:	1863      	adds	r3, r4, r1
 8002826:	4619      	mov	r1, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	461a      	mov	r2, r3
 800282c:	f04f 0300 	mov.w	r3, #0
 8002830:	f7fd fcd0 	bl	80001d4 <__aeabi_uldivmod>
 8002834:	4602      	mov	r2, r0
 8002836:	460b      	mov	r3, r1
 8002838:	4613      	mov	r3, r2
 800283a:	60fb      	str	r3, [r7, #12]
 800283c:	e04a      	b.n	80028d4 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800283e:	4b30      	ldr	r3, [pc, #192]	; (8002900 <HAL_RCC_GetSysClockFreq+0x160>)
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	099b      	lsrs	r3, r3, #6
 8002844:	461a      	mov	r2, r3
 8002846:	f04f 0300 	mov.w	r3, #0
 800284a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800284e:	f04f 0100 	mov.w	r1, #0
 8002852:	ea02 0400 	and.w	r4, r2, r0
 8002856:	ea03 0501 	and.w	r5, r3, r1
 800285a:	4620      	mov	r0, r4
 800285c:	4629      	mov	r1, r5
 800285e:	f04f 0200 	mov.w	r2, #0
 8002862:	f04f 0300 	mov.w	r3, #0
 8002866:	014b      	lsls	r3, r1, #5
 8002868:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800286c:	0142      	lsls	r2, r0, #5
 800286e:	4610      	mov	r0, r2
 8002870:	4619      	mov	r1, r3
 8002872:	1b00      	subs	r0, r0, r4
 8002874:	eb61 0105 	sbc.w	r1, r1, r5
 8002878:	f04f 0200 	mov.w	r2, #0
 800287c:	f04f 0300 	mov.w	r3, #0
 8002880:	018b      	lsls	r3, r1, #6
 8002882:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002886:	0182      	lsls	r2, r0, #6
 8002888:	1a12      	subs	r2, r2, r0
 800288a:	eb63 0301 	sbc.w	r3, r3, r1
 800288e:	f04f 0000 	mov.w	r0, #0
 8002892:	f04f 0100 	mov.w	r1, #0
 8002896:	00d9      	lsls	r1, r3, #3
 8002898:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800289c:	00d0      	lsls	r0, r2, #3
 800289e:	4602      	mov	r2, r0
 80028a0:	460b      	mov	r3, r1
 80028a2:	1912      	adds	r2, r2, r4
 80028a4:	eb45 0303 	adc.w	r3, r5, r3
 80028a8:	f04f 0000 	mov.w	r0, #0
 80028ac:	f04f 0100 	mov.w	r1, #0
 80028b0:	0299      	lsls	r1, r3, #10
 80028b2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80028b6:	0290      	lsls	r0, r2, #10
 80028b8:	4602      	mov	r2, r0
 80028ba:	460b      	mov	r3, r1
 80028bc:	4610      	mov	r0, r2
 80028be:	4619      	mov	r1, r3
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	461a      	mov	r2, r3
 80028c4:	f04f 0300 	mov.w	r3, #0
 80028c8:	f7fd fc84 	bl	80001d4 <__aeabi_uldivmod>
 80028cc:	4602      	mov	r2, r0
 80028ce:	460b      	mov	r3, r1
 80028d0:	4613      	mov	r3, r2
 80028d2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80028d4:	4b0a      	ldr	r3, [pc, #40]	; (8002900 <HAL_RCC_GetSysClockFreq+0x160>)
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	0c1b      	lsrs	r3, r3, #16
 80028da:	f003 0303 	and.w	r3, r3, #3
 80028de:	3301      	adds	r3, #1
 80028e0:	005b      	lsls	r3, r3, #1
 80028e2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80028e4:	68fa      	ldr	r2, [r7, #12]
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80028ec:	60bb      	str	r3, [r7, #8]
      break;
 80028ee:	e002      	b.n	80028f6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80028f0:	4b04      	ldr	r3, [pc, #16]	; (8002904 <HAL_RCC_GetSysClockFreq+0x164>)
 80028f2:	60bb      	str	r3, [r7, #8]
      break;
 80028f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028f6:	68bb      	ldr	r3, [r7, #8]
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3710      	adds	r7, #16
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bdb0      	pop	{r4, r5, r7, pc}
 8002900:	40023800 	.word	0x40023800
 8002904:	00f42400 	.word	0x00f42400
 8002908:	017d7840 	.word	0x017d7840

0800290c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800290c:	b480      	push	{r7}
 800290e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002910:	4b03      	ldr	r3, [pc, #12]	; (8002920 <HAL_RCC_GetHCLKFreq+0x14>)
 8002912:	681b      	ldr	r3, [r3, #0]
}
 8002914:	4618      	mov	r0, r3
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr
 800291e:	bf00      	nop
 8002920:	20000000 	.word	0x20000000

08002924 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002924:	b084      	sub	sp, #16
 8002926:	b580      	push	{r7, lr}
 8002928:	b084      	sub	sp, #16
 800292a:	af00      	add	r7, sp, #0
 800292c:	6078      	str	r0, [r7, #4]
 800292e:	f107 001c 	add.w	r0, r7, #28
 8002932:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002938:	2b01      	cmp	r3, #1
 800293a:	d122      	bne.n	8002982 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002940:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002950:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002954:	687a      	ldr	r2, [r7, #4]
 8002956:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002964:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002966:	2b01      	cmp	r3, #1
 8002968:	d105      	bne.n	8002976 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	68db      	ldr	r3, [r3, #12]
 800296e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f001 fb1c 	bl	8003fb4 <USB_CoreReset>
 800297c:	4603      	mov	r3, r0
 800297e:	73fb      	strb	r3, [r7, #15]
 8002980:	e01a      	b.n	80029b8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	68db      	ldr	r3, [r3, #12]
 8002986:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f001 fb10 	bl	8003fb4 <USB_CoreReset>
 8002994:	4603      	mov	r3, r0
 8002996:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002998:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800299a:	2b00      	cmp	r3, #0
 800299c:	d106      	bne.n	80029ac <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029a2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	639a      	str	r2, [r3, #56]	; 0x38
 80029aa:	e005      	b.n	80029b8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029b0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80029b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d10b      	bne.n	80029d6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	f043 0206 	orr.w	r2, r3, #6
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	f043 0220 	orr.w	r2, r3, #32
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80029d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80029d8:	4618      	mov	r0, r3
 80029da:	3710      	adds	r7, #16
 80029dc:	46bd      	mov	sp, r7
 80029de:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80029e2:	b004      	add	sp, #16
 80029e4:	4770      	bx	lr
	...

080029e8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b087      	sub	sp, #28
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	60b9      	str	r1, [r7, #8]
 80029f2:	4613      	mov	r3, r2
 80029f4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80029f6:	79fb      	ldrb	r3, [r7, #7]
 80029f8:	2b02      	cmp	r3, #2
 80029fa:	d165      	bne.n	8002ac8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	4a41      	ldr	r2, [pc, #260]	; (8002b04 <USB_SetTurnaroundTime+0x11c>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d906      	bls.n	8002a12 <USB_SetTurnaroundTime+0x2a>
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	4a40      	ldr	r2, [pc, #256]	; (8002b08 <USB_SetTurnaroundTime+0x120>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d202      	bcs.n	8002a12 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8002a0c:	230f      	movs	r3, #15
 8002a0e:	617b      	str	r3, [r7, #20]
 8002a10:	e062      	b.n	8002ad8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	4a3c      	ldr	r2, [pc, #240]	; (8002b08 <USB_SetTurnaroundTime+0x120>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d306      	bcc.n	8002a28 <USB_SetTurnaroundTime+0x40>
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	4a3b      	ldr	r2, [pc, #236]	; (8002b0c <USB_SetTurnaroundTime+0x124>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d202      	bcs.n	8002a28 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8002a22:	230e      	movs	r3, #14
 8002a24:	617b      	str	r3, [r7, #20]
 8002a26:	e057      	b.n	8002ad8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	4a38      	ldr	r2, [pc, #224]	; (8002b0c <USB_SetTurnaroundTime+0x124>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d306      	bcc.n	8002a3e <USB_SetTurnaroundTime+0x56>
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	4a37      	ldr	r2, [pc, #220]	; (8002b10 <USB_SetTurnaroundTime+0x128>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d202      	bcs.n	8002a3e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8002a38:	230d      	movs	r3, #13
 8002a3a:	617b      	str	r3, [r7, #20]
 8002a3c:	e04c      	b.n	8002ad8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	4a33      	ldr	r2, [pc, #204]	; (8002b10 <USB_SetTurnaroundTime+0x128>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d306      	bcc.n	8002a54 <USB_SetTurnaroundTime+0x6c>
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	4a32      	ldr	r2, [pc, #200]	; (8002b14 <USB_SetTurnaroundTime+0x12c>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d802      	bhi.n	8002a54 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8002a4e:	230c      	movs	r3, #12
 8002a50:	617b      	str	r3, [r7, #20]
 8002a52:	e041      	b.n	8002ad8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	4a2f      	ldr	r2, [pc, #188]	; (8002b14 <USB_SetTurnaroundTime+0x12c>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d906      	bls.n	8002a6a <USB_SetTurnaroundTime+0x82>
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	4a2e      	ldr	r2, [pc, #184]	; (8002b18 <USB_SetTurnaroundTime+0x130>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d802      	bhi.n	8002a6a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8002a64:	230b      	movs	r3, #11
 8002a66:	617b      	str	r3, [r7, #20]
 8002a68:	e036      	b.n	8002ad8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	4a2a      	ldr	r2, [pc, #168]	; (8002b18 <USB_SetTurnaroundTime+0x130>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d906      	bls.n	8002a80 <USB_SetTurnaroundTime+0x98>
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	4a29      	ldr	r2, [pc, #164]	; (8002b1c <USB_SetTurnaroundTime+0x134>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d802      	bhi.n	8002a80 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8002a7a:	230a      	movs	r3, #10
 8002a7c:	617b      	str	r3, [r7, #20]
 8002a7e:	e02b      	b.n	8002ad8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	4a26      	ldr	r2, [pc, #152]	; (8002b1c <USB_SetTurnaroundTime+0x134>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d906      	bls.n	8002a96 <USB_SetTurnaroundTime+0xae>
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	4a25      	ldr	r2, [pc, #148]	; (8002b20 <USB_SetTurnaroundTime+0x138>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d202      	bcs.n	8002a96 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8002a90:	2309      	movs	r3, #9
 8002a92:	617b      	str	r3, [r7, #20]
 8002a94:	e020      	b.n	8002ad8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	4a21      	ldr	r2, [pc, #132]	; (8002b20 <USB_SetTurnaroundTime+0x138>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d306      	bcc.n	8002aac <USB_SetTurnaroundTime+0xc4>
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	4a20      	ldr	r2, [pc, #128]	; (8002b24 <USB_SetTurnaroundTime+0x13c>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d802      	bhi.n	8002aac <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8002aa6:	2308      	movs	r3, #8
 8002aa8:	617b      	str	r3, [r7, #20]
 8002aaa:	e015      	b.n	8002ad8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	4a1d      	ldr	r2, [pc, #116]	; (8002b24 <USB_SetTurnaroundTime+0x13c>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d906      	bls.n	8002ac2 <USB_SetTurnaroundTime+0xda>
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	4a1c      	ldr	r2, [pc, #112]	; (8002b28 <USB_SetTurnaroundTime+0x140>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d202      	bcs.n	8002ac2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8002abc:	2307      	movs	r3, #7
 8002abe:	617b      	str	r3, [r7, #20]
 8002ac0:	e00a      	b.n	8002ad8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8002ac2:	2306      	movs	r3, #6
 8002ac4:	617b      	str	r3, [r7, #20]
 8002ac6:	e007      	b.n	8002ad8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8002ac8:	79fb      	ldrb	r3, [r7, #7]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d102      	bne.n	8002ad4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8002ace:	2309      	movs	r3, #9
 8002ad0:	617b      	str	r3, [r7, #20]
 8002ad2:	e001      	b.n	8002ad8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8002ad4:	2309      	movs	r3, #9
 8002ad6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	68da      	ldr	r2, [r3, #12]
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	029b      	lsls	r3, r3, #10
 8002aec:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8002af0:	431a      	orrs	r2, r3
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002af6:	2300      	movs	r3, #0
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	371c      	adds	r7, #28
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr
 8002b04:	00d8acbf 	.word	0x00d8acbf
 8002b08:	00e4e1c0 	.word	0x00e4e1c0
 8002b0c:	00f42400 	.word	0x00f42400
 8002b10:	01067380 	.word	0x01067380
 8002b14:	011a499f 	.word	0x011a499f
 8002b18:	01312cff 	.word	0x01312cff
 8002b1c:	014ca43f 	.word	0x014ca43f
 8002b20:	016e3600 	.word	0x016e3600
 8002b24:	01a6ab1f 	.word	0x01a6ab1f
 8002b28:	01e84800 	.word	0x01e84800

08002b2c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b083      	sub	sp, #12
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	f043 0201 	orr.w	r2, r3, #1
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002b40:	2300      	movs	r3, #0
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	370c      	adds	r7, #12
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr

08002b4e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002b4e:	b480      	push	{r7}
 8002b50:	b083      	sub	sp, #12
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	f023 0201 	bic.w	r2, r3, #1
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002b62:	2300      	movs	r3, #0
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	370c      	adds	r7, #12
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr

08002b70 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b084      	sub	sp, #16
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	460b      	mov	r3, r1
 8002b7a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002b8c:	78fb      	ldrb	r3, [r7, #3]
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d115      	bne.n	8002bbe <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	68db      	ldr	r3, [r3, #12]
 8002b96:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002b9e:	2001      	movs	r0, #1
 8002ba0:	f7fd fe62 	bl	8000868 <HAL_Delay>
      ms++;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	3301      	adds	r3, #1
 8002ba8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f001 f972 	bl	8003e94 <USB_GetMode>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d01e      	beq.n	8002bf4 <USB_SetCurrentMode+0x84>
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2b31      	cmp	r3, #49	; 0x31
 8002bba:	d9f0      	bls.n	8002b9e <USB_SetCurrentMode+0x2e>
 8002bbc:	e01a      	b.n	8002bf4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8002bbe:	78fb      	ldrb	r3, [r7, #3]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d115      	bne.n	8002bf0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002bd0:	2001      	movs	r0, #1
 8002bd2:	f7fd fe49 	bl	8000868 <HAL_Delay>
      ms++;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	3301      	adds	r3, #1
 8002bda:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f001 f959 	bl	8003e94 <USB_GetMode>
 8002be2:	4603      	mov	r3, r0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d005      	beq.n	8002bf4 <USB_SetCurrentMode+0x84>
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2b31      	cmp	r3, #49	; 0x31
 8002bec:	d9f0      	bls.n	8002bd0 <USB_SetCurrentMode+0x60>
 8002bee:	e001      	b.n	8002bf4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e005      	b.n	8002c00 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2b32      	cmp	r3, #50	; 0x32
 8002bf8:	d101      	bne.n	8002bfe <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e000      	b.n	8002c00 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8002bfe:	2300      	movs	r3, #0
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	3710      	adds	r7, #16
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}

08002c08 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002c08:	b084      	sub	sp, #16
 8002c0a:	b580      	push	{r7, lr}
 8002c0c:	b086      	sub	sp, #24
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	6078      	str	r0, [r7, #4]
 8002c12:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002c16:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002c22:	2300      	movs	r3, #0
 8002c24:	613b      	str	r3, [r7, #16]
 8002c26:	e009      	b.n	8002c3c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002c28:	687a      	ldr	r2, [r7, #4]
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	3340      	adds	r3, #64	; 0x40
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	4413      	add	r3, r2
 8002c32:	2200      	movs	r2, #0
 8002c34:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	3301      	adds	r3, #1
 8002c3a:	613b      	str	r3, [r7, #16]
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	2b0e      	cmp	r3, #14
 8002c40:	d9f2      	bls.n	8002c28 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002c42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d11c      	bne.n	8002c82 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	68fa      	ldr	r2, [r7, #12]
 8002c52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c56:	f043 0302 	orr.w	r3, r3, #2
 8002c5a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c60:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c6c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c78:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	639a      	str	r2, [r3, #56]	; 0x38
 8002c80:	e00b      	b.n	8002c9a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c86:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c92:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cac:	4619      	mov	r1, r3
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	680b      	ldr	r3, [r1, #0]
 8002cb8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d10c      	bne.n	8002cda <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8002cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d104      	bne.n	8002cd0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002cc6:	2100      	movs	r1, #0
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	f000 f945 	bl	8002f58 <USB_SetDevSpeed>
 8002cce:	e008      	b.n	8002ce2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002cd0:	2101      	movs	r1, #1
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f000 f940 	bl	8002f58 <USB_SetDevSpeed>
 8002cd8:	e003      	b.n	8002ce2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002cda:	2103      	movs	r1, #3
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	f000 f93b 	bl	8002f58 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002ce2:	2110      	movs	r1, #16
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	f000 f8f3 	bl	8002ed0 <USB_FlushTxFifo>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d001      	beq.n	8002cf4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	f000 f90f 	bl	8002f18 <USB_FlushRxFifo>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d001      	beq.n	8002d04 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d16:	461a      	mov	r2, r3
 8002d18:	2300      	movs	r3, #0
 8002d1a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d22:	461a      	mov	r2, r3
 8002d24:	2300      	movs	r3, #0
 8002d26:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002d28:	2300      	movs	r3, #0
 8002d2a:	613b      	str	r3, [r7, #16]
 8002d2c:	e043      	b.n	8002db6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	015a      	lsls	r2, r3, #5
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	4413      	add	r3, r2
 8002d36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002d40:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002d44:	d118      	bne.n	8002d78 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d10a      	bne.n	8002d62 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	015a      	lsls	r2, r3, #5
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	4413      	add	r3, r2
 8002d54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d58:	461a      	mov	r2, r3
 8002d5a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002d5e:	6013      	str	r3, [r2, #0]
 8002d60:	e013      	b.n	8002d8a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	015a      	lsls	r2, r3, #5
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	4413      	add	r3, r2
 8002d6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d6e:	461a      	mov	r2, r3
 8002d70:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002d74:	6013      	str	r3, [r2, #0]
 8002d76:	e008      	b.n	8002d8a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	015a      	lsls	r2, r3, #5
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	4413      	add	r3, r2
 8002d80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d84:	461a      	mov	r2, r3
 8002d86:	2300      	movs	r3, #0
 8002d88:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	015a      	lsls	r2, r3, #5
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	4413      	add	r3, r2
 8002d92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d96:	461a      	mov	r2, r3
 8002d98:	2300      	movs	r3, #0
 8002d9a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	015a      	lsls	r2, r3, #5
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	4413      	add	r3, r2
 8002da4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002da8:	461a      	mov	r2, r3
 8002daa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002dae:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	3301      	adds	r3, #1
 8002db4:	613b      	str	r3, [r7, #16]
 8002db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db8:	693a      	ldr	r2, [r7, #16]
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	d3b7      	bcc.n	8002d2e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	613b      	str	r3, [r7, #16]
 8002dc2:	e043      	b.n	8002e4c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	015a      	lsls	r2, r3, #5
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	4413      	add	r3, r2
 8002dcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002dd6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002dda:	d118      	bne.n	8002e0e <USB_DevInit+0x206>
    {
      if (i == 0U)
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d10a      	bne.n	8002df8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	015a      	lsls	r2, r3, #5
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	4413      	add	r3, r2
 8002dea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dee:	461a      	mov	r2, r3
 8002df0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002df4:	6013      	str	r3, [r2, #0]
 8002df6:	e013      	b.n	8002e20 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	015a      	lsls	r2, r3, #5
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	4413      	add	r3, r2
 8002e00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e04:	461a      	mov	r2, r3
 8002e06:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002e0a:	6013      	str	r3, [r2, #0]
 8002e0c:	e008      	b.n	8002e20 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	015a      	lsls	r2, r3, #5
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	4413      	add	r3, r2
 8002e16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	015a      	lsls	r2, r3, #5
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	4413      	add	r3, r2
 8002e28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	2300      	movs	r3, #0
 8002e30:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	015a      	lsls	r2, r3, #5
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	4413      	add	r3, r2
 8002e3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e3e:	461a      	mov	r2, r3
 8002e40:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002e44:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	3301      	adds	r3, #1
 8002e4a:	613b      	str	r3, [r7, #16]
 8002e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4e:	693a      	ldr	r2, [r7, #16]
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d3b7      	bcc.n	8002dc4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e5a:	691b      	ldr	r3, [r3, #16]
 8002e5c:	68fa      	ldr	r2, [r7, #12]
 8002e5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e62:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e66:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8002e74:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8002e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d105      	bne.n	8002e88 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	699b      	ldr	r3, [r3, #24]
 8002e80:	f043 0210 	orr.w	r2, r3, #16
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	699a      	ldr	r2, [r3, #24]
 8002e8c:	4b0f      	ldr	r3, [pc, #60]	; (8002ecc <USB_DevInit+0x2c4>)
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8002e94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d005      	beq.n	8002ea6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	699b      	ldr	r3, [r3, #24]
 8002e9e:	f043 0208 	orr.w	r2, r3, #8
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8002ea6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d107      	bne.n	8002ebc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	699b      	ldr	r3, [r3, #24]
 8002eb0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002eb4:	f043 0304 	orr.w	r3, r3, #4
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8002ebc:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3718      	adds	r7, #24
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002ec8:	b004      	add	sp, #16
 8002eca:	4770      	bx	lr
 8002ecc:	803c3800 	.word	0x803c3800

08002ed0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b085      	sub	sp, #20
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8002eda:	2300      	movs	r3, #0
 8002edc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	019b      	lsls	r3, r3, #6
 8002ee2:	f043 0220 	orr.w	r2, r3, #32
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	3301      	adds	r3, #1
 8002eee:	60fb      	str	r3, [r7, #12]
 8002ef0:	4a08      	ldr	r2, [pc, #32]	; (8002f14 <USB_FlushTxFifo+0x44>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d901      	bls.n	8002efa <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	e006      	b.n	8002f08 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	691b      	ldr	r3, [r3, #16]
 8002efe:	f003 0320 	and.w	r3, r3, #32
 8002f02:	2b20      	cmp	r3, #32
 8002f04:	d0f1      	beq.n	8002eea <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8002f06:	2300      	movs	r3, #0
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3714      	adds	r7, #20
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr
 8002f14:	00030d40 	.word	0x00030d40

08002f18 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b085      	sub	sp, #20
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002f20:	2300      	movs	r3, #0
 8002f22:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2210      	movs	r2, #16
 8002f28:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	3301      	adds	r3, #1
 8002f2e:	60fb      	str	r3, [r7, #12]
 8002f30:	4a08      	ldr	r2, [pc, #32]	; (8002f54 <USB_FlushRxFifo+0x3c>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d901      	bls.n	8002f3a <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8002f36:	2303      	movs	r3, #3
 8002f38:	e006      	b.n	8002f48 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	691b      	ldr	r3, [r3, #16]
 8002f3e:	f003 0310 	and.w	r3, r3, #16
 8002f42:	2b10      	cmp	r3, #16
 8002f44:	d0f1      	beq.n	8002f2a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8002f46:	2300      	movs	r3, #0
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3714      	adds	r7, #20
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr
 8002f54:	00030d40 	.word	0x00030d40

08002f58 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b085      	sub	sp, #20
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
 8002f60:	460b      	mov	r3, r1
 8002f62:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	78fb      	ldrb	r3, [r7, #3]
 8002f72:	68f9      	ldr	r1, [r7, #12]
 8002f74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8002f7c:	2300      	movs	r3, #0
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3714      	adds	r7, #20
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr

08002f8a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8002f8a:	b480      	push	{r7}
 8002f8c:	b087      	sub	sp, #28
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	f003 0306 	and.w	r3, r3, #6
 8002fa2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d102      	bne.n	8002fb0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8002faa:	2300      	movs	r3, #0
 8002fac:	75fb      	strb	r3, [r7, #23]
 8002fae:	e00a      	b.n	8002fc6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d002      	beq.n	8002fbc <USB_GetDevSpeed+0x32>
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2b06      	cmp	r3, #6
 8002fba:	d102      	bne.n	8002fc2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8002fbc:	2302      	movs	r3, #2
 8002fbe:	75fb      	strb	r3, [r7, #23]
 8002fc0:	e001      	b.n	8002fc6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8002fc2:	230f      	movs	r3, #15
 8002fc4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8002fc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	371c      	adds	r7, #28
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr

08002fd4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b085      	sub	sp, #20
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
 8002fdc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	781b      	ldrb	r3, [r3, #0]
 8002fe6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	785b      	ldrb	r3, [r3, #1]
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d13a      	bne.n	8003066 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ff6:	69da      	ldr	r2, [r3, #28]
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	781b      	ldrb	r3, [r3, #0]
 8002ffc:	f003 030f 	and.w	r3, r3, #15
 8003000:	2101      	movs	r1, #1
 8003002:	fa01 f303 	lsl.w	r3, r1, r3
 8003006:	b29b      	uxth	r3, r3
 8003008:	68f9      	ldr	r1, [r7, #12]
 800300a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800300e:	4313      	orrs	r3, r2
 8003010:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	015a      	lsls	r2, r3, #5
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	4413      	add	r3, r2
 800301a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003024:	2b00      	cmp	r3, #0
 8003026:	d155      	bne.n	80030d4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	015a      	lsls	r2, r3, #5
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	4413      	add	r3, r2
 8003030:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	78db      	ldrb	r3, [r3, #3]
 8003042:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003044:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	059b      	lsls	r3, r3, #22
 800304a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800304c:	4313      	orrs	r3, r2
 800304e:	68ba      	ldr	r2, [r7, #8]
 8003050:	0151      	lsls	r1, r2, #5
 8003052:	68fa      	ldr	r2, [r7, #12]
 8003054:	440a      	add	r2, r1
 8003056:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800305a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800305e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003062:	6013      	str	r3, [r2, #0]
 8003064:	e036      	b.n	80030d4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800306c:	69da      	ldr	r2, [r3, #28]
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	781b      	ldrb	r3, [r3, #0]
 8003072:	f003 030f 	and.w	r3, r3, #15
 8003076:	2101      	movs	r1, #1
 8003078:	fa01 f303 	lsl.w	r3, r1, r3
 800307c:	041b      	lsls	r3, r3, #16
 800307e:	68f9      	ldr	r1, [r7, #12]
 8003080:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003084:	4313      	orrs	r3, r2
 8003086:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	015a      	lsls	r2, r3, #5
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	4413      	add	r3, r2
 8003090:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800309a:	2b00      	cmp	r3, #0
 800309c:	d11a      	bne.n	80030d4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	015a      	lsls	r2, r3, #5
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	4413      	add	r3, r2
 80030a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	78db      	ldrb	r3, [r3, #3]
 80030b8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80030ba:	430b      	orrs	r3, r1
 80030bc:	4313      	orrs	r3, r2
 80030be:	68ba      	ldr	r2, [r7, #8]
 80030c0:	0151      	lsls	r1, r2, #5
 80030c2:	68fa      	ldr	r2, [r7, #12]
 80030c4:	440a      	add	r2, r1
 80030c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80030ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030d2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80030d4:	2300      	movs	r3, #0
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3714      	adds	r7, #20
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr
	...

080030e4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b085      	sub	sp, #20
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	781b      	ldrb	r3, [r3, #0]
 80030f6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	785b      	ldrb	r3, [r3, #1]
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d161      	bne.n	80031c4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	015a      	lsls	r2, r3, #5
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	4413      	add	r3, r2
 8003108:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003112:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003116:	d11f      	bne.n	8003158 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	015a      	lsls	r2, r3, #5
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	4413      	add	r3, r2
 8003120:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	68ba      	ldr	r2, [r7, #8]
 8003128:	0151      	lsls	r1, r2, #5
 800312a:	68fa      	ldr	r2, [r7, #12]
 800312c:	440a      	add	r2, r1
 800312e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003132:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003136:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	015a      	lsls	r2, r3, #5
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	4413      	add	r3, r2
 8003140:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	68ba      	ldr	r2, [r7, #8]
 8003148:	0151      	lsls	r1, r2, #5
 800314a:	68fa      	ldr	r2, [r7, #12]
 800314c:	440a      	add	r2, r1
 800314e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003152:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003156:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800315e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	781b      	ldrb	r3, [r3, #0]
 8003164:	f003 030f 	and.w	r3, r3, #15
 8003168:	2101      	movs	r1, #1
 800316a:	fa01 f303 	lsl.w	r3, r1, r3
 800316e:	b29b      	uxth	r3, r3
 8003170:	43db      	mvns	r3, r3
 8003172:	68f9      	ldr	r1, [r7, #12]
 8003174:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003178:	4013      	ands	r3, r2
 800317a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003182:	69da      	ldr	r2, [r3, #28]
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	781b      	ldrb	r3, [r3, #0]
 8003188:	f003 030f 	and.w	r3, r3, #15
 800318c:	2101      	movs	r1, #1
 800318e:	fa01 f303 	lsl.w	r3, r1, r3
 8003192:	b29b      	uxth	r3, r3
 8003194:	43db      	mvns	r3, r3
 8003196:	68f9      	ldr	r1, [r7, #12]
 8003198:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800319c:	4013      	ands	r3, r2
 800319e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	015a      	lsls	r2, r3, #5
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	4413      	add	r3, r2
 80031a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	0159      	lsls	r1, r3, #5
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	440b      	add	r3, r1
 80031b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031ba:	4619      	mov	r1, r3
 80031bc:	4b35      	ldr	r3, [pc, #212]	; (8003294 <USB_DeactivateEndpoint+0x1b0>)
 80031be:	4013      	ands	r3, r2
 80031c0:	600b      	str	r3, [r1, #0]
 80031c2:	e060      	b.n	8003286 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	015a      	lsls	r2, r3, #5
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	4413      	add	r3, r2
 80031cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80031d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80031da:	d11f      	bne.n	800321c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	015a      	lsls	r2, r3, #5
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	4413      	add	r3, r2
 80031e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	68ba      	ldr	r2, [r7, #8]
 80031ec:	0151      	lsls	r1, r2, #5
 80031ee:	68fa      	ldr	r2, [r7, #12]
 80031f0:	440a      	add	r2, r1
 80031f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80031f6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80031fa:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	015a      	lsls	r2, r3, #5
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	4413      	add	r3, r2
 8003204:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	68ba      	ldr	r2, [r7, #8]
 800320c:	0151      	lsls	r1, r2, #5
 800320e:	68fa      	ldr	r2, [r7, #12]
 8003210:	440a      	add	r2, r1
 8003212:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003216:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800321a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003222:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	781b      	ldrb	r3, [r3, #0]
 8003228:	f003 030f 	and.w	r3, r3, #15
 800322c:	2101      	movs	r1, #1
 800322e:	fa01 f303 	lsl.w	r3, r1, r3
 8003232:	041b      	lsls	r3, r3, #16
 8003234:	43db      	mvns	r3, r3
 8003236:	68f9      	ldr	r1, [r7, #12]
 8003238:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800323c:	4013      	ands	r3, r2
 800323e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003246:	69da      	ldr	r2, [r3, #28]
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	781b      	ldrb	r3, [r3, #0]
 800324c:	f003 030f 	and.w	r3, r3, #15
 8003250:	2101      	movs	r1, #1
 8003252:	fa01 f303 	lsl.w	r3, r1, r3
 8003256:	041b      	lsls	r3, r3, #16
 8003258:	43db      	mvns	r3, r3
 800325a:	68f9      	ldr	r1, [r7, #12]
 800325c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003260:	4013      	ands	r3, r2
 8003262:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	015a      	lsls	r2, r3, #5
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	4413      	add	r3, r2
 800326c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	0159      	lsls	r1, r3, #5
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	440b      	add	r3, r1
 800327a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800327e:	4619      	mov	r1, r3
 8003280:	4b05      	ldr	r3, [pc, #20]	; (8003298 <USB_DeactivateEndpoint+0x1b4>)
 8003282:	4013      	ands	r3, r2
 8003284:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003286:	2300      	movs	r3, #0
}
 8003288:	4618      	mov	r0, r3
 800328a:	3714      	adds	r7, #20
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr
 8003294:	ec337800 	.word	0xec337800
 8003298:	eff37800 	.word	0xeff37800

0800329c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b08a      	sub	sp, #40	; 0x28
 80032a0:	af02      	add	r7, sp, #8
 80032a2:	60f8      	str	r0, [r7, #12]
 80032a4:	60b9      	str	r1, [r7, #8]
 80032a6:	4613      	mov	r3, r2
 80032a8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	781b      	ldrb	r3, [r3, #0]
 80032b2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	785b      	ldrb	r3, [r3, #1]
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	f040 815c 	bne.w	8003576 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	695b      	ldr	r3, [r3, #20]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d132      	bne.n	800332c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80032c6:	69bb      	ldr	r3, [r7, #24]
 80032c8:	015a      	lsls	r2, r3, #5
 80032ca:	69fb      	ldr	r3, [r7, #28]
 80032cc:	4413      	add	r3, r2
 80032ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032d2:	691b      	ldr	r3, [r3, #16]
 80032d4:	69ba      	ldr	r2, [r7, #24]
 80032d6:	0151      	lsls	r1, r2, #5
 80032d8:	69fa      	ldr	r2, [r7, #28]
 80032da:	440a      	add	r2, r1
 80032dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80032e0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80032e4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80032e8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80032ea:	69bb      	ldr	r3, [r7, #24]
 80032ec:	015a      	lsls	r2, r3, #5
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	4413      	add	r3, r2
 80032f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032f6:	691b      	ldr	r3, [r3, #16]
 80032f8:	69ba      	ldr	r2, [r7, #24]
 80032fa:	0151      	lsls	r1, r2, #5
 80032fc:	69fa      	ldr	r2, [r7, #28]
 80032fe:	440a      	add	r2, r1
 8003300:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003304:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003308:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800330a:	69bb      	ldr	r3, [r7, #24]
 800330c:	015a      	lsls	r2, r3, #5
 800330e:	69fb      	ldr	r3, [r7, #28]
 8003310:	4413      	add	r3, r2
 8003312:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003316:	691b      	ldr	r3, [r3, #16]
 8003318:	69ba      	ldr	r2, [r7, #24]
 800331a:	0151      	lsls	r1, r2, #5
 800331c:	69fa      	ldr	r2, [r7, #28]
 800331e:	440a      	add	r2, r1
 8003320:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003324:	0cdb      	lsrs	r3, r3, #19
 8003326:	04db      	lsls	r3, r3, #19
 8003328:	6113      	str	r3, [r2, #16]
 800332a:	e074      	b.n	8003416 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800332c:	69bb      	ldr	r3, [r7, #24]
 800332e:	015a      	lsls	r2, r3, #5
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	4413      	add	r3, r2
 8003334:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003338:	691b      	ldr	r3, [r3, #16]
 800333a:	69ba      	ldr	r2, [r7, #24]
 800333c:	0151      	lsls	r1, r2, #5
 800333e:	69fa      	ldr	r2, [r7, #28]
 8003340:	440a      	add	r2, r1
 8003342:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003346:	0cdb      	lsrs	r3, r3, #19
 8003348:	04db      	lsls	r3, r3, #19
 800334a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800334c:	69bb      	ldr	r3, [r7, #24]
 800334e:	015a      	lsls	r2, r3, #5
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	4413      	add	r3, r2
 8003354:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003358:	691b      	ldr	r3, [r3, #16]
 800335a:	69ba      	ldr	r2, [r7, #24]
 800335c:	0151      	lsls	r1, r2, #5
 800335e:	69fa      	ldr	r2, [r7, #28]
 8003360:	440a      	add	r2, r1
 8003362:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003366:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800336a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800336e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003370:	69bb      	ldr	r3, [r7, #24]
 8003372:	015a      	lsls	r2, r3, #5
 8003374:	69fb      	ldr	r3, [r7, #28]
 8003376:	4413      	add	r3, r2
 8003378:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800337c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	6959      	ldr	r1, [r3, #20]
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	440b      	add	r3, r1
 8003388:	1e59      	subs	r1, r3, #1
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003392:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003394:	4b9d      	ldr	r3, [pc, #628]	; (800360c <USB_EPStartXfer+0x370>)
 8003396:	400b      	ands	r3, r1
 8003398:	69b9      	ldr	r1, [r7, #24]
 800339a:	0148      	lsls	r0, r1, #5
 800339c:	69f9      	ldr	r1, [r7, #28]
 800339e:	4401      	add	r1, r0
 80033a0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80033a4:	4313      	orrs	r3, r2
 80033a6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80033a8:	69bb      	ldr	r3, [r7, #24]
 80033aa:	015a      	lsls	r2, r3, #5
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	4413      	add	r3, r2
 80033b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033b4:	691a      	ldr	r2, [r3, #16]
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	695b      	ldr	r3, [r3, #20]
 80033ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033be:	69b9      	ldr	r1, [r7, #24]
 80033c0:	0148      	lsls	r0, r1, #5
 80033c2:	69f9      	ldr	r1, [r7, #28]
 80033c4:	4401      	add	r1, r0
 80033c6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80033ca:	4313      	orrs	r3, r2
 80033cc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	78db      	ldrb	r3, [r3, #3]
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d11f      	bne.n	8003416 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80033d6:	69bb      	ldr	r3, [r7, #24]
 80033d8:	015a      	lsls	r2, r3, #5
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	4413      	add	r3, r2
 80033de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033e2:	691b      	ldr	r3, [r3, #16]
 80033e4:	69ba      	ldr	r2, [r7, #24]
 80033e6:	0151      	lsls	r1, r2, #5
 80033e8:	69fa      	ldr	r2, [r7, #28]
 80033ea:	440a      	add	r2, r1
 80033ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80033f0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80033f4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80033f6:	69bb      	ldr	r3, [r7, #24]
 80033f8:	015a      	lsls	r2, r3, #5
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	4413      	add	r3, r2
 80033fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003402:	691b      	ldr	r3, [r3, #16]
 8003404:	69ba      	ldr	r2, [r7, #24]
 8003406:	0151      	lsls	r1, r2, #5
 8003408:	69fa      	ldr	r2, [r7, #28]
 800340a:	440a      	add	r2, r1
 800340c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003410:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003414:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8003416:	79fb      	ldrb	r3, [r7, #7]
 8003418:	2b01      	cmp	r3, #1
 800341a:	d14b      	bne.n	80034b4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	691b      	ldr	r3, [r3, #16]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d009      	beq.n	8003438 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003424:	69bb      	ldr	r3, [r7, #24]
 8003426:	015a      	lsls	r2, r3, #5
 8003428:	69fb      	ldr	r3, [r7, #28]
 800342a:	4413      	add	r3, r2
 800342c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003430:	461a      	mov	r2, r3
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	691b      	ldr	r3, [r3, #16]
 8003436:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	78db      	ldrb	r3, [r3, #3]
 800343c:	2b01      	cmp	r3, #1
 800343e:	d128      	bne.n	8003492 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003440:	69fb      	ldr	r3, [r7, #28]
 8003442:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800344c:	2b00      	cmp	r3, #0
 800344e:	d110      	bne.n	8003472 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003450:	69bb      	ldr	r3, [r7, #24]
 8003452:	015a      	lsls	r2, r3, #5
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	4413      	add	r3, r2
 8003458:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	69ba      	ldr	r2, [r7, #24]
 8003460:	0151      	lsls	r1, r2, #5
 8003462:	69fa      	ldr	r2, [r7, #28]
 8003464:	440a      	add	r2, r1
 8003466:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800346a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800346e:	6013      	str	r3, [r2, #0]
 8003470:	e00f      	b.n	8003492 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003472:	69bb      	ldr	r3, [r7, #24]
 8003474:	015a      	lsls	r2, r3, #5
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	4413      	add	r3, r2
 800347a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	69ba      	ldr	r2, [r7, #24]
 8003482:	0151      	lsls	r1, r2, #5
 8003484:	69fa      	ldr	r2, [r7, #28]
 8003486:	440a      	add	r2, r1
 8003488:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800348c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003490:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003492:	69bb      	ldr	r3, [r7, #24]
 8003494:	015a      	lsls	r2, r3, #5
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	4413      	add	r3, r2
 800349a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	69ba      	ldr	r2, [r7, #24]
 80034a2:	0151      	lsls	r1, r2, #5
 80034a4:	69fa      	ldr	r2, [r7, #28]
 80034a6:	440a      	add	r2, r1
 80034a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80034ac:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80034b0:	6013      	str	r3, [r2, #0]
 80034b2:	e12f      	b.n	8003714 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80034b4:	69bb      	ldr	r3, [r7, #24]
 80034b6:	015a      	lsls	r2, r3, #5
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	4413      	add	r3, r2
 80034bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	69ba      	ldr	r2, [r7, #24]
 80034c4:	0151      	lsls	r1, r2, #5
 80034c6:	69fa      	ldr	r2, [r7, #28]
 80034c8:	440a      	add	r2, r1
 80034ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80034ce:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80034d2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	78db      	ldrb	r3, [r3, #3]
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d015      	beq.n	8003508 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	695b      	ldr	r3, [r3, #20]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	f000 8117 	beq.w	8003714 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	781b      	ldrb	r3, [r3, #0]
 80034f2:	f003 030f 	and.w	r3, r3, #15
 80034f6:	2101      	movs	r1, #1
 80034f8:	fa01 f303 	lsl.w	r3, r1, r3
 80034fc:	69f9      	ldr	r1, [r7, #28]
 80034fe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003502:	4313      	orrs	r3, r2
 8003504:	634b      	str	r3, [r1, #52]	; 0x34
 8003506:	e105      	b.n	8003714 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003508:	69fb      	ldr	r3, [r7, #28]
 800350a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003514:	2b00      	cmp	r3, #0
 8003516:	d110      	bne.n	800353a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003518:	69bb      	ldr	r3, [r7, #24]
 800351a:	015a      	lsls	r2, r3, #5
 800351c:	69fb      	ldr	r3, [r7, #28]
 800351e:	4413      	add	r3, r2
 8003520:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	69ba      	ldr	r2, [r7, #24]
 8003528:	0151      	lsls	r1, r2, #5
 800352a:	69fa      	ldr	r2, [r7, #28]
 800352c:	440a      	add	r2, r1
 800352e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003532:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003536:	6013      	str	r3, [r2, #0]
 8003538:	e00f      	b.n	800355a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800353a:	69bb      	ldr	r3, [r7, #24]
 800353c:	015a      	lsls	r2, r3, #5
 800353e:	69fb      	ldr	r3, [r7, #28]
 8003540:	4413      	add	r3, r2
 8003542:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	69ba      	ldr	r2, [r7, #24]
 800354a:	0151      	lsls	r1, r2, #5
 800354c:	69fa      	ldr	r2, [r7, #28]
 800354e:	440a      	add	r2, r1
 8003550:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003554:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003558:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	68d9      	ldr	r1, [r3, #12]
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	781a      	ldrb	r2, [r3, #0]
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	695b      	ldr	r3, [r3, #20]
 8003566:	b298      	uxth	r0, r3
 8003568:	79fb      	ldrb	r3, [r7, #7]
 800356a:	9300      	str	r3, [sp, #0]
 800356c:	4603      	mov	r3, r0
 800356e:	68f8      	ldr	r0, [r7, #12]
 8003570:	f000 fa2b 	bl	80039ca <USB_WritePacket>
 8003574:	e0ce      	b.n	8003714 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003576:	69bb      	ldr	r3, [r7, #24]
 8003578:	015a      	lsls	r2, r3, #5
 800357a:	69fb      	ldr	r3, [r7, #28]
 800357c:	4413      	add	r3, r2
 800357e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003582:	691b      	ldr	r3, [r3, #16]
 8003584:	69ba      	ldr	r2, [r7, #24]
 8003586:	0151      	lsls	r1, r2, #5
 8003588:	69fa      	ldr	r2, [r7, #28]
 800358a:	440a      	add	r2, r1
 800358c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003590:	0cdb      	lsrs	r3, r3, #19
 8003592:	04db      	lsls	r3, r3, #19
 8003594:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003596:	69bb      	ldr	r3, [r7, #24]
 8003598:	015a      	lsls	r2, r3, #5
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	4413      	add	r3, r2
 800359e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035a2:	691b      	ldr	r3, [r3, #16]
 80035a4:	69ba      	ldr	r2, [r7, #24]
 80035a6:	0151      	lsls	r1, r2, #5
 80035a8:	69fa      	ldr	r2, [r7, #28]
 80035aa:	440a      	add	r2, r1
 80035ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80035b0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80035b4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80035b8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	695b      	ldr	r3, [r3, #20]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d126      	bne.n	8003610 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80035c2:	69bb      	ldr	r3, [r7, #24]
 80035c4:	015a      	lsls	r2, r3, #5
 80035c6:	69fb      	ldr	r3, [r7, #28]
 80035c8:	4413      	add	r3, r2
 80035ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035ce:	691a      	ldr	r2, [r3, #16]
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035d8:	69b9      	ldr	r1, [r7, #24]
 80035da:	0148      	lsls	r0, r1, #5
 80035dc:	69f9      	ldr	r1, [r7, #28]
 80035de:	4401      	add	r1, r0
 80035e0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80035e4:	4313      	orrs	r3, r2
 80035e6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80035e8:	69bb      	ldr	r3, [r7, #24]
 80035ea:	015a      	lsls	r2, r3, #5
 80035ec:	69fb      	ldr	r3, [r7, #28]
 80035ee:	4413      	add	r3, r2
 80035f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035f4:	691b      	ldr	r3, [r3, #16]
 80035f6:	69ba      	ldr	r2, [r7, #24]
 80035f8:	0151      	lsls	r1, r2, #5
 80035fa:	69fa      	ldr	r2, [r7, #28]
 80035fc:	440a      	add	r2, r1
 80035fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003602:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003606:	6113      	str	r3, [r2, #16]
 8003608:	e036      	b.n	8003678 <USB_EPStartXfer+0x3dc>
 800360a:	bf00      	nop
 800360c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	695a      	ldr	r2, [r3, #20]
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	4413      	add	r3, r2
 800361a:	1e5a      	subs	r2, r3, #1
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	fbb2 f3f3 	udiv	r3, r2, r3
 8003624:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003626:	69bb      	ldr	r3, [r7, #24]
 8003628:	015a      	lsls	r2, r3, #5
 800362a:	69fb      	ldr	r3, [r7, #28]
 800362c:	4413      	add	r3, r2
 800362e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003632:	691a      	ldr	r2, [r3, #16]
 8003634:	8afb      	ldrh	r3, [r7, #22]
 8003636:	04d9      	lsls	r1, r3, #19
 8003638:	4b39      	ldr	r3, [pc, #228]	; (8003720 <USB_EPStartXfer+0x484>)
 800363a:	400b      	ands	r3, r1
 800363c:	69b9      	ldr	r1, [r7, #24]
 800363e:	0148      	lsls	r0, r1, #5
 8003640:	69f9      	ldr	r1, [r7, #28]
 8003642:	4401      	add	r1, r0
 8003644:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003648:	4313      	orrs	r3, r2
 800364a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800364c:	69bb      	ldr	r3, [r7, #24]
 800364e:	015a      	lsls	r2, r3, #5
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	4413      	add	r3, r2
 8003654:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003658:	691a      	ldr	r2, [r3, #16]
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	8af9      	ldrh	r1, [r7, #22]
 8003660:	fb01 f303 	mul.w	r3, r1, r3
 8003664:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003668:	69b9      	ldr	r1, [r7, #24]
 800366a:	0148      	lsls	r0, r1, #5
 800366c:	69f9      	ldr	r1, [r7, #28]
 800366e:	4401      	add	r1, r0
 8003670:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003674:	4313      	orrs	r3, r2
 8003676:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003678:	79fb      	ldrb	r3, [r7, #7]
 800367a:	2b01      	cmp	r3, #1
 800367c:	d10d      	bne.n	800369a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	68db      	ldr	r3, [r3, #12]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d009      	beq.n	800369a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	68d9      	ldr	r1, [r3, #12]
 800368a:	69bb      	ldr	r3, [r7, #24]
 800368c:	015a      	lsls	r2, r3, #5
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	4413      	add	r3, r2
 8003692:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003696:	460a      	mov	r2, r1
 8003698:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	78db      	ldrb	r3, [r3, #3]
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d128      	bne.n	80036f4 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d110      	bne.n	80036d4 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80036b2:	69bb      	ldr	r3, [r7, #24]
 80036b4:	015a      	lsls	r2, r3, #5
 80036b6:	69fb      	ldr	r3, [r7, #28]
 80036b8:	4413      	add	r3, r2
 80036ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	69ba      	ldr	r2, [r7, #24]
 80036c2:	0151      	lsls	r1, r2, #5
 80036c4:	69fa      	ldr	r2, [r7, #28]
 80036c6:	440a      	add	r2, r1
 80036c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80036cc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80036d0:	6013      	str	r3, [r2, #0]
 80036d2:	e00f      	b.n	80036f4 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80036d4:	69bb      	ldr	r3, [r7, #24]
 80036d6:	015a      	lsls	r2, r3, #5
 80036d8:	69fb      	ldr	r3, [r7, #28]
 80036da:	4413      	add	r3, r2
 80036dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	69ba      	ldr	r2, [r7, #24]
 80036e4:	0151      	lsls	r1, r2, #5
 80036e6:	69fa      	ldr	r2, [r7, #28]
 80036e8:	440a      	add	r2, r1
 80036ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80036ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036f2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80036f4:	69bb      	ldr	r3, [r7, #24]
 80036f6:	015a      	lsls	r2, r3, #5
 80036f8:	69fb      	ldr	r3, [r7, #28]
 80036fa:	4413      	add	r3, r2
 80036fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	69ba      	ldr	r2, [r7, #24]
 8003704:	0151      	lsls	r1, r2, #5
 8003706:	69fa      	ldr	r2, [r7, #28]
 8003708:	440a      	add	r2, r1
 800370a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800370e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003712:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003714:	2300      	movs	r3, #0
}
 8003716:	4618      	mov	r0, r3
 8003718:	3720      	adds	r7, #32
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}
 800371e:	bf00      	nop
 8003720:	1ff80000 	.word	0x1ff80000

08003724 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003724:	b480      	push	{r7}
 8003726:	b087      	sub	sp, #28
 8003728:	af00      	add	r7, sp, #0
 800372a:	60f8      	str	r0, [r7, #12]
 800372c:	60b9      	str	r1, [r7, #8]
 800372e:	4613      	mov	r3, r2
 8003730:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	781b      	ldrb	r3, [r3, #0]
 800373a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	785b      	ldrb	r3, [r3, #1]
 8003740:	2b01      	cmp	r3, #1
 8003742:	f040 80cd 	bne.w	80038e0 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	695b      	ldr	r3, [r3, #20]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d132      	bne.n	80037b4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	015a      	lsls	r2, r3, #5
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	4413      	add	r3, r2
 8003756:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800375a:	691b      	ldr	r3, [r3, #16]
 800375c:	693a      	ldr	r2, [r7, #16]
 800375e:	0151      	lsls	r1, r2, #5
 8003760:	697a      	ldr	r2, [r7, #20]
 8003762:	440a      	add	r2, r1
 8003764:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003768:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800376c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003770:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	015a      	lsls	r2, r3, #5
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	4413      	add	r3, r2
 800377a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800377e:	691b      	ldr	r3, [r3, #16]
 8003780:	693a      	ldr	r2, [r7, #16]
 8003782:	0151      	lsls	r1, r2, #5
 8003784:	697a      	ldr	r2, [r7, #20]
 8003786:	440a      	add	r2, r1
 8003788:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800378c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003790:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	015a      	lsls	r2, r3, #5
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	4413      	add	r3, r2
 800379a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800379e:	691b      	ldr	r3, [r3, #16]
 80037a0:	693a      	ldr	r2, [r7, #16]
 80037a2:	0151      	lsls	r1, r2, #5
 80037a4:	697a      	ldr	r2, [r7, #20]
 80037a6:	440a      	add	r2, r1
 80037a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037ac:	0cdb      	lsrs	r3, r3, #19
 80037ae:	04db      	lsls	r3, r3, #19
 80037b0:	6113      	str	r3, [r2, #16]
 80037b2:	e04e      	b.n	8003852 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	015a      	lsls	r2, r3, #5
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	4413      	add	r3, r2
 80037bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037c0:	691b      	ldr	r3, [r3, #16]
 80037c2:	693a      	ldr	r2, [r7, #16]
 80037c4:	0151      	lsls	r1, r2, #5
 80037c6:	697a      	ldr	r2, [r7, #20]
 80037c8:	440a      	add	r2, r1
 80037ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037ce:	0cdb      	lsrs	r3, r3, #19
 80037d0:	04db      	lsls	r3, r3, #19
 80037d2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	015a      	lsls	r2, r3, #5
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	4413      	add	r3, r2
 80037dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037e0:	691b      	ldr	r3, [r3, #16]
 80037e2:	693a      	ldr	r2, [r7, #16]
 80037e4:	0151      	lsls	r1, r2, #5
 80037e6:	697a      	ldr	r2, [r7, #20]
 80037e8:	440a      	add	r2, r1
 80037ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037ee:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80037f2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80037f6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	695a      	ldr	r2, [r3, #20]
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	429a      	cmp	r2, r3
 8003802:	d903      	bls.n	800380c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	689a      	ldr	r2, [r3, #8]
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	015a      	lsls	r2, r3, #5
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	4413      	add	r3, r2
 8003814:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003818:	691b      	ldr	r3, [r3, #16]
 800381a:	693a      	ldr	r2, [r7, #16]
 800381c:	0151      	lsls	r1, r2, #5
 800381e:	697a      	ldr	r2, [r7, #20]
 8003820:	440a      	add	r2, r1
 8003822:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003826:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800382a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	015a      	lsls	r2, r3, #5
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	4413      	add	r3, r2
 8003834:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003838:	691a      	ldr	r2, [r3, #16]
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	695b      	ldr	r3, [r3, #20]
 800383e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003842:	6939      	ldr	r1, [r7, #16]
 8003844:	0148      	lsls	r0, r1, #5
 8003846:	6979      	ldr	r1, [r7, #20]
 8003848:	4401      	add	r1, r0
 800384a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800384e:	4313      	orrs	r3, r2
 8003850:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003852:	79fb      	ldrb	r3, [r7, #7]
 8003854:	2b01      	cmp	r3, #1
 8003856:	d11e      	bne.n	8003896 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	691b      	ldr	r3, [r3, #16]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d009      	beq.n	8003874 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	015a      	lsls	r2, r3, #5
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	4413      	add	r3, r2
 8003868:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800386c:	461a      	mov	r2, r3
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	691b      	ldr	r3, [r3, #16]
 8003872:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	015a      	lsls	r2, r3, #5
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	4413      	add	r3, r2
 800387c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	693a      	ldr	r2, [r7, #16]
 8003884:	0151      	lsls	r1, r2, #5
 8003886:	697a      	ldr	r2, [r7, #20]
 8003888:	440a      	add	r2, r1
 800388a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800388e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003892:	6013      	str	r3, [r2, #0]
 8003894:	e092      	b.n	80039bc <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	015a      	lsls	r2, r3, #5
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	4413      	add	r3, r2
 800389e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	693a      	ldr	r2, [r7, #16]
 80038a6:	0151      	lsls	r1, r2, #5
 80038a8:	697a      	ldr	r2, [r7, #20]
 80038aa:	440a      	add	r2, r1
 80038ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038b0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80038b4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	695b      	ldr	r3, [r3, #20]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d07e      	beq.n	80039bc <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	781b      	ldrb	r3, [r3, #0]
 80038ca:	f003 030f 	and.w	r3, r3, #15
 80038ce:	2101      	movs	r1, #1
 80038d0:	fa01 f303 	lsl.w	r3, r1, r3
 80038d4:	6979      	ldr	r1, [r7, #20]
 80038d6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80038da:	4313      	orrs	r3, r2
 80038dc:	634b      	str	r3, [r1, #52]	; 0x34
 80038de:	e06d      	b.n	80039bc <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	015a      	lsls	r2, r3, #5
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	4413      	add	r3, r2
 80038e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038ec:	691b      	ldr	r3, [r3, #16]
 80038ee:	693a      	ldr	r2, [r7, #16]
 80038f0:	0151      	lsls	r1, r2, #5
 80038f2:	697a      	ldr	r2, [r7, #20]
 80038f4:	440a      	add	r2, r1
 80038f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80038fa:	0cdb      	lsrs	r3, r3, #19
 80038fc:	04db      	lsls	r3, r3, #19
 80038fe:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	015a      	lsls	r2, r3, #5
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	4413      	add	r3, r2
 8003908:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800390c:	691b      	ldr	r3, [r3, #16]
 800390e:	693a      	ldr	r2, [r7, #16]
 8003910:	0151      	lsls	r1, r2, #5
 8003912:	697a      	ldr	r2, [r7, #20]
 8003914:	440a      	add	r2, r1
 8003916:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800391a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800391e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003922:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	695b      	ldr	r3, [r3, #20]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d003      	beq.n	8003934 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	689a      	ldr	r2, [r3, #8]
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	015a      	lsls	r2, r3, #5
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	4413      	add	r3, r2
 800393c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003940:	691b      	ldr	r3, [r3, #16]
 8003942:	693a      	ldr	r2, [r7, #16]
 8003944:	0151      	lsls	r1, r2, #5
 8003946:	697a      	ldr	r2, [r7, #20]
 8003948:	440a      	add	r2, r1
 800394a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800394e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003952:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	015a      	lsls	r2, r3, #5
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	4413      	add	r3, r2
 800395c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003960:	691a      	ldr	r2, [r3, #16]
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800396a:	6939      	ldr	r1, [r7, #16]
 800396c:	0148      	lsls	r0, r1, #5
 800396e:	6979      	ldr	r1, [r7, #20]
 8003970:	4401      	add	r1, r0
 8003972:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003976:	4313      	orrs	r3, r2
 8003978:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800397a:	79fb      	ldrb	r3, [r7, #7]
 800397c:	2b01      	cmp	r3, #1
 800397e:	d10d      	bne.n	800399c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d009      	beq.n	800399c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	68d9      	ldr	r1, [r3, #12]
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	015a      	lsls	r2, r3, #5
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	4413      	add	r3, r2
 8003994:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003998:	460a      	mov	r2, r1
 800399a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	015a      	lsls	r2, r3, #5
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	4413      	add	r3, r2
 80039a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	693a      	ldr	r2, [r7, #16]
 80039ac:	0151      	lsls	r1, r2, #5
 80039ae:	697a      	ldr	r2, [r7, #20]
 80039b0:	440a      	add	r2, r1
 80039b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80039b6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80039ba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80039bc:	2300      	movs	r3, #0
}
 80039be:	4618      	mov	r0, r3
 80039c0:	371c      	adds	r7, #28
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr

080039ca <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80039ca:	b480      	push	{r7}
 80039cc:	b089      	sub	sp, #36	; 0x24
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	60f8      	str	r0, [r7, #12]
 80039d2:	60b9      	str	r1, [r7, #8]
 80039d4:	4611      	mov	r1, r2
 80039d6:	461a      	mov	r2, r3
 80039d8:	460b      	mov	r3, r1
 80039da:	71fb      	strb	r3, [r7, #7]
 80039dc:	4613      	mov	r3, r2
 80039de:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80039e8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d123      	bne.n	8003a38 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80039f0:	88bb      	ldrh	r3, [r7, #4]
 80039f2:	3303      	adds	r3, #3
 80039f4:	089b      	lsrs	r3, r3, #2
 80039f6:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80039f8:	2300      	movs	r3, #0
 80039fa:	61bb      	str	r3, [r7, #24]
 80039fc:	e018      	b.n	8003a30 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80039fe:	79fb      	ldrb	r3, [r7, #7]
 8003a00:	031a      	lsls	r2, r3, #12
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	4413      	add	r3, r2
 8003a06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	69fb      	ldr	r3, [r7, #28]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003a12:	69fb      	ldr	r3, [r7, #28]
 8003a14:	3301      	adds	r3, #1
 8003a16:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003a18:	69fb      	ldr	r3, [r7, #28]
 8003a1a:	3301      	adds	r3, #1
 8003a1c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003a1e:	69fb      	ldr	r3, [r7, #28]
 8003a20:	3301      	adds	r3, #1
 8003a22:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003a24:	69fb      	ldr	r3, [r7, #28]
 8003a26:	3301      	adds	r3, #1
 8003a28:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003a2a:	69bb      	ldr	r3, [r7, #24]
 8003a2c:	3301      	adds	r3, #1
 8003a2e:	61bb      	str	r3, [r7, #24]
 8003a30:	69ba      	ldr	r2, [r7, #24]
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d3e2      	bcc.n	80039fe <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003a38:	2300      	movs	r3, #0
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3724      	adds	r7, #36	; 0x24
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr

08003a46 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003a46:	b480      	push	{r7}
 8003a48:	b08b      	sub	sp, #44	; 0x2c
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	60f8      	str	r0, [r7, #12]
 8003a4e:	60b9      	str	r1, [r7, #8]
 8003a50:	4613      	mov	r3, r2
 8003a52:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8003a5c:	88fb      	ldrh	r3, [r7, #6]
 8003a5e:	089b      	lsrs	r3, r3, #2
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8003a64:	88fb      	ldrh	r3, [r7, #6]
 8003a66:	f003 0303 	and.w	r3, r3, #3
 8003a6a:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	623b      	str	r3, [r7, #32]
 8003a70:	e014      	b.n	8003a9c <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003a72:	69bb      	ldr	r3, [r7, #24]
 8003a74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a7c:	601a      	str	r2, [r3, #0]
    pDest++;
 8003a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a80:	3301      	adds	r3, #1
 8003a82:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a86:	3301      	adds	r3, #1
 8003a88:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8c:	3301      	adds	r3, #1
 8003a8e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a92:	3301      	adds	r3, #1
 8003a94:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8003a96:	6a3b      	ldr	r3, [r7, #32]
 8003a98:	3301      	adds	r3, #1
 8003a9a:	623b      	str	r3, [r7, #32]
 8003a9c:	6a3a      	ldr	r2, [r7, #32]
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d3e6      	bcc.n	8003a72 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8003aa4:	8bfb      	ldrh	r3, [r7, #30]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d01e      	beq.n	8003ae8 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8003aae:	69bb      	ldr	r3, [r7, #24]
 8003ab0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	f107 0310 	add.w	r3, r7, #16
 8003aba:	6812      	ldr	r2, [r2, #0]
 8003abc:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8003abe:	693a      	ldr	r2, [r7, #16]
 8003ac0:	6a3b      	ldr	r3, [r7, #32]
 8003ac2:	b2db      	uxtb	r3, r3
 8003ac4:	00db      	lsls	r3, r3, #3
 8003ac6:	fa22 f303 	lsr.w	r3, r2, r3
 8003aca:	b2da      	uxtb	r2, r3
 8003acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ace:	701a      	strb	r2, [r3, #0]
      i++;
 8003ad0:	6a3b      	ldr	r3, [r7, #32]
 8003ad2:	3301      	adds	r3, #1
 8003ad4:	623b      	str	r3, [r7, #32]
      pDest++;
 8003ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad8:	3301      	adds	r3, #1
 8003ada:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8003adc:	8bfb      	ldrh	r3, [r7, #30]
 8003ade:	3b01      	subs	r3, #1
 8003ae0:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8003ae2:	8bfb      	ldrh	r3, [r7, #30]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d1ea      	bne.n	8003abe <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8003ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	372c      	adds	r7, #44	; 0x2c
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr

08003af6 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003af6:	b480      	push	{r7}
 8003af8:	b085      	sub	sp, #20
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	6078      	str	r0, [r7, #4]
 8003afe:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	781b      	ldrb	r3, [r3, #0]
 8003b08:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	785b      	ldrb	r3, [r3, #1]
 8003b0e:	2b01      	cmp	r3, #1
 8003b10:	d12c      	bne.n	8003b6c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	015a      	lsls	r2, r3, #5
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	4413      	add	r3, r2
 8003b1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	db12      	blt.n	8003b4a <USB_EPSetStall+0x54>
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d00f      	beq.n	8003b4a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	015a      	lsls	r2, r3, #5
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	4413      	add	r3, r2
 8003b32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	68ba      	ldr	r2, [r7, #8]
 8003b3a:	0151      	lsls	r1, r2, #5
 8003b3c:	68fa      	ldr	r2, [r7, #12]
 8003b3e:	440a      	add	r2, r1
 8003b40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b44:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003b48:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	015a      	lsls	r2, r3, #5
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	4413      	add	r3, r2
 8003b52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	68ba      	ldr	r2, [r7, #8]
 8003b5a:	0151      	lsls	r1, r2, #5
 8003b5c:	68fa      	ldr	r2, [r7, #12]
 8003b5e:	440a      	add	r2, r1
 8003b60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b64:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003b68:	6013      	str	r3, [r2, #0]
 8003b6a:	e02b      	b.n	8003bc4 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	015a      	lsls	r2, r3, #5
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	4413      	add	r3, r2
 8003b74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	db12      	blt.n	8003ba4 <USB_EPSetStall+0xae>
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d00f      	beq.n	8003ba4 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	015a      	lsls	r2, r3, #5
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	4413      	add	r3, r2
 8003b8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	68ba      	ldr	r2, [r7, #8]
 8003b94:	0151      	lsls	r1, r2, #5
 8003b96:	68fa      	ldr	r2, [r7, #12]
 8003b98:	440a      	add	r2, r1
 8003b9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b9e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003ba2:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	015a      	lsls	r2, r3, #5
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	4413      	add	r3, r2
 8003bac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	68ba      	ldr	r2, [r7, #8]
 8003bb4:	0151      	lsls	r1, r2, #5
 8003bb6:	68fa      	ldr	r2, [r7, #12]
 8003bb8:	440a      	add	r2, r1
 8003bba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003bbe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003bc2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003bc4:	2300      	movs	r3, #0
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3714      	adds	r7, #20
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr

08003bd2 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003bd2:	b480      	push	{r7}
 8003bd4:	b085      	sub	sp, #20
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	6078      	str	r0, [r7, #4]
 8003bda:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	781b      	ldrb	r3, [r3, #0]
 8003be4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	785b      	ldrb	r3, [r3, #1]
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d128      	bne.n	8003c40 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	015a      	lsls	r2, r3, #5
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	4413      	add	r3, r2
 8003bf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	68ba      	ldr	r2, [r7, #8]
 8003bfe:	0151      	lsls	r1, r2, #5
 8003c00:	68fa      	ldr	r2, [r7, #12]
 8003c02:	440a      	add	r2, r1
 8003c04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c08:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003c0c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	78db      	ldrb	r3, [r3, #3]
 8003c12:	2b03      	cmp	r3, #3
 8003c14:	d003      	beq.n	8003c1e <USB_EPClearStall+0x4c>
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	78db      	ldrb	r3, [r3, #3]
 8003c1a:	2b02      	cmp	r3, #2
 8003c1c:	d138      	bne.n	8003c90 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	015a      	lsls	r2, r3, #5
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	4413      	add	r3, r2
 8003c26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	68ba      	ldr	r2, [r7, #8]
 8003c2e:	0151      	lsls	r1, r2, #5
 8003c30:	68fa      	ldr	r2, [r7, #12]
 8003c32:	440a      	add	r2, r1
 8003c34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c3c:	6013      	str	r3, [r2, #0]
 8003c3e:	e027      	b.n	8003c90 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	015a      	lsls	r2, r3, #5
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	4413      	add	r3, r2
 8003c48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	68ba      	ldr	r2, [r7, #8]
 8003c50:	0151      	lsls	r1, r2, #5
 8003c52:	68fa      	ldr	r2, [r7, #12]
 8003c54:	440a      	add	r2, r1
 8003c56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c5a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003c5e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	78db      	ldrb	r3, [r3, #3]
 8003c64:	2b03      	cmp	r3, #3
 8003c66:	d003      	beq.n	8003c70 <USB_EPClearStall+0x9e>
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	78db      	ldrb	r3, [r3, #3]
 8003c6c:	2b02      	cmp	r3, #2
 8003c6e:	d10f      	bne.n	8003c90 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	015a      	lsls	r2, r3, #5
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	4413      	add	r3, r2
 8003c78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	68ba      	ldr	r2, [r7, #8]
 8003c80:	0151      	lsls	r1, r2, #5
 8003c82:	68fa      	ldr	r2, [r7, #12]
 8003c84:	440a      	add	r2, r1
 8003c86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c8e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8003c90:	2300      	movs	r3, #0
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3714      	adds	r7, #20
 8003c96:	46bd      	mov	sp, r7
 8003c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9c:	4770      	bx	lr

08003c9e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8003c9e:	b480      	push	{r7}
 8003ca0:	b085      	sub	sp, #20
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	6078      	str	r0, [r7, #4]
 8003ca6:	460b      	mov	r3, r1
 8003ca8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	68fa      	ldr	r2, [r7, #12]
 8003cb8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003cbc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003cc0:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	78fb      	ldrb	r3, [r7, #3]
 8003ccc:	011b      	lsls	r3, r3, #4
 8003cce:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8003cd2:	68f9      	ldr	r1, [r7, #12]
 8003cd4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8003cdc:	2300      	movs	r3, #0
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3714      	adds	r7, #20
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr

08003cea <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003cea:	b480      	push	{r7}
 8003cec:	b085      	sub	sp, #20
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	68fa      	ldr	r2, [r7, #12]
 8003d00:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003d04:	f023 0303 	bic.w	r3, r3, #3
 8003d08:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	68fa      	ldr	r2, [r7, #12]
 8003d14:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d18:	f023 0302 	bic.w	r3, r3, #2
 8003d1c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003d1e:	2300      	movs	r3, #0
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3714      	adds	r7, #20
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr

08003d2c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b085      	sub	sp, #20
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	68fa      	ldr	r2, [r7, #12]
 8003d42:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003d46:	f023 0303 	bic.w	r3, r3, #3
 8003d4a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	68fa      	ldr	r2, [r7, #12]
 8003d56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d5a:	f043 0302 	orr.w	r3, r3, #2
 8003d5e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003d60:	2300      	movs	r3, #0
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3714      	adds	r7, #20
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr

08003d6e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8003d6e:	b480      	push	{r7}
 8003d70:	b085      	sub	sp, #20
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	695b      	ldr	r3, [r3, #20]
 8003d7a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	699b      	ldr	r3, [r3, #24]
 8003d80:	68fa      	ldr	r2, [r7, #12]
 8003d82:	4013      	ands	r3, r2
 8003d84:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8003d86:	68fb      	ldr	r3, [r7, #12]
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3714      	adds	r7, #20
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d92:	4770      	bx	lr

08003d94 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b085      	sub	sp, #20
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003da6:	699b      	ldr	r3, [r3, #24]
 8003da8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003db0:	69db      	ldr	r3, [r3, #28]
 8003db2:	68ba      	ldr	r2, [r7, #8]
 8003db4:	4013      	ands	r3, r2
 8003db6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	0c1b      	lsrs	r3, r3, #16
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	3714      	adds	r7, #20
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr

08003dc8 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b085      	sub	sp, #20
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dda:	699b      	ldr	r3, [r3, #24]
 8003ddc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003de4:	69db      	ldr	r3, [r3, #28]
 8003de6:	68ba      	ldr	r2, [r7, #8]
 8003de8:	4013      	ands	r3, r2
 8003dea:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	b29b      	uxth	r3, r3
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	3714      	adds	r7, #20
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr

08003dfc <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b085      	sub	sp, #20
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
 8003e04:	460b      	mov	r3, r1
 8003e06:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8003e0c:	78fb      	ldrb	r3, [r7, #3]
 8003e0e:	015a      	lsls	r2, r3, #5
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	4413      	add	r3, r2
 8003e14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e22:	695b      	ldr	r3, [r3, #20]
 8003e24:	68ba      	ldr	r2, [r7, #8]
 8003e26:	4013      	ands	r3, r2
 8003e28:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8003e2a:	68bb      	ldr	r3, [r7, #8]
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3714      	adds	r7, #20
 8003e30:	46bd      	mov	sp, r7
 8003e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e36:	4770      	bx	lr

08003e38 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b087      	sub	sp, #28
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
 8003e40:	460b      	mov	r3, r1
 8003e42:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e4e:	691b      	ldr	r3, [r3, #16]
 8003e50:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e5a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8003e5c:	78fb      	ldrb	r3, [r7, #3]
 8003e5e:	f003 030f 	and.w	r3, r3, #15
 8003e62:	68fa      	ldr	r2, [r7, #12]
 8003e64:	fa22 f303 	lsr.w	r3, r2, r3
 8003e68:	01db      	lsls	r3, r3, #7
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	693a      	ldr	r2, [r7, #16]
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8003e72:	78fb      	ldrb	r3, [r7, #3]
 8003e74:	015a      	lsls	r2, r3, #5
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	4413      	add	r3, r2
 8003e7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	693a      	ldr	r2, [r7, #16]
 8003e82:	4013      	ands	r3, r2
 8003e84:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8003e86:	68bb      	ldr	r3, [r7, #8]
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	371c      	adds	r7, #28
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr

08003e94 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b083      	sub	sp, #12
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	695b      	ldr	r3, [r3, #20]
 8003ea0:	f003 0301 	and.w	r3, r3, #1
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	370c      	adds	r7, #12
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr

08003eb0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b085      	sub	sp, #20
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	68fa      	ldr	r2, [r7, #12]
 8003ec6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003eca:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003ece:	f023 0307 	bic.w	r3, r3, #7
 8003ed2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	68fa      	ldr	r2, [r7, #12]
 8003ede:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ee2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ee6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003ee8:	2300      	movs	r3, #0
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3714      	adds	r7, #20
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef4:	4770      	bx	lr
	...

08003ef8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b087      	sub	sp, #28
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	60f8      	str	r0, [r7, #12]
 8003f00:	460b      	mov	r3, r1
 8003f02:	607a      	str	r2, [r7, #4]
 8003f04:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	333c      	adds	r3, #60	; 0x3c
 8003f0e:	3304      	adds	r3, #4
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	4a26      	ldr	r2, [pc, #152]	; (8003fb0 <USB_EP0_OutStart+0xb8>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d90a      	bls.n	8003f32 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f28:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f2c:	d101      	bne.n	8003f32 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	e037      	b.n	8003fa2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f38:	461a      	mov	r2, r3
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f44:	691b      	ldr	r3, [r3, #16]
 8003f46:	697a      	ldr	r2, [r7, #20]
 8003f48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f4c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003f50:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f58:	691b      	ldr	r3, [r3, #16]
 8003f5a:	697a      	ldr	r2, [r7, #20]
 8003f5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f60:	f043 0318 	orr.w	r3, r3, #24
 8003f64:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f6c:	691b      	ldr	r3, [r3, #16]
 8003f6e:	697a      	ldr	r2, [r7, #20]
 8003f70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f74:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8003f78:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8003f7a:	7afb      	ldrb	r3, [r7, #11]
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d10f      	bne.n	8003fa0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f86:	461a      	mov	r2, r3
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	697a      	ldr	r2, [r7, #20]
 8003f96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f9a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8003f9e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003fa0:	2300      	movs	r3, #0
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	371c      	adds	r7, #28
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr
 8003fae:	bf00      	nop
 8003fb0:	4f54300a 	.word	0x4f54300a

08003fb4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b085      	sub	sp, #20
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	3301      	adds	r3, #1
 8003fc4:	60fb      	str	r3, [r7, #12]
 8003fc6:	4a13      	ldr	r2, [pc, #76]	; (8004014 <USB_CoreReset+0x60>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d901      	bls.n	8003fd0 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8003fcc:	2303      	movs	r3, #3
 8003fce:	e01a      	b.n	8004006 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	691b      	ldr	r3, [r3, #16]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	daf3      	bge.n	8003fc0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	691b      	ldr	r3, [r3, #16]
 8003fe0:	f043 0201 	orr.w	r2, r3, #1
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	3301      	adds	r3, #1
 8003fec:	60fb      	str	r3, [r7, #12]
 8003fee:	4a09      	ldr	r2, [pc, #36]	; (8004014 <USB_CoreReset+0x60>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d901      	bls.n	8003ff8 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8003ff4:	2303      	movs	r3, #3
 8003ff6:	e006      	b.n	8004006 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	691b      	ldr	r3, [r3, #16]
 8003ffc:	f003 0301 	and.w	r3, r3, #1
 8004000:	2b01      	cmp	r3, #1
 8004002:	d0f1      	beq.n	8003fe8 <USB_CoreReset+0x34>

  return HAL_OK;
 8004004:	2300      	movs	r3, #0
}
 8004006:	4618      	mov	r0, r3
 8004008:	3714      	adds	r7, #20
 800400a:	46bd      	mov	sp, r7
 800400c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004010:	4770      	bx	lr
 8004012:	bf00      	nop
 8004014:	00030d40 	.word	0x00030d40

08004018 <USBD_MIDI_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_MIDI_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b084      	sub	sp, #16
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
 8004020:	460b      	mov	r3, r1
 8004022:	70fb      	strb	r3, [r7, #3]
  USBD_MIDI_HandleTypeDef   *hmidi;

  /* Open EP OUT */
  USBD_LL_OpenEP(pdev, MIDI_OUT_EP, USBD_EP_TYPE_BULK, USB_FS_MAX_PACKET_SIZE);
 8004024:	2340      	movs	r3, #64	; 0x40
 8004026:	2202      	movs	r2, #2
 8004028:	2101      	movs	r1, #1
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f001 fe43 	bl	8005cb6 <USBD_LL_OpenEP>
  pdev->ep_out[MIDI_OUT_EP & 0xFU].is_used = 1U;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2201      	movs	r2, #1
 8004034:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178
  
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, MIDI_IN_EP, USBD_EP_TYPE_BULK, USB_FS_MAX_PACKET_SIZE);
 8004038:	2340      	movs	r3, #64	; 0x40
 800403a:	2202      	movs	r2, #2
 800403c:	2181      	movs	r1, #129	; 0x81
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f001 fe39 	bl	8005cb6 <USBD_LL_OpenEP>
  pdev->ep_in[MIDI_IN_EP & 0xFU].is_used = 1U;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2201      	movs	r2, #1
 8004048:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Allocate MIDI structure */
  pdev->pClassData = USBD_malloc(sizeof (USBD_MIDI_HandleTypeDef));
 800404a:	2082      	movs	r0, #130	; 0x82
 800404c:	f001 ff56 	bl	8005efc <USBD_static_malloc>
 8004050:	4602      	mov	r2, r0
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if(pdev->pClassData == NULL)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800405e:	2b00      	cmp	r3, #0
 8004060:	d101      	bne.n	8004066 <USBD_MIDI_Init+0x4e>
  {
    return USBD_FAIL;
 8004062:	2303      	movs	r3, #3
 8004064:	e00e      	b.n	8004084 <USBD_MIDI_Init+0x6c>
  }
  else
  {
    hmidi = (USBD_MIDI_HandleTypeDef*) pdev->pClassData;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800406c:	60fb      	str	r3, [r7, #12]

    hmidi->tx_busy = 0;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2200      	movs	r2, #0
 8004072:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Prepare Out endpoint to receive 1st packet */
    USBD_LL_PrepareReceive(pdev, MIDI_OUT_EP, hmidi->rx_buffer,
 8004076:	68fa      	ldr	r2, [r7, #12]
 8004078:	2340      	movs	r3, #64	; 0x40
 800407a:	2101      	movs	r1, #1
 800407c:	6878      	ldr	r0, [r7, #4]
 800407e:	f001 ff09 	bl	8005e94 <USBD_LL_PrepareReceive>
                           USB_FS_MAX_PACKET_SIZE);
  }
  return USBD_OK;
 8004082:	2300      	movs	r3, #0
}
 8004084:	4618      	mov	r0, r3
 8004086:	3710      	adds	r7, #16
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}

0800408c <USBD_MIDI_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_MIDI_DeInit (USBD_HandleTypeDef *pdev,
                                 uint8_t cfgidx)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b082      	sub	sp, #8
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	460b      	mov	r3, r1
 8004096:	70fb      	strb	r3, [r7, #3]

  /* Open EP OUT */
  USBD_LL_CloseEP(pdev, MIDI_OUT_EP);
 8004098:	2101      	movs	r1, #1
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f001 fe31 	bl	8005d02 <USBD_LL_CloseEP>
  pdev->ep_out[MIDI_OUT_EP & 0xFU].is_used = 0U;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2200      	movs	r2, #0
 80040a4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178
  
  /* Open EP IN */
  USBD_LL_CloseEP(pdev, MIDI_IN_EP);
 80040a8:	2181      	movs	r1, #129	; 0x81
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f001 fe29 	bl	8005d02 <USBD_LL_CloseEP>
  pdev->ep_in[MIDI_IN_EP & 0xFU].is_used = 0U;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2200      	movs	r2, #0
 80040b4:	871a      	strh	r2, [r3, #56]	; 0x38

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d009      	beq.n	80040d4 <USBD_MIDI_DeInit+0x48>
  {
    USBD_free(pdev->pClassData);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80040c6:	4618      	mov	r0, r3
 80040c8:	f001 ff26 	bl	8005f18 <USBD_static_free>
    pdev->pClassData = NULL;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2200      	movs	r2, #0
 80040d0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return USBD_OK;
 80040d4:	2300      	movs	r3, #0
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	3708      	adds	r7, #8
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}

080040de <USBD_MIDI_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_MIDI_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 80040de:	b480      	push	{r7}
 80040e0:	b083      	sub	sp, #12
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	6078      	str	r0, [r7, #4]
 80040e6:	6039      	str	r1, [r7, #0]
  return USBD_OK;
 80040e8:	2300      	movs	r3, #0
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	370c      	adds	r7, #12
 80040ee:	46bd      	mov	sp, r7
 80040f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f4:	4770      	bx	lr
	...

080040f8 <USBD_MIDI_GetCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor rx_buffer
  */
static uint8_t  *USBD_MIDI_GetCfgDesc (uint16_t *length)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b083      	sub	sp, #12
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_MIDI_CfgDesc);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2285      	movs	r2, #133	; 0x85
 8004104:	801a      	strh	r2, [r3, #0]
  return USBD_MIDI_CfgDesc;
 8004106:	4b03      	ldr	r3, [pc, #12]	; (8004114 <USBD_MIDI_GetCfgDesc+0x1c>)
}
 8004108:	4618      	mov	r0, r3
 800410a:	370c      	adds	r7, #12
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr
 8004114:	20000044 	.word	0x20000044

08004118 <USBD_MIDI_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_MIDI_DataIn (USBD_HandleTypeDef *pdev,
                              uint8_t epnum)
{
 8004118:	b480      	push	{r7}
 800411a:	b085      	sub	sp, #20
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
 8004120:	460b      	mov	r3, r1
 8004122:	70fb      	strb	r3, [r7, #3]

  USBD_MIDI_HandleTypeDef   *hmidi;
  hmidi = (USBD_MIDI_HandleTypeDef*) pdev->pClassData;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800412a:	60fb      	str	r3, [r7, #12]
  hmidi->tx_busy = 0;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2200      	movs	r2, #0
 8004130:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  
  return USBD_OK;
 8004134:	2300      	movs	r3, #0
}
 8004136:	4618      	mov	r0, r3
 8004138:	3714      	adds	r7, #20
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr

08004142 <USBD_MIDI_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_MIDI_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 8004142:	b480      	push	{r7}
 8004144:	b083      	sub	sp, #12
 8004146:	af00      	add	r7, sp, #0
 8004148:	6078      	str	r0, [r7, #4]
  return USBD_OK;
 800414a:	2300      	movs	r3, #0
}
 800414c:	4618      	mov	r0, r3
 800414e:	370c      	adds	r7, #12
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr

08004158 <USBD_MIDI_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_MIDI_EP0_TxReady (USBD_HandleTypeDef *pdev)
{
 8004158:	b480      	push	{r7}
 800415a:	b083      	sub	sp, #12
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  /* Only OUT control data are processed */
  return USBD_OK;
 8004160:	2300      	movs	r3, #0
}
 8004162:	4618      	mov	r0, r3
 8004164:	370c      	adds	r7, #12
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr

0800416e <USBD_MIDI_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_MIDI_SOF (USBD_HandleTypeDef *pdev)
{
 800416e:	b480      	push	{r7}
 8004170:	b083      	sub	sp, #12
 8004172:	af00      	add	r7, sp, #0
 8004174:	6078      	str	r0, [r7, #4]
  return USBD_OK;
 8004176:	2300      	movs	r3, #0
}
 8004178:	4618      	mov	r0, r3
 800417a:	370c      	adds	r7, #12
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr

08004184 <USBD_MIDI_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_MIDI_IsoINIncomplete (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004184:	b480      	push	{r7}
 8004186:	b083      	sub	sp, #12
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	460b      	mov	r3, r1
 800418e:	70fb      	strb	r3, [r7, #3]
  return USBD_OK;
 8004190:	2300      	movs	r3, #0
}
 8004192:	4618      	mov	r0, r3
 8004194:	370c      	adds	r7, #12
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr

0800419e <USBD_MIDI_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_MIDI_IsoOutIncomplete (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800419e:	b480      	push	{r7}
 80041a0:	b083      	sub	sp, #12
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	6078      	str	r0, [r7, #4]
 80041a6:	460b      	mov	r3, r1
 80041a8:	70fb      	strb	r3, [r7, #3]

  return USBD_OK;
 80041aa:	2300      	movs	r3, #0
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	370c      	adds	r7, #12
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr

080041b8 <USBD_MIDI_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_MIDI_DataOut (USBD_HandleTypeDef *pdev,
                              uint8_t epnum)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b086      	sub	sp, #24
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	460b      	mov	r3, r1
 80041c2:	70fb      	strb	r3, [r7, #3]
  USBD_MIDI_HandleTypeDef   *hmidi;
  hmidi = (USBD_MIDI_HandleTypeDef*) pdev->pClassData;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80041ca:	613b      	str	r3, [r7, #16]

  if (epnum == MIDI_OUT_EP)
 80041cc:	78fb      	ldrb	r3, [r7, #3]
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d121      	bne.n	8004216 <USBD_MIDI_DataOut+0x5e>
  {
    /* Get data length and actual data */
    size_t length = USBD_LL_GetRxDataSize(pdev, epnum);
 80041d2:	78fb      	ldrb	r3, [r7, #3]
 80041d4:	4619      	mov	r1, r3
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f001 fe7d 	bl	8005ed6 <USBD_LL_GetRxDataSize>
 80041dc:	60f8      	str	r0, [r7, #12]
    uint8_t  *rx_buffer = hmidi->rx_buffer;
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	60bb      	str	r3, [r7, #8]

    /* Pass data to Receive() */
    for (uint32_t i=0; i < length; i+=4) {
 80041e2:	2300      	movs	r3, #0
 80041e4:	617b      	str	r3, [r7, #20]
 80041e6:	e00c      	b.n	8004202 <USBD_MIDI_DataOut+0x4a>
        ((USBD_MIDI_ItfTypeDef *)pdev->pUserData)->Receive(rx_buffer + i, length);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	68b9      	ldr	r1, [r7, #8]
 80041f2:	697a      	ldr	r2, [r7, #20]
 80041f4:	440a      	add	r2, r1
 80041f6:	68f9      	ldr	r1, [r7, #12]
 80041f8:	4610      	mov	r0, r2
 80041fa:	4798      	blx	r3
    for (uint32_t i=0; i < length; i+=4) {
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	3304      	adds	r3, #4
 8004200:	617b      	str	r3, [r7, #20]
 8004202:	697a      	ldr	r2, [r7, #20]
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	429a      	cmp	r2, r3
 8004208:	d3ee      	bcc.n	80041e8 <USBD_MIDI_DataOut+0x30>
    }

    /* Prepare Out endpoint to receive next midi packet */
    USBD_LL_PrepareReceive(pdev, MIDI_OUT_EP, hmidi->rx_buffer,
 800420a:	693a      	ldr	r2, [r7, #16]
 800420c:	2340      	movs	r3, #64	; 0x40
 800420e:	2101      	movs	r1, #1
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	f001 fe3f 	bl	8005e94 <USBD_LL_PrepareReceive>
                           USB_FS_MAX_PACKET_SIZE);
  }

  return USBD_OK;
 8004216:	2300      	movs	r3, #0
}
 8004218:	4618      	mov	r0, r3
 800421a:	3718      	adds	r7, #24
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}

08004220 <USBD_MIDI_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor rx_buffer
*/
static uint8_t  *USBD_MIDI_GetDeviceQualifierDesc (uint16_t *length)
{
 8004220:	b480      	push	{r7}
 8004222:	b083      	sub	sp, #12
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_MIDI_DeviceQualifierDesc);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	220a      	movs	r2, #10
 800422c:	801a      	strh	r2, [r3, #0]
  return USBD_MIDI_DeviceQualifierDesc;
 800422e:	4b03      	ldr	r3, [pc, #12]	; (800423c <USBD_MIDI_GetDeviceQualifierDesc+0x1c>)
}
 8004230:	4618      	mov	r0, r3
 8004232:	370c      	adds	r7, #12
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr
 800423c:	200000cc 	.word	0x200000cc

08004240 <USBD_MIDI_RegisterInterface>:
* @param  fops: MIDI interface callback
* @retval status
*/
uint8_t  USBD_MIDI_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                        USBD_MIDI_ItfTypeDef *fops)
{
 8004240:	b480      	push	{r7}
 8004242:	b083      	sub	sp, #12
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
 8004248:	6039      	str	r1, [r7, #0]
  if(fops != NULL)
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d003      	beq.n	8004258 <USBD_MIDI_RegisterInterface+0x18>
  {
    pdev->pUserData= fops;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	683a      	ldr	r2, [r7, #0]
 8004254:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  }
  return USBD_OK;
 8004258:	2300      	movs	r3, #0
}
 800425a:	4618      	mov	r0, r3
 800425c:	370c      	adds	r7, #12
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr

08004266 <USBD_MIDI_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_MIDI_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *buff,
                                uint16_t length)
{
 8004266:	b580      	push	{r7, lr}
 8004268:	b086      	sub	sp, #24
 800426a:	af00      	add	r7, sp, #0
 800426c:	60f8      	str	r0, [r7, #12]
 800426e:	60b9      	str	r1, [r7, #8]
 8004270:	4613      	mov	r3, r2
 8004272:	80fb      	strh	r3, [r7, #6]
  USBD_MIDI_HandleTypeDef   *hmidi = (USBD_MIDI_HandleTypeDef*) pdev->pClassData;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800427a:	617b      	str	r3, [r7, #20]

  // hmidi->tx_buffer = buff;
  memcpy(hmidi->tx_buffer, buff, length);
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	3340      	adds	r3, #64	; 0x40
 8004280:	88fa      	ldrh	r2, [r7, #6]
 8004282:	68b9      	ldr	r1, [r7, #8]
 8004284:	4618      	mov	r0, r3
 8004286:	f001 fea1 	bl	8005fcc <memcpy>
  hmidi->tx_length = length;
 800428a:	88fb      	ldrh	r3, [r7, #6]
 800428c:	b2da      	uxtb	r2, r3
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return USBD_OK;
 8004294:	2300      	movs	r3, #0
}
 8004296:	4618      	mov	r0, r3
 8004298:	3718      	adds	r7, #24
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}

0800429e <USBD_MIDI_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_MIDI_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800429e:	b580      	push	{r7, lr}
 80042a0:	b084      	sub	sp, #16
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	6078      	str	r0, [r7, #4]
  USBD_MIDI_HandleTypeDef   *hmidi = (USBD_MIDI_HandleTypeDef*) pdev->pClassData;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80042ac:	60fb      	str	r3, [r7, #12]

  if(hmidi->tx_busy == 0) {
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d115      	bne.n	80042e4 <USBD_MIDI_TransmitPacket+0x46>

    hmidi->tx_busy = 1;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2201      	movs	r2, #1
 80042bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    pdev->ep_in[MIDI_IN_EP & 0xFU].total_length = hmidi->tx_length;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80042c6:	461a      	mov	r2, r3
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit */
    USBD_LL_Transmit(pdev, MIDI_IN_EP, hmidi->tx_buffer,
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f103 0240 	add.w	r2, r3, #64	; 0x40
                     (uint8_t)hmidi->tx_length);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
    USBD_LL_Transmit(pdev, MIDI_IN_EP, hmidi->tx_buffer,
 80042d8:	2181      	movs	r1, #129	; 0x81
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f001 fdb9 	bl	8005e52 <USBD_LL_Transmit>
    
    return USBD_OK;
 80042e0:	2300      	movs	r3, #0
 80042e2:	e000      	b.n	80042e6 <USBD_MIDI_TransmitPacket+0x48>
  } else {
    return USBD_BUSY;
 80042e4:	2301      	movs	r3, #1
  }
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3710      	adds	r7, #16
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}

080042ee <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80042ee:	b580      	push	{r7, lr}
 80042f0:	b086      	sub	sp, #24
 80042f2:	af00      	add	r7, sp, #0
 80042f4:	60f8      	str	r0, [r7, #12]
 80042f6:	60b9      	str	r1, [r7, #8]
 80042f8:	4613      	mov	r3, r2
 80042fa:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d101      	bne.n	8004306 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8004302:	2303      	movs	r3, #3
 8004304:	e01f      	b.n	8004346 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2200      	movs	r2, #0
 800430a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2200      	movs	r2, #0
 8004312:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2200      	movs	r2, #0
 800431a:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d003      	beq.n	800432c <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	68ba      	ldr	r2, [r7, #8]
 8004328:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2201      	movs	r2, #1
 8004330:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	79fa      	ldrb	r2, [r7, #7]
 8004338:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800433a:	68f8      	ldr	r0, [r7, #12]
 800433c:	f001 fc54 	bl	8005be8 <USBD_LL_Init>
 8004340:	4603      	mov	r3, r0
 8004342:	75fb      	strb	r3, [r7, #23]

  return ret;
 8004344:	7dfb      	ldrb	r3, [r7, #23]
}
 8004346:	4618      	mov	r0, r3
 8004348:	3718      	adds	r7, #24
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}

0800434e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800434e:	b580      	push	{r7, lr}
 8004350:	b084      	sub	sp, #16
 8004352:	af00      	add	r7, sp, #0
 8004354:	6078      	str	r0, [r7, #4]
 8004356:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8004358:	2300      	movs	r3, #0
 800435a:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d101      	bne.n	8004366 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8004362:	2303      	movs	r3, #3
 8004364:	e016      	b.n	8004394 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	683a      	ldr	r2, [r7, #0]
 800436a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004376:	2b00      	cmp	r3, #0
 8004378:	d00b      	beq.n	8004392 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004382:	f107 020e 	add.w	r2, r7, #14
 8004386:	4610      	mov	r0, r2
 8004388:	4798      	blx	r3
 800438a:	4602      	mov	r2, r0
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8004392:	2300      	movs	r3, #0
}
 8004394:	4618      	mov	r0, r3
 8004396:	3710      	adds	r7, #16
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}

0800439c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b082      	sub	sp, #8
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f001 fc6b 	bl	8005c80 <USBD_LL_Start>
 80043aa:	4603      	mov	r3, r0
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	3708      	adds	r7, #8
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}

080043b4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b083      	sub	sp, #12
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80043bc:	2300      	movs	r3, #0
}
 80043be:	4618      	mov	r0, r3
 80043c0:	370c      	adds	r7, #12
 80043c2:	46bd      	mov	sp, r7
 80043c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c8:	4770      	bx	lr

080043ca <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80043ca:	b580      	push	{r7, lr}
 80043cc:	b084      	sub	sp, #16
 80043ce:	af00      	add	r7, sp, #0
 80043d0:	6078      	str	r0, [r7, #4]
 80043d2:	460b      	mov	r3, r1
 80043d4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80043d6:	2303      	movs	r3, #3
 80043d8:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d009      	beq.n	80043f8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	78fa      	ldrb	r2, [r7, #3]
 80043ee:	4611      	mov	r1, r2
 80043f0:	6878      	ldr	r0, [r7, #4]
 80043f2:	4798      	blx	r3
 80043f4:	4603      	mov	r3, r0
 80043f6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80043f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3710      	adds	r7, #16
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}

08004402 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004402:	b580      	push	{r7, lr}
 8004404:	b082      	sub	sp, #8
 8004406:	af00      	add	r7, sp, #0
 8004408:	6078      	str	r0, [r7, #4]
 800440a:	460b      	mov	r3, r1
 800440c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004414:	2b00      	cmp	r3, #0
 8004416:	d007      	beq.n	8004428 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	78fa      	ldrb	r2, [r7, #3]
 8004422:	4611      	mov	r1, r2
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	4798      	blx	r3
  }

  return USBD_OK;
 8004428:	2300      	movs	r3, #0
}
 800442a:	4618      	mov	r0, r3
 800442c:	3708      	adds	r7, #8
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}

08004432 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004432:	b580      	push	{r7, lr}
 8004434:	b084      	sub	sp, #16
 8004436:	af00      	add	r7, sp, #0
 8004438:	6078      	str	r0, [r7, #4]
 800443a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004442:	6839      	ldr	r1, [r7, #0]
 8004444:	4618      	mov	r0, r3
 8004446:	f000 ff8f 	bl	8005368 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2201      	movs	r2, #1
 800444e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8004458:	461a      	mov	r2, r3
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004466:	f003 031f 	and.w	r3, r3, #31
 800446a:	2b02      	cmp	r3, #2
 800446c:	d01a      	beq.n	80044a4 <USBD_LL_SetupStage+0x72>
 800446e:	2b02      	cmp	r3, #2
 8004470:	d822      	bhi.n	80044b8 <USBD_LL_SetupStage+0x86>
 8004472:	2b00      	cmp	r3, #0
 8004474:	d002      	beq.n	800447c <USBD_LL_SetupStage+0x4a>
 8004476:	2b01      	cmp	r3, #1
 8004478:	d00a      	beq.n	8004490 <USBD_LL_SetupStage+0x5e>
 800447a:	e01d      	b.n	80044b8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004482:	4619      	mov	r1, r3
 8004484:	6878      	ldr	r0, [r7, #4]
 8004486:	f000 fa61 	bl	800494c <USBD_StdDevReq>
 800448a:	4603      	mov	r3, r0
 800448c:	73fb      	strb	r3, [r7, #15]
      break;
 800448e:	e020      	b.n	80044d2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004496:	4619      	mov	r1, r3
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	f000 fac5 	bl	8004a28 <USBD_StdItfReq>
 800449e:	4603      	mov	r3, r0
 80044a0:	73fb      	strb	r3, [r7, #15]
      break;
 80044a2:	e016      	b.n	80044d2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80044aa:	4619      	mov	r1, r3
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	f000 fb04 	bl	8004aba <USBD_StdEPReq>
 80044b2:	4603      	mov	r3, r0
 80044b4:	73fb      	strb	r3, [r7, #15]
      break;
 80044b6:	e00c      	b.n	80044d2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80044be:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80044c2:	b2db      	uxtb	r3, r3
 80044c4:	4619      	mov	r1, r3
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f001 fc3a 	bl	8005d40 <USBD_LL_StallEP>
 80044cc:	4603      	mov	r3, r0
 80044ce:	73fb      	strb	r3, [r7, #15]
      break;
 80044d0:	bf00      	nop
  }

  return ret;
 80044d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	3710      	adds	r7, #16
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}

080044dc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b086      	sub	sp, #24
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	60f8      	str	r0, [r7, #12]
 80044e4:	460b      	mov	r3, r1
 80044e6:	607a      	str	r2, [r7, #4]
 80044e8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80044ea:	7afb      	ldrb	r3, [r7, #11]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d138      	bne.n	8004562 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80044f6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80044fe:	2b03      	cmp	r3, #3
 8004500:	d14a      	bne.n	8004598 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	689a      	ldr	r2, [r3, #8]
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	68db      	ldr	r3, [r3, #12]
 800450a:	429a      	cmp	r2, r3
 800450c:	d913      	bls.n	8004536 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	689a      	ldr	r2, [r3, #8]
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	68db      	ldr	r3, [r3, #12]
 8004516:	1ad2      	subs	r2, r2, r3
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	68da      	ldr	r2, [r3, #12]
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	4293      	cmp	r3, r2
 8004526:	bf28      	it	cs
 8004528:	4613      	movcs	r3, r2
 800452a:	461a      	mov	r2, r3
 800452c:	6879      	ldr	r1, [r7, #4]
 800452e:	68f8      	ldr	r0, [r7, #12]
 8004530:	f000 fff1 	bl	8005516 <USBD_CtlContinueRx>
 8004534:	e030      	b.n	8004598 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800453c:	b2db      	uxtb	r3, r3
 800453e:	2b03      	cmp	r3, #3
 8004540:	d10b      	bne.n	800455a <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004548:	691b      	ldr	r3, [r3, #16]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d005      	beq.n	800455a <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004554:	691b      	ldr	r3, [r3, #16]
 8004556:	68f8      	ldr	r0, [r7, #12]
 8004558:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800455a:	68f8      	ldr	r0, [r7, #12]
 800455c:	f000 ffec 	bl	8005538 <USBD_CtlSendStatus>
 8004560:	e01a      	b.n	8004598 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004568:	b2db      	uxtb	r3, r3
 800456a:	2b03      	cmp	r3, #3
 800456c:	d114      	bne.n	8004598 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004574:	699b      	ldr	r3, [r3, #24]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d00e      	beq.n	8004598 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004580:	699b      	ldr	r3, [r3, #24]
 8004582:	7afa      	ldrb	r2, [r7, #11]
 8004584:	4611      	mov	r1, r2
 8004586:	68f8      	ldr	r0, [r7, #12]
 8004588:	4798      	blx	r3
 800458a:	4603      	mov	r3, r0
 800458c:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800458e:	7dfb      	ldrb	r3, [r7, #23]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d001      	beq.n	8004598 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8004594:	7dfb      	ldrb	r3, [r7, #23]
 8004596:	e000      	b.n	800459a <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8004598:	2300      	movs	r3, #0
}
 800459a:	4618      	mov	r0, r3
 800459c:	3718      	adds	r7, #24
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}

080045a2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80045a2:	b580      	push	{r7, lr}
 80045a4:	b086      	sub	sp, #24
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	60f8      	str	r0, [r7, #12]
 80045aa:	460b      	mov	r3, r1
 80045ac:	607a      	str	r2, [r7, #4]
 80045ae:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80045b0:	7afb      	ldrb	r3, [r7, #11]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d16b      	bne.n	800468e <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	3314      	adds	r3, #20
 80045ba:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80045c2:	2b02      	cmp	r3, #2
 80045c4:	d156      	bne.n	8004674 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	689a      	ldr	r2, [r3, #8]
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	68db      	ldr	r3, [r3, #12]
 80045ce:	429a      	cmp	r2, r3
 80045d0:	d914      	bls.n	80045fc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	689a      	ldr	r2, [r3, #8]
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	68db      	ldr	r3, [r3, #12]
 80045da:	1ad2      	subs	r2, r2, r3
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	461a      	mov	r2, r3
 80045e6:	6879      	ldr	r1, [r7, #4]
 80045e8:	68f8      	ldr	r0, [r7, #12]
 80045ea:	f000 ff83 	bl	80054f4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80045ee:	2300      	movs	r3, #0
 80045f0:	2200      	movs	r2, #0
 80045f2:	2100      	movs	r1, #0
 80045f4:	68f8      	ldr	r0, [r7, #12]
 80045f6:	f001 fc4d 	bl	8005e94 <USBD_LL_PrepareReceive>
 80045fa:	e03b      	b.n	8004674 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	68da      	ldr	r2, [r3, #12]
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	429a      	cmp	r2, r3
 8004606:	d11c      	bne.n	8004642 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	685a      	ldr	r2, [r3, #4]
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8004610:	429a      	cmp	r2, r3
 8004612:	d316      	bcc.n	8004642 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	685a      	ldr	r2, [r3, #4]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800461e:	429a      	cmp	r2, r3
 8004620:	d20f      	bcs.n	8004642 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004622:	2200      	movs	r2, #0
 8004624:	2100      	movs	r1, #0
 8004626:	68f8      	ldr	r0, [r7, #12]
 8004628:	f000 ff64 	bl	80054f4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2200      	movs	r2, #0
 8004630:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004634:	2300      	movs	r3, #0
 8004636:	2200      	movs	r2, #0
 8004638:	2100      	movs	r1, #0
 800463a:	68f8      	ldr	r0, [r7, #12]
 800463c:	f001 fc2a 	bl	8005e94 <USBD_LL_PrepareReceive>
 8004640:	e018      	b.n	8004674 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004648:	b2db      	uxtb	r3, r3
 800464a:	2b03      	cmp	r3, #3
 800464c:	d10b      	bne.n	8004666 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004654:	68db      	ldr	r3, [r3, #12]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d005      	beq.n	8004666 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004660:	68db      	ldr	r3, [r3, #12]
 8004662:	68f8      	ldr	r0, [r7, #12]
 8004664:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8004666:	2180      	movs	r1, #128	; 0x80
 8004668:	68f8      	ldr	r0, [r7, #12]
 800466a:	f001 fb69 	bl	8005d40 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800466e:	68f8      	ldr	r0, [r7, #12]
 8004670:	f000 ff75 	bl	800555e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800467a:	2b01      	cmp	r3, #1
 800467c:	d122      	bne.n	80046c4 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800467e:	68f8      	ldr	r0, [r7, #12]
 8004680:	f7ff fe98 	bl	80043b4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2200      	movs	r2, #0
 8004688:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800468c:	e01a      	b.n	80046c4 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004694:	b2db      	uxtb	r3, r3
 8004696:	2b03      	cmp	r3, #3
 8004698:	d114      	bne.n	80046c4 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80046a0:	695b      	ldr	r3, [r3, #20]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d00e      	beq.n	80046c4 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80046ac:	695b      	ldr	r3, [r3, #20]
 80046ae:	7afa      	ldrb	r2, [r7, #11]
 80046b0:	4611      	mov	r1, r2
 80046b2:	68f8      	ldr	r0, [r7, #12]
 80046b4:	4798      	blx	r3
 80046b6:	4603      	mov	r3, r0
 80046b8:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80046ba:	7dfb      	ldrb	r3, [r7, #23]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d001      	beq.n	80046c4 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80046c0:	7dfb      	ldrb	r3, [r7, #23]
 80046c2:	e000      	b.n	80046c6 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80046c4:	2300      	movs	r3, #0
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3718      	adds	r7, #24
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}

080046ce <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80046ce:	b580      	push	{r7, lr}
 80046d0:	b082      	sub	sp, #8
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2201      	movs	r2, #1
 80046da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2200      	movs	r2, #0
 80046e2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2200      	movs	r2, #0
 80046ea:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2200      	movs	r2, #0
 80046f0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d101      	bne.n	8004702 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80046fe:	2303      	movs	r3, #3
 8004700:	e02f      	b.n	8004762 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004708:	2b00      	cmp	r3, #0
 800470a:	d00f      	beq.n	800472c <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d009      	beq.n	800472c <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	687a      	ldr	r2, [r7, #4]
 8004722:	6852      	ldr	r2, [r2, #4]
 8004724:	b2d2      	uxtb	r2, r2
 8004726:	4611      	mov	r1, r2
 8004728:	6878      	ldr	r0, [r7, #4]
 800472a:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800472c:	2340      	movs	r3, #64	; 0x40
 800472e:	2200      	movs	r2, #0
 8004730:	2100      	movs	r1, #0
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f001 fabf 	bl	8005cb6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2201      	movs	r2, #1
 800473c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2240      	movs	r2, #64	; 0x40
 8004744:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004748:	2340      	movs	r3, #64	; 0x40
 800474a:	2200      	movs	r2, #0
 800474c:	2180      	movs	r1, #128	; 0x80
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f001 fab1 	bl	8005cb6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2201      	movs	r2, #1
 8004758:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2240      	movs	r2, #64	; 0x40
 800475e:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8004760:	2300      	movs	r3, #0
}
 8004762:	4618      	mov	r0, r3
 8004764:	3708      	adds	r7, #8
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}

0800476a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800476a:	b480      	push	{r7}
 800476c:	b083      	sub	sp, #12
 800476e:	af00      	add	r7, sp, #0
 8004770:	6078      	str	r0, [r7, #4]
 8004772:	460b      	mov	r3, r1
 8004774:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	78fa      	ldrb	r2, [r7, #3]
 800477a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800477c:	2300      	movs	r3, #0
}
 800477e:	4618      	mov	r0, r3
 8004780:	370c      	adds	r7, #12
 8004782:	46bd      	mov	sp, r7
 8004784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004788:	4770      	bx	lr

0800478a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800478a:	b480      	push	{r7}
 800478c:	b083      	sub	sp, #12
 800478e:	af00      	add	r7, sp, #0
 8004790:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004798:	b2da      	uxtb	r2, r3
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2204      	movs	r2, #4
 80047a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80047a8:	2300      	movs	r3, #0
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	370c      	adds	r7, #12
 80047ae:	46bd      	mov	sp, r7
 80047b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b4:	4770      	bx	lr

080047b6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80047b6:	b480      	push	{r7}
 80047b8:	b083      	sub	sp, #12
 80047ba:	af00      	add	r7, sp, #0
 80047bc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	2b04      	cmp	r3, #4
 80047c8:	d106      	bne.n	80047d8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80047d0:	b2da      	uxtb	r2, r3
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80047d8:	2300      	movs	r3, #0
}
 80047da:	4618      	mov	r0, r3
 80047dc:	370c      	adds	r7, #12
 80047de:	46bd      	mov	sp, r7
 80047e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e4:	4770      	bx	lr

080047e6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80047e6:	b580      	push	{r7, lr}
 80047e8:	b082      	sub	sp, #8
 80047ea:	af00      	add	r7, sp, #0
 80047ec:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d101      	bne.n	80047fc <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80047f8:	2303      	movs	r3, #3
 80047fa:	e012      	b.n	8004822 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004802:	b2db      	uxtb	r3, r3
 8004804:	2b03      	cmp	r3, #3
 8004806:	d10b      	bne.n	8004820 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800480e:	69db      	ldr	r3, [r3, #28]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d005      	beq.n	8004820 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800481a:	69db      	ldr	r3, [r3, #28]
 800481c:	6878      	ldr	r0, [r7, #4]
 800481e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004820:	2300      	movs	r3, #0
}
 8004822:	4618      	mov	r0, r3
 8004824:	3708      	adds	r7, #8
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}

0800482a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800482a:	b580      	push	{r7, lr}
 800482c:	b082      	sub	sp, #8
 800482e:	af00      	add	r7, sp, #0
 8004830:	6078      	str	r0, [r7, #4]
 8004832:	460b      	mov	r3, r1
 8004834:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800483c:	2b00      	cmp	r3, #0
 800483e:	d101      	bne.n	8004844 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8004840:	2303      	movs	r3, #3
 8004842:	e014      	b.n	800486e <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800484a:	b2db      	uxtb	r3, r3
 800484c:	2b03      	cmp	r3, #3
 800484e:	d10d      	bne.n	800486c <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004856:	6a1b      	ldr	r3, [r3, #32]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d007      	beq.n	800486c <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004862:	6a1b      	ldr	r3, [r3, #32]
 8004864:	78fa      	ldrb	r2, [r7, #3]
 8004866:	4611      	mov	r1, r2
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800486c:	2300      	movs	r3, #0
}
 800486e:	4618      	mov	r0, r3
 8004870:	3708      	adds	r7, #8
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}

08004876 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8004876:	b580      	push	{r7, lr}
 8004878:	b082      	sub	sp, #8
 800487a:	af00      	add	r7, sp, #0
 800487c:	6078      	str	r0, [r7, #4]
 800487e:	460b      	mov	r3, r1
 8004880:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004888:	2b00      	cmp	r3, #0
 800488a:	d101      	bne.n	8004890 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800488c:	2303      	movs	r3, #3
 800488e:	e014      	b.n	80048ba <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004896:	b2db      	uxtb	r3, r3
 8004898:	2b03      	cmp	r3, #3
 800489a:	d10d      	bne.n	80048b8 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80048a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d007      	beq.n	80048b8 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80048ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b0:	78fa      	ldrb	r2, [r7, #3]
 80048b2:	4611      	mov	r1, r2
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80048b8:	2300      	movs	r3, #0
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	3708      	adds	r7, #8
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}

080048c2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80048c2:	b480      	push	{r7}
 80048c4:	b083      	sub	sp, #12
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80048ca:	2300      	movs	r3, #0
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	370c      	adds	r7, #12
 80048d0:	46bd      	mov	sp, r7
 80048d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d6:	4770      	bx	lr

080048d8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b082      	sub	sp, #8
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2201      	movs	r2, #1
 80048e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d009      	beq.n	8004906 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	687a      	ldr	r2, [r7, #4]
 80048fc:	6852      	ldr	r2, [r2, #4]
 80048fe:	b2d2      	uxtb	r2, r2
 8004900:	4611      	mov	r1, r2
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	4798      	blx	r3
  }

  return USBD_OK;
 8004906:	2300      	movs	r3, #0
}
 8004908:	4618      	mov	r0, r3
 800490a:	3708      	adds	r7, #8
 800490c:	46bd      	mov	sp, r7
 800490e:	bd80      	pop	{r7, pc}

08004910 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8004910:	b480      	push	{r7}
 8004912:	b087      	sub	sp, #28
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	781b      	ldrb	r3, [r3, #0]
 8004920:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	3301      	adds	r3, #1
 8004926:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	781b      	ldrb	r3, [r3, #0]
 800492c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800492e:	8a3b      	ldrh	r3, [r7, #16]
 8004930:	021b      	lsls	r3, r3, #8
 8004932:	b21a      	sxth	r2, r3
 8004934:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004938:	4313      	orrs	r3, r2
 800493a:	b21b      	sxth	r3, r3
 800493c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800493e:	89fb      	ldrh	r3, [r7, #14]
}
 8004940:	4618      	mov	r0, r3
 8004942:	371c      	adds	r7, #28
 8004944:	46bd      	mov	sp, r7
 8004946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494a:	4770      	bx	lr

0800494c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b084      	sub	sp, #16
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
 8004954:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8004956:	2300      	movs	r3, #0
 8004958:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	781b      	ldrb	r3, [r3, #0]
 800495e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004962:	2b40      	cmp	r3, #64	; 0x40
 8004964:	d005      	beq.n	8004972 <USBD_StdDevReq+0x26>
 8004966:	2b40      	cmp	r3, #64	; 0x40
 8004968:	d853      	bhi.n	8004a12 <USBD_StdDevReq+0xc6>
 800496a:	2b00      	cmp	r3, #0
 800496c:	d00b      	beq.n	8004986 <USBD_StdDevReq+0x3a>
 800496e:	2b20      	cmp	r3, #32
 8004970:	d14f      	bne.n	8004a12 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	6839      	ldr	r1, [r7, #0]
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	4798      	blx	r3
 8004980:	4603      	mov	r3, r0
 8004982:	73fb      	strb	r3, [r7, #15]
      break;
 8004984:	e04a      	b.n	8004a1c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	785b      	ldrb	r3, [r3, #1]
 800498a:	2b09      	cmp	r3, #9
 800498c:	d83b      	bhi.n	8004a06 <USBD_StdDevReq+0xba>
 800498e:	a201      	add	r2, pc, #4	; (adr r2, 8004994 <USBD_StdDevReq+0x48>)
 8004990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004994:	080049e9 	.word	0x080049e9
 8004998:	080049fd 	.word	0x080049fd
 800499c:	08004a07 	.word	0x08004a07
 80049a0:	080049f3 	.word	0x080049f3
 80049a4:	08004a07 	.word	0x08004a07
 80049a8:	080049c7 	.word	0x080049c7
 80049ac:	080049bd 	.word	0x080049bd
 80049b0:	08004a07 	.word	0x08004a07
 80049b4:	080049df 	.word	0x080049df
 80049b8:	080049d1 	.word	0x080049d1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80049bc:	6839      	ldr	r1, [r7, #0]
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f000 f9de 	bl	8004d80 <USBD_GetDescriptor>
          break;
 80049c4:	e024      	b.n	8004a10 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80049c6:	6839      	ldr	r1, [r7, #0]
 80049c8:	6878      	ldr	r0, [r7, #4]
 80049ca:	f000 fb43 	bl	8005054 <USBD_SetAddress>
          break;
 80049ce:	e01f      	b.n	8004a10 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80049d0:	6839      	ldr	r1, [r7, #0]
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f000 fb82 	bl	80050dc <USBD_SetConfig>
 80049d8:	4603      	mov	r3, r0
 80049da:	73fb      	strb	r3, [r7, #15]
          break;
 80049dc:	e018      	b.n	8004a10 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80049de:	6839      	ldr	r1, [r7, #0]
 80049e0:	6878      	ldr	r0, [r7, #4]
 80049e2:	f000 fc21 	bl	8005228 <USBD_GetConfig>
          break;
 80049e6:	e013      	b.n	8004a10 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80049e8:	6839      	ldr	r1, [r7, #0]
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f000 fc52 	bl	8005294 <USBD_GetStatus>
          break;
 80049f0:	e00e      	b.n	8004a10 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80049f2:	6839      	ldr	r1, [r7, #0]
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	f000 fc81 	bl	80052fc <USBD_SetFeature>
          break;
 80049fa:	e009      	b.n	8004a10 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80049fc:	6839      	ldr	r1, [r7, #0]
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f000 fc90 	bl	8005324 <USBD_ClrFeature>
          break;
 8004a04:	e004      	b.n	8004a10 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8004a06:	6839      	ldr	r1, [r7, #0]
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	f000 fce7 	bl	80053dc <USBD_CtlError>
          break;
 8004a0e:	bf00      	nop
      }
      break;
 8004a10:	e004      	b.n	8004a1c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8004a12:	6839      	ldr	r1, [r7, #0]
 8004a14:	6878      	ldr	r0, [r7, #4]
 8004a16:	f000 fce1 	bl	80053dc <USBD_CtlError>
      break;
 8004a1a:	bf00      	nop
  }

  return ret;
 8004a1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	3710      	adds	r7, #16
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}
 8004a26:	bf00      	nop

08004a28 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b084      	sub	sp, #16
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8004a32:	2300      	movs	r3, #0
 8004a34:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	781b      	ldrb	r3, [r3, #0]
 8004a3a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004a3e:	2b40      	cmp	r3, #64	; 0x40
 8004a40:	d005      	beq.n	8004a4e <USBD_StdItfReq+0x26>
 8004a42:	2b40      	cmp	r3, #64	; 0x40
 8004a44:	d82f      	bhi.n	8004aa6 <USBD_StdItfReq+0x7e>
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d001      	beq.n	8004a4e <USBD_StdItfReq+0x26>
 8004a4a:	2b20      	cmp	r3, #32
 8004a4c:	d12b      	bne.n	8004aa6 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004a54:	b2db      	uxtb	r3, r3
 8004a56:	3b01      	subs	r3, #1
 8004a58:	2b02      	cmp	r3, #2
 8004a5a:	d81d      	bhi.n	8004a98 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	889b      	ldrh	r3, [r3, #4]
 8004a60:	b2db      	uxtb	r3, r3
 8004a62:	2b01      	cmp	r3, #1
 8004a64:	d813      	bhi.n	8004a8e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	6839      	ldr	r1, [r7, #0]
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	4798      	blx	r3
 8004a74:	4603      	mov	r3, r0
 8004a76:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	88db      	ldrh	r3, [r3, #6]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d110      	bne.n	8004aa2 <USBD_StdItfReq+0x7a>
 8004a80:	7bfb      	ldrb	r3, [r7, #15]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d10d      	bne.n	8004aa2 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f000 fd56 	bl	8005538 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8004a8c:	e009      	b.n	8004aa2 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8004a8e:	6839      	ldr	r1, [r7, #0]
 8004a90:	6878      	ldr	r0, [r7, #4]
 8004a92:	f000 fca3 	bl	80053dc <USBD_CtlError>
          break;
 8004a96:	e004      	b.n	8004aa2 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8004a98:	6839      	ldr	r1, [r7, #0]
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f000 fc9e 	bl	80053dc <USBD_CtlError>
          break;
 8004aa0:	e000      	b.n	8004aa4 <USBD_StdItfReq+0x7c>
          break;
 8004aa2:	bf00      	nop
      }
      break;
 8004aa4:	e004      	b.n	8004ab0 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8004aa6:	6839      	ldr	r1, [r7, #0]
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f000 fc97 	bl	80053dc <USBD_CtlError>
      break;
 8004aae:	bf00      	nop
  }

  return ret;
 8004ab0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3710      	adds	r7, #16
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}

08004aba <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004aba:	b580      	push	{r7, lr}
 8004abc:	b084      	sub	sp, #16
 8004abe:	af00      	add	r7, sp, #0
 8004ac0:	6078      	str	r0, [r7, #4]
 8004ac2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	889b      	ldrh	r3, [r3, #4]
 8004acc:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	781b      	ldrb	r3, [r3, #0]
 8004ad2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004ad6:	2b40      	cmp	r3, #64	; 0x40
 8004ad8:	d007      	beq.n	8004aea <USBD_StdEPReq+0x30>
 8004ada:	2b40      	cmp	r3, #64	; 0x40
 8004adc:	f200 8145 	bhi.w	8004d6a <USBD_StdEPReq+0x2b0>
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d00c      	beq.n	8004afe <USBD_StdEPReq+0x44>
 8004ae4:	2b20      	cmp	r3, #32
 8004ae6:	f040 8140 	bne.w	8004d6a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	6839      	ldr	r1, [r7, #0]
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	4798      	blx	r3
 8004af8:	4603      	mov	r3, r0
 8004afa:	73fb      	strb	r3, [r7, #15]
      break;
 8004afc:	e13a      	b.n	8004d74 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	785b      	ldrb	r3, [r3, #1]
 8004b02:	2b03      	cmp	r3, #3
 8004b04:	d007      	beq.n	8004b16 <USBD_StdEPReq+0x5c>
 8004b06:	2b03      	cmp	r3, #3
 8004b08:	f300 8129 	bgt.w	8004d5e <USBD_StdEPReq+0x2a4>
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d07f      	beq.n	8004c10 <USBD_StdEPReq+0x156>
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	d03c      	beq.n	8004b8e <USBD_StdEPReq+0xd4>
 8004b14:	e123      	b.n	8004d5e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004b1c:	b2db      	uxtb	r3, r3
 8004b1e:	2b02      	cmp	r3, #2
 8004b20:	d002      	beq.n	8004b28 <USBD_StdEPReq+0x6e>
 8004b22:	2b03      	cmp	r3, #3
 8004b24:	d016      	beq.n	8004b54 <USBD_StdEPReq+0x9a>
 8004b26:	e02c      	b.n	8004b82 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004b28:	7bbb      	ldrb	r3, [r7, #14]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d00d      	beq.n	8004b4a <USBD_StdEPReq+0x90>
 8004b2e:	7bbb      	ldrb	r3, [r7, #14]
 8004b30:	2b80      	cmp	r3, #128	; 0x80
 8004b32:	d00a      	beq.n	8004b4a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8004b34:	7bbb      	ldrb	r3, [r7, #14]
 8004b36:	4619      	mov	r1, r3
 8004b38:	6878      	ldr	r0, [r7, #4]
 8004b3a:	f001 f901 	bl	8005d40 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8004b3e:	2180      	movs	r1, #128	; 0x80
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	f001 f8fd 	bl	8005d40 <USBD_LL_StallEP>
 8004b46:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8004b48:	e020      	b.n	8004b8c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8004b4a:	6839      	ldr	r1, [r7, #0]
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	f000 fc45 	bl	80053dc <USBD_CtlError>
              break;
 8004b52:	e01b      	b.n	8004b8c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	885b      	ldrh	r3, [r3, #2]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d10e      	bne.n	8004b7a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8004b5c:	7bbb      	ldrb	r3, [r7, #14]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d00b      	beq.n	8004b7a <USBD_StdEPReq+0xc0>
 8004b62:	7bbb      	ldrb	r3, [r7, #14]
 8004b64:	2b80      	cmp	r3, #128	; 0x80
 8004b66:	d008      	beq.n	8004b7a <USBD_StdEPReq+0xc0>
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	88db      	ldrh	r3, [r3, #6]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d104      	bne.n	8004b7a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8004b70:	7bbb      	ldrb	r3, [r7, #14]
 8004b72:	4619      	mov	r1, r3
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	f001 f8e3 	bl	8005d40 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f000 fcdc 	bl	8005538 <USBD_CtlSendStatus>

              break;
 8004b80:	e004      	b.n	8004b8c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8004b82:	6839      	ldr	r1, [r7, #0]
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	f000 fc29 	bl	80053dc <USBD_CtlError>
              break;
 8004b8a:	bf00      	nop
          }
          break;
 8004b8c:	e0ec      	b.n	8004d68 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004b94:	b2db      	uxtb	r3, r3
 8004b96:	2b02      	cmp	r3, #2
 8004b98:	d002      	beq.n	8004ba0 <USBD_StdEPReq+0xe6>
 8004b9a:	2b03      	cmp	r3, #3
 8004b9c:	d016      	beq.n	8004bcc <USBD_StdEPReq+0x112>
 8004b9e:	e030      	b.n	8004c02 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004ba0:	7bbb      	ldrb	r3, [r7, #14]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d00d      	beq.n	8004bc2 <USBD_StdEPReq+0x108>
 8004ba6:	7bbb      	ldrb	r3, [r7, #14]
 8004ba8:	2b80      	cmp	r3, #128	; 0x80
 8004baa:	d00a      	beq.n	8004bc2 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8004bac:	7bbb      	ldrb	r3, [r7, #14]
 8004bae:	4619      	mov	r1, r3
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	f001 f8c5 	bl	8005d40 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8004bb6:	2180      	movs	r1, #128	; 0x80
 8004bb8:	6878      	ldr	r0, [r7, #4]
 8004bba:	f001 f8c1 	bl	8005d40 <USBD_LL_StallEP>
 8004bbe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8004bc0:	e025      	b.n	8004c0e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8004bc2:	6839      	ldr	r1, [r7, #0]
 8004bc4:	6878      	ldr	r0, [r7, #4]
 8004bc6:	f000 fc09 	bl	80053dc <USBD_CtlError>
              break;
 8004bca:	e020      	b.n	8004c0e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	885b      	ldrh	r3, [r3, #2]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d11b      	bne.n	8004c0c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8004bd4:	7bbb      	ldrb	r3, [r7, #14]
 8004bd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d004      	beq.n	8004be8 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8004bde:	7bbb      	ldrb	r3, [r7, #14]
 8004be0:	4619      	mov	r1, r3
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f001 f8cb 	bl	8005d7e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	f000 fca5 	bl	8005538 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	6839      	ldr	r1, [r7, #0]
 8004bf8:	6878      	ldr	r0, [r7, #4]
 8004bfa:	4798      	blx	r3
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8004c00:	e004      	b.n	8004c0c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8004c02:	6839      	ldr	r1, [r7, #0]
 8004c04:	6878      	ldr	r0, [r7, #4]
 8004c06:	f000 fbe9 	bl	80053dc <USBD_CtlError>
              break;
 8004c0a:	e000      	b.n	8004c0e <USBD_StdEPReq+0x154>
              break;
 8004c0c:	bf00      	nop
          }
          break;
 8004c0e:	e0ab      	b.n	8004d68 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004c16:	b2db      	uxtb	r3, r3
 8004c18:	2b02      	cmp	r3, #2
 8004c1a:	d002      	beq.n	8004c22 <USBD_StdEPReq+0x168>
 8004c1c:	2b03      	cmp	r3, #3
 8004c1e:	d032      	beq.n	8004c86 <USBD_StdEPReq+0x1cc>
 8004c20:	e097      	b.n	8004d52 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004c22:	7bbb      	ldrb	r3, [r7, #14]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d007      	beq.n	8004c38 <USBD_StdEPReq+0x17e>
 8004c28:	7bbb      	ldrb	r3, [r7, #14]
 8004c2a:	2b80      	cmp	r3, #128	; 0x80
 8004c2c:	d004      	beq.n	8004c38 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8004c2e:	6839      	ldr	r1, [r7, #0]
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f000 fbd3 	bl	80053dc <USBD_CtlError>
                break;
 8004c36:	e091      	b.n	8004d5c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004c38:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	da0b      	bge.n	8004c58 <USBD_StdEPReq+0x19e>
 8004c40:	7bbb      	ldrb	r3, [r7, #14]
 8004c42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004c46:	4613      	mov	r3, r2
 8004c48:	009b      	lsls	r3, r3, #2
 8004c4a:	4413      	add	r3, r2
 8004c4c:	009b      	lsls	r3, r3, #2
 8004c4e:	3310      	adds	r3, #16
 8004c50:	687a      	ldr	r2, [r7, #4]
 8004c52:	4413      	add	r3, r2
 8004c54:	3304      	adds	r3, #4
 8004c56:	e00b      	b.n	8004c70 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8004c58:	7bbb      	ldrb	r3, [r7, #14]
 8004c5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004c5e:	4613      	mov	r3, r2
 8004c60:	009b      	lsls	r3, r3, #2
 8004c62:	4413      	add	r3, r2
 8004c64:	009b      	lsls	r3, r3, #2
 8004c66:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004c6a:	687a      	ldr	r2, [r7, #4]
 8004c6c:	4413      	add	r3, r2
 8004c6e:	3304      	adds	r3, #4
 8004c70:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	2200      	movs	r2, #0
 8004c76:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	2202      	movs	r2, #2
 8004c7c:	4619      	mov	r1, r3
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f000 fc1d 	bl	80054be <USBD_CtlSendData>
              break;
 8004c84:	e06a      	b.n	8004d5c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8004c86:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	da11      	bge.n	8004cb2 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8004c8e:	7bbb      	ldrb	r3, [r7, #14]
 8004c90:	f003 020f 	and.w	r2, r3, #15
 8004c94:	6879      	ldr	r1, [r7, #4]
 8004c96:	4613      	mov	r3, r2
 8004c98:	009b      	lsls	r3, r3, #2
 8004c9a:	4413      	add	r3, r2
 8004c9c:	009b      	lsls	r3, r3, #2
 8004c9e:	440b      	add	r3, r1
 8004ca0:	3324      	adds	r3, #36	; 0x24
 8004ca2:	881b      	ldrh	r3, [r3, #0]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d117      	bne.n	8004cd8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8004ca8:	6839      	ldr	r1, [r7, #0]
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f000 fb96 	bl	80053dc <USBD_CtlError>
                  break;
 8004cb0:	e054      	b.n	8004d5c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8004cb2:	7bbb      	ldrb	r3, [r7, #14]
 8004cb4:	f003 020f 	and.w	r2, r3, #15
 8004cb8:	6879      	ldr	r1, [r7, #4]
 8004cba:	4613      	mov	r3, r2
 8004cbc:	009b      	lsls	r3, r3, #2
 8004cbe:	4413      	add	r3, r2
 8004cc0:	009b      	lsls	r3, r3, #2
 8004cc2:	440b      	add	r3, r1
 8004cc4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004cc8:	881b      	ldrh	r3, [r3, #0]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d104      	bne.n	8004cd8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8004cce:	6839      	ldr	r1, [r7, #0]
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	f000 fb83 	bl	80053dc <USBD_CtlError>
                  break;
 8004cd6:	e041      	b.n	8004d5c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004cd8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	da0b      	bge.n	8004cf8 <USBD_StdEPReq+0x23e>
 8004ce0:	7bbb      	ldrb	r3, [r7, #14]
 8004ce2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004ce6:	4613      	mov	r3, r2
 8004ce8:	009b      	lsls	r3, r3, #2
 8004cea:	4413      	add	r3, r2
 8004cec:	009b      	lsls	r3, r3, #2
 8004cee:	3310      	adds	r3, #16
 8004cf0:	687a      	ldr	r2, [r7, #4]
 8004cf2:	4413      	add	r3, r2
 8004cf4:	3304      	adds	r3, #4
 8004cf6:	e00b      	b.n	8004d10 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8004cf8:	7bbb      	ldrb	r3, [r7, #14]
 8004cfa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004cfe:	4613      	mov	r3, r2
 8004d00:	009b      	lsls	r3, r3, #2
 8004d02:	4413      	add	r3, r2
 8004d04:	009b      	lsls	r3, r3, #2
 8004d06:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004d0a:	687a      	ldr	r2, [r7, #4]
 8004d0c:	4413      	add	r3, r2
 8004d0e:	3304      	adds	r3, #4
 8004d10:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8004d12:	7bbb      	ldrb	r3, [r7, #14]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d002      	beq.n	8004d1e <USBD_StdEPReq+0x264>
 8004d18:	7bbb      	ldrb	r3, [r7, #14]
 8004d1a:	2b80      	cmp	r3, #128	; 0x80
 8004d1c:	d103      	bne.n	8004d26 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	2200      	movs	r2, #0
 8004d22:	601a      	str	r2, [r3, #0]
 8004d24:	e00e      	b.n	8004d44 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8004d26:	7bbb      	ldrb	r3, [r7, #14]
 8004d28:	4619      	mov	r1, r3
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f001 f846 	bl	8005dbc <USBD_LL_IsStallEP>
 8004d30:	4603      	mov	r3, r0
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d003      	beq.n	8004d3e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	2201      	movs	r2, #1
 8004d3a:	601a      	str	r2, [r3, #0]
 8004d3c:	e002      	b.n	8004d44 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	2200      	movs	r2, #0
 8004d42:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	2202      	movs	r2, #2
 8004d48:	4619      	mov	r1, r3
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f000 fbb7 	bl	80054be <USBD_CtlSendData>
              break;
 8004d50:	e004      	b.n	8004d5c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8004d52:	6839      	ldr	r1, [r7, #0]
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	f000 fb41 	bl	80053dc <USBD_CtlError>
              break;
 8004d5a:	bf00      	nop
          }
          break;
 8004d5c:	e004      	b.n	8004d68 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8004d5e:	6839      	ldr	r1, [r7, #0]
 8004d60:	6878      	ldr	r0, [r7, #4]
 8004d62:	f000 fb3b 	bl	80053dc <USBD_CtlError>
          break;
 8004d66:	bf00      	nop
      }
      break;
 8004d68:	e004      	b.n	8004d74 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8004d6a:	6839      	ldr	r1, [r7, #0]
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f000 fb35 	bl	80053dc <USBD_CtlError>
      break;
 8004d72:	bf00      	nop
  }

  return ret;
 8004d74:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	3710      	adds	r7, #16
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}
	...

08004d80 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b084      	sub	sp, #16
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
 8004d88:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8004d92:	2300      	movs	r3, #0
 8004d94:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	885b      	ldrh	r3, [r3, #2]
 8004d9a:	0a1b      	lsrs	r3, r3, #8
 8004d9c:	b29b      	uxth	r3, r3
 8004d9e:	3b01      	subs	r3, #1
 8004da0:	2b06      	cmp	r3, #6
 8004da2:	f200 8128 	bhi.w	8004ff6 <USBD_GetDescriptor+0x276>
 8004da6:	a201      	add	r2, pc, #4	; (adr r2, 8004dac <USBD_GetDescriptor+0x2c>)
 8004da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dac:	08004dc9 	.word	0x08004dc9
 8004db0:	08004de1 	.word	0x08004de1
 8004db4:	08004e21 	.word	0x08004e21
 8004db8:	08004ff7 	.word	0x08004ff7
 8004dbc:	08004ff7 	.word	0x08004ff7
 8004dc0:	08004f97 	.word	0x08004f97
 8004dc4:	08004fc3 	.word	0x08004fc3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	687a      	ldr	r2, [r7, #4]
 8004dd2:	7c12      	ldrb	r2, [r2, #16]
 8004dd4:	f107 0108 	add.w	r1, r7, #8
 8004dd8:	4610      	mov	r0, r2
 8004dda:	4798      	blx	r3
 8004ddc:	60f8      	str	r0, [r7, #12]
      break;
 8004dde:	e112      	b.n	8005006 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	7c1b      	ldrb	r3, [r3, #16]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d10d      	bne.n	8004e04 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004df0:	f107 0208 	add.w	r2, r7, #8
 8004df4:	4610      	mov	r0, r2
 8004df6:	4798      	blx	r3
 8004df8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	3301      	adds	r3, #1
 8004dfe:	2202      	movs	r2, #2
 8004e00:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8004e02:	e100      	b.n	8005006 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e0c:	f107 0208 	add.w	r2, r7, #8
 8004e10:	4610      	mov	r0, r2
 8004e12:	4798      	blx	r3
 8004e14:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	3301      	adds	r3, #1
 8004e1a:	2202      	movs	r2, #2
 8004e1c:	701a      	strb	r2, [r3, #0]
      break;
 8004e1e:	e0f2      	b.n	8005006 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	885b      	ldrh	r3, [r3, #2]
 8004e24:	b2db      	uxtb	r3, r3
 8004e26:	2b05      	cmp	r3, #5
 8004e28:	f200 80ac 	bhi.w	8004f84 <USBD_GetDescriptor+0x204>
 8004e2c:	a201      	add	r2, pc, #4	; (adr r2, 8004e34 <USBD_GetDescriptor+0xb4>)
 8004e2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e32:	bf00      	nop
 8004e34:	08004e4d 	.word	0x08004e4d
 8004e38:	08004e81 	.word	0x08004e81
 8004e3c:	08004eb5 	.word	0x08004eb5
 8004e40:	08004ee9 	.word	0x08004ee9
 8004e44:	08004f1d 	.word	0x08004f1d
 8004e48:	08004f51 	.word	0x08004f51
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d00b      	beq.n	8004e70 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	687a      	ldr	r2, [r7, #4]
 8004e62:	7c12      	ldrb	r2, [r2, #16]
 8004e64:	f107 0108 	add.w	r1, r7, #8
 8004e68:	4610      	mov	r0, r2
 8004e6a:	4798      	blx	r3
 8004e6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8004e6e:	e091      	b.n	8004f94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8004e70:	6839      	ldr	r1, [r7, #0]
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f000 fab2 	bl	80053dc <USBD_CtlError>
            err++;
 8004e78:	7afb      	ldrb	r3, [r7, #11]
 8004e7a:	3301      	adds	r3, #1
 8004e7c:	72fb      	strb	r3, [r7, #11]
          break;
 8004e7e:	e089      	b.n	8004f94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d00b      	beq.n	8004ea4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	687a      	ldr	r2, [r7, #4]
 8004e96:	7c12      	ldrb	r2, [r2, #16]
 8004e98:	f107 0108 	add.w	r1, r7, #8
 8004e9c:	4610      	mov	r0, r2
 8004e9e:	4798      	blx	r3
 8004ea0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8004ea2:	e077      	b.n	8004f94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8004ea4:	6839      	ldr	r1, [r7, #0]
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f000 fa98 	bl	80053dc <USBD_CtlError>
            err++;
 8004eac:	7afb      	ldrb	r3, [r7, #11]
 8004eae:	3301      	adds	r3, #1
 8004eb0:	72fb      	strb	r3, [r7, #11]
          break;
 8004eb2:	e06f      	b.n	8004f94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004eba:	68db      	ldr	r3, [r3, #12]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d00b      	beq.n	8004ed8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004ec6:	68db      	ldr	r3, [r3, #12]
 8004ec8:	687a      	ldr	r2, [r7, #4]
 8004eca:	7c12      	ldrb	r2, [r2, #16]
 8004ecc:	f107 0108 	add.w	r1, r7, #8
 8004ed0:	4610      	mov	r0, r2
 8004ed2:	4798      	blx	r3
 8004ed4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8004ed6:	e05d      	b.n	8004f94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8004ed8:	6839      	ldr	r1, [r7, #0]
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f000 fa7e 	bl	80053dc <USBD_CtlError>
            err++;
 8004ee0:	7afb      	ldrb	r3, [r7, #11]
 8004ee2:	3301      	adds	r3, #1
 8004ee4:	72fb      	strb	r3, [r7, #11]
          break;
 8004ee6:	e055      	b.n	8004f94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004eee:	691b      	ldr	r3, [r3, #16]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d00b      	beq.n	8004f0c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004efa:	691b      	ldr	r3, [r3, #16]
 8004efc:	687a      	ldr	r2, [r7, #4]
 8004efe:	7c12      	ldrb	r2, [r2, #16]
 8004f00:	f107 0108 	add.w	r1, r7, #8
 8004f04:	4610      	mov	r0, r2
 8004f06:	4798      	blx	r3
 8004f08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8004f0a:	e043      	b.n	8004f94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8004f0c:	6839      	ldr	r1, [r7, #0]
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f000 fa64 	bl	80053dc <USBD_CtlError>
            err++;
 8004f14:	7afb      	ldrb	r3, [r7, #11]
 8004f16:	3301      	adds	r3, #1
 8004f18:	72fb      	strb	r3, [r7, #11]
          break;
 8004f1a:	e03b      	b.n	8004f94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004f22:	695b      	ldr	r3, [r3, #20]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d00b      	beq.n	8004f40 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004f2e:	695b      	ldr	r3, [r3, #20]
 8004f30:	687a      	ldr	r2, [r7, #4]
 8004f32:	7c12      	ldrb	r2, [r2, #16]
 8004f34:	f107 0108 	add.w	r1, r7, #8
 8004f38:	4610      	mov	r0, r2
 8004f3a:	4798      	blx	r3
 8004f3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8004f3e:	e029      	b.n	8004f94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8004f40:	6839      	ldr	r1, [r7, #0]
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f000 fa4a 	bl	80053dc <USBD_CtlError>
            err++;
 8004f48:	7afb      	ldrb	r3, [r7, #11]
 8004f4a:	3301      	adds	r3, #1
 8004f4c:	72fb      	strb	r3, [r7, #11]
          break;
 8004f4e:	e021      	b.n	8004f94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004f56:	699b      	ldr	r3, [r3, #24]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d00b      	beq.n	8004f74 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004f62:	699b      	ldr	r3, [r3, #24]
 8004f64:	687a      	ldr	r2, [r7, #4]
 8004f66:	7c12      	ldrb	r2, [r2, #16]
 8004f68:	f107 0108 	add.w	r1, r7, #8
 8004f6c:	4610      	mov	r0, r2
 8004f6e:	4798      	blx	r3
 8004f70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8004f72:	e00f      	b.n	8004f94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8004f74:	6839      	ldr	r1, [r7, #0]
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f000 fa30 	bl	80053dc <USBD_CtlError>
            err++;
 8004f7c:	7afb      	ldrb	r3, [r7, #11]
 8004f7e:	3301      	adds	r3, #1
 8004f80:	72fb      	strb	r3, [r7, #11]
          break;
 8004f82:	e007      	b.n	8004f94 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8004f84:	6839      	ldr	r1, [r7, #0]
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f000 fa28 	bl	80053dc <USBD_CtlError>
          err++;
 8004f8c:	7afb      	ldrb	r3, [r7, #11]
 8004f8e:	3301      	adds	r3, #1
 8004f90:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8004f92:	bf00      	nop
      }
      break;
 8004f94:	e037      	b.n	8005006 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	7c1b      	ldrb	r3, [r3, #16]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d109      	bne.n	8004fb2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004fa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fa6:	f107 0208 	add.w	r2, r7, #8
 8004faa:	4610      	mov	r0, r2
 8004fac:	4798      	blx	r3
 8004fae:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8004fb0:	e029      	b.n	8005006 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8004fb2:	6839      	ldr	r1, [r7, #0]
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	f000 fa11 	bl	80053dc <USBD_CtlError>
        err++;
 8004fba:	7afb      	ldrb	r3, [r7, #11]
 8004fbc:	3301      	adds	r3, #1
 8004fbe:	72fb      	strb	r3, [r7, #11]
      break;
 8004fc0:	e021      	b.n	8005006 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	7c1b      	ldrb	r3, [r3, #16]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d10d      	bne.n	8004fe6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fd2:	f107 0208 	add.w	r2, r7, #8
 8004fd6:	4610      	mov	r0, r2
 8004fd8:	4798      	blx	r3
 8004fda:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	3301      	adds	r3, #1
 8004fe0:	2207      	movs	r2, #7
 8004fe2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8004fe4:	e00f      	b.n	8005006 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8004fe6:	6839      	ldr	r1, [r7, #0]
 8004fe8:	6878      	ldr	r0, [r7, #4]
 8004fea:	f000 f9f7 	bl	80053dc <USBD_CtlError>
        err++;
 8004fee:	7afb      	ldrb	r3, [r7, #11]
 8004ff0:	3301      	adds	r3, #1
 8004ff2:	72fb      	strb	r3, [r7, #11]
      break;
 8004ff4:	e007      	b.n	8005006 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8004ff6:	6839      	ldr	r1, [r7, #0]
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f000 f9ef 	bl	80053dc <USBD_CtlError>
      err++;
 8004ffe:	7afb      	ldrb	r3, [r7, #11]
 8005000:	3301      	adds	r3, #1
 8005002:	72fb      	strb	r3, [r7, #11]
      break;
 8005004:	bf00      	nop
  }

  if (err != 0U)
 8005006:	7afb      	ldrb	r3, [r7, #11]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d11e      	bne.n	800504a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	88db      	ldrh	r3, [r3, #6]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d016      	beq.n	8005042 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8005014:	893b      	ldrh	r3, [r7, #8]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d00e      	beq.n	8005038 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	88da      	ldrh	r2, [r3, #6]
 800501e:	893b      	ldrh	r3, [r7, #8]
 8005020:	4293      	cmp	r3, r2
 8005022:	bf28      	it	cs
 8005024:	4613      	movcs	r3, r2
 8005026:	b29b      	uxth	r3, r3
 8005028:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800502a:	893b      	ldrh	r3, [r7, #8]
 800502c:	461a      	mov	r2, r3
 800502e:	68f9      	ldr	r1, [r7, #12]
 8005030:	6878      	ldr	r0, [r7, #4]
 8005032:	f000 fa44 	bl	80054be <USBD_CtlSendData>
 8005036:	e009      	b.n	800504c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8005038:	6839      	ldr	r1, [r7, #0]
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f000 f9ce 	bl	80053dc <USBD_CtlError>
 8005040:	e004      	b.n	800504c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f000 fa78 	bl	8005538 <USBD_CtlSendStatus>
 8005048:	e000      	b.n	800504c <USBD_GetDescriptor+0x2cc>
    return;
 800504a:	bf00      	nop
  }
}
 800504c:	3710      	adds	r7, #16
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}
 8005052:	bf00      	nop

08005054 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b084      	sub	sp, #16
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
 800505c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	889b      	ldrh	r3, [r3, #4]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d131      	bne.n	80050ca <USBD_SetAddress+0x76>
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	88db      	ldrh	r3, [r3, #6]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d12d      	bne.n	80050ca <USBD_SetAddress+0x76>
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	885b      	ldrh	r3, [r3, #2]
 8005072:	2b7f      	cmp	r3, #127	; 0x7f
 8005074:	d829      	bhi.n	80050ca <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	885b      	ldrh	r3, [r3, #2]
 800507a:	b2db      	uxtb	r3, r3
 800507c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005080:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005088:	b2db      	uxtb	r3, r3
 800508a:	2b03      	cmp	r3, #3
 800508c:	d104      	bne.n	8005098 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800508e:	6839      	ldr	r1, [r7, #0]
 8005090:	6878      	ldr	r0, [r7, #4]
 8005092:	f000 f9a3 	bl	80053dc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005096:	e01d      	b.n	80050d4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	7bfa      	ldrb	r2, [r7, #15]
 800509c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80050a0:	7bfb      	ldrb	r3, [r7, #15]
 80050a2:	4619      	mov	r1, r3
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	f000 feb5 	bl	8005e14 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	f000 fa44 	bl	8005538 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80050b0:	7bfb      	ldrb	r3, [r7, #15]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d004      	beq.n	80050c0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2202      	movs	r2, #2
 80050ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80050be:	e009      	b.n	80050d4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2201      	movs	r2, #1
 80050c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80050c8:	e004      	b.n	80050d4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80050ca:	6839      	ldr	r1, [r7, #0]
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	f000 f985 	bl	80053dc <USBD_CtlError>
  }
}
 80050d2:	bf00      	nop
 80050d4:	bf00      	nop
 80050d6:	3710      	adds	r7, #16
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}

080050dc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b084      	sub	sp, #16
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
 80050e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80050e6:	2300      	movs	r3, #0
 80050e8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	885b      	ldrh	r3, [r3, #2]
 80050ee:	b2da      	uxtb	r2, r3
 80050f0:	4b4c      	ldr	r3, [pc, #304]	; (8005224 <USBD_SetConfig+0x148>)
 80050f2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80050f4:	4b4b      	ldr	r3, [pc, #300]	; (8005224 <USBD_SetConfig+0x148>)
 80050f6:	781b      	ldrb	r3, [r3, #0]
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	d905      	bls.n	8005108 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80050fc:	6839      	ldr	r1, [r7, #0]
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f000 f96c 	bl	80053dc <USBD_CtlError>
    return USBD_FAIL;
 8005104:	2303      	movs	r3, #3
 8005106:	e088      	b.n	800521a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800510e:	b2db      	uxtb	r3, r3
 8005110:	2b02      	cmp	r3, #2
 8005112:	d002      	beq.n	800511a <USBD_SetConfig+0x3e>
 8005114:	2b03      	cmp	r3, #3
 8005116:	d025      	beq.n	8005164 <USBD_SetConfig+0x88>
 8005118:	e071      	b.n	80051fe <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800511a:	4b42      	ldr	r3, [pc, #264]	; (8005224 <USBD_SetConfig+0x148>)
 800511c:	781b      	ldrb	r3, [r3, #0]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d01c      	beq.n	800515c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8005122:	4b40      	ldr	r3, [pc, #256]	; (8005224 <USBD_SetConfig+0x148>)
 8005124:	781b      	ldrb	r3, [r3, #0]
 8005126:	461a      	mov	r2, r3
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800512c:	4b3d      	ldr	r3, [pc, #244]	; (8005224 <USBD_SetConfig+0x148>)
 800512e:	781b      	ldrb	r3, [r3, #0]
 8005130:	4619      	mov	r1, r3
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f7ff f949 	bl	80043ca <USBD_SetClassConfig>
 8005138:	4603      	mov	r3, r0
 800513a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800513c:	7bfb      	ldrb	r3, [r7, #15]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d004      	beq.n	800514c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8005142:	6839      	ldr	r1, [r7, #0]
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	f000 f949 	bl	80053dc <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800514a:	e065      	b.n	8005218 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800514c:	6878      	ldr	r0, [r7, #4]
 800514e:	f000 f9f3 	bl	8005538 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2203      	movs	r2, #3
 8005156:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800515a:	e05d      	b.n	8005218 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	f000 f9eb 	bl	8005538 <USBD_CtlSendStatus>
      break;
 8005162:	e059      	b.n	8005218 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8005164:	4b2f      	ldr	r3, [pc, #188]	; (8005224 <USBD_SetConfig+0x148>)
 8005166:	781b      	ldrb	r3, [r3, #0]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d112      	bne.n	8005192 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2202      	movs	r2, #2
 8005170:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8005174:	4b2b      	ldr	r3, [pc, #172]	; (8005224 <USBD_SetConfig+0x148>)
 8005176:	781b      	ldrb	r3, [r3, #0]
 8005178:	461a      	mov	r2, r3
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800517e:	4b29      	ldr	r3, [pc, #164]	; (8005224 <USBD_SetConfig+0x148>)
 8005180:	781b      	ldrb	r3, [r3, #0]
 8005182:	4619      	mov	r1, r3
 8005184:	6878      	ldr	r0, [r7, #4]
 8005186:	f7ff f93c 	bl	8004402 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f000 f9d4 	bl	8005538 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005190:	e042      	b.n	8005218 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8005192:	4b24      	ldr	r3, [pc, #144]	; (8005224 <USBD_SetConfig+0x148>)
 8005194:	781b      	ldrb	r3, [r3, #0]
 8005196:	461a      	mov	r2, r3
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	429a      	cmp	r2, r3
 800519e:	d02a      	beq.n	80051f6 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	b2db      	uxtb	r3, r3
 80051a6:	4619      	mov	r1, r3
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	f7ff f92a 	bl	8004402 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80051ae:	4b1d      	ldr	r3, [pc, #116]	; (8005224 <USBD_SetConfig+0x148>)
 80051b0:	781b      	ldrb	r3, [r3, #0]
 80051b2:	461a      	mov	r2, r3
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80051b8:	4b1a      	ldr	r3, [pc, #104]	; (8005224 <USBD_SetConfig+0x148>)
 80051ba:	781b      	ldrb	r3, [r3, #0]
 80051bc:	4619      	mov	r1, r3
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f7ff f903 	bl	80043ca <USBD_SetClassConfig>
 80051c4:	4603      	mov	r3, r0
 80051c6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80051c8:	7bfb      	ldrb	r3, [r7, #15]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d00f      	beq.n	80051ee <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80051ce:	6839      	ldr	r1, [r7, #0]
 80051d0:	6878      	ldr	r0, [r7, #4]
 80051d2:	f000 f903 	bl	80053dc <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	b2db      	uxtb	r3, r3
 80051dc:	4619      	mov	r1, r3
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f7ff f90f 	bl	8004402 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2202      	movs	r2, #2
 80051e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80051ec:	e014      	b.n	8005218 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f000 f9a2 	bl	8005538 <USBD_CtlSendStatus>
      break;
 80051f4:	e010      	b.n	8005218 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f000 f99e 	bl	8005538 <USBD_CtlSendStatus>
      break;
 80051fc:	e00c      	b.n	8005218 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80051fe:	6839      	ldr	r1, [r7, #0]
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	f000 f8eb 	bl	80053dc <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005206:	4b07      	ldr	r3, [pc, #28]	; (8005224 <USBD_SetConfig+0x148>)
 8005208:	781b      	ldrb	r3, [r3, #0]
 800520a:	4619      	mov	r1, r3
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	f7ff f8f8 	bl	8004402 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8005212:	2303      	movs	r3, #3
 8005214:	73fb      	strb	r3, [r7, #15]
      break;
 8005216:	bf00      	nop
  }

  return ret;
 8005218:	7bfb      	ldrb	r3, [r7, #15]
}
 800521a:	4618      	mov	r0, r3
 800521c:	3710      	adds	r7, #16
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}
 8005222:	bf00      	nop
 8005224:	20000154 	.word	0x20000154

08005228 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b082      	sub	sp, #8
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	88db      	ldrh	r3, [r3, #6]
 8005236:	2b01      	cmp	r3, #1
 8005238:	d004      	beq.n	8005244 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800523a:	6839      	ldr	r1, [r7, #0]
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	f000 f8cd 	bl	80053dc <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8005242:	e023      	b.n	800528c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800524a:	b2db      	uxtb	r3, r3
 800524c:	2b02      	cmp	r3, #2
 800524e:	dc02      	bgt.n	8005256 <USBD_GetConfig+0x2e>
 8005250:	2b00      	cmp	r3, #0
 8005252:	dc03      	bgt.n	800525c <USBD_GetConfig+0x34>
 8005254:	e015      	b.n	8005282 <USBD_GetConfig+0x5a>
 8005256:	2b03      	cmp	r3, #3
 8005258:	d00b      	beq.n	8005272 <USBD_GetConfig+0x4a>
 800525a:	e012      	b.n	8005282 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2200      	movs	r2, #0
 8005260:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	3308      	adds	r3, #8
 8005266:	2201      	movs	r2, #1
 8005268:	4619      	mov	r1, r3
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f000 f927 	bl	80054be <USBD_CtlSendData>
        break;
 8005270:	e00c      	b.n	800528c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	3304      	adds	r3, #4
 8005276:	2201      	movs	r2, #1
 8005278:	4619      	mov	r1, r3
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f000 f91f 	bl	80054be <USBD_CtlSendData>
        break;
 8005280:	e004      	b.n	800528c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8005282:	6839      	ldr	r1, [r7, #0]
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	f000 f8a9 	bl	80053dc <USBD_CtlError>
        break;
 800528a:	bf00      	nop
}
 800528c:	bf00      	nop
 800528e:	3708      	adds	r7, #8
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}

08005294 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b082      	sub	sp, #8
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
 800529c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80052a4:	b2db      	uxtb	r3, r3
 80052a6:	3b01      	subs	r3, #1
 80052a8:	2b02      	cmp	r3, #2
 80052aa:	d81e      	bhi.n	80052ea <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	88db      	ldrh	r3, [r3, #6]
 80052b0:	2b02      	cmp	r3, #2
 80052b2:	d004      	beq.n	80052be <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80052b4:	6839      	ldr	r1, [r7, #0]
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f000 f890 	bl	80053dc <USBD_CtlError>
        break;
 80052bc:	e01a      	b.n	80052f4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2201      	movs	r2, #1
 80052c2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d005      	beq.n	80052da <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	68db      	ldr	r3, [r3, #12]
 80052d2:	f043 0202 	orr.w	r2, r3, #2
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	330c      	adds	r3, #12
 80052de:	2202      	movs	r2, #2
 80052e0:	4619      	mov	r1, r3
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f000 f8eb 	bl	80054be <USBD_CtlSendData>
      break;
 80052e8:	e004      	b.n	80052f4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80052ea:	6839      	ldr	r1, [r7, #0]
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	f000 f875 	bl	80053dc <USBD_CtlError>
      break;
 80052f2:	bf00      	nop
  }
}
 80052f4:	bf00      	nop
 80052f6:	3708      	adds	r7, #8
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}

080052fc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b082      	sub	sp, #8
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
 8005304:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	885b      	ldrh	r3, [r3, #2]
 800530a:	2b01      	cmp	r3, #1
 800530c:	d106      	bne.n	800531c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2201      	movs	r2, #1
 8005312:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f000 f90e 	bl	8005538 <USBD_CtlSendStatus>
  }
}
 800531c:	bf00      	nop
 800531e:	3708      	adds	r7, #8
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}

08005324 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b082      	sub	sp, #8
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
 800532c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005334:	b2db      	uxtb	r3, r3
 8005336:	3b01      	subs	r3, #1
 8005338:	2b02      	cmp	r3, #2
 800533a:	d80b      	bhi.n	8005354 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	885b      	ldrh	r3, [r3, #2]
 8005340:	2b01      	cmp	r3, #1
 8005342:	d10c      	bne.n	800535e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2200      	movs	r2, #0
 8005348:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800534c:	6878      	ldr	r0, [r7, #4]
 800534e:	f000 f8f3 	bl	8005538 <USBD_CtlSendStatus>
      }
      break;
 8005352:	e004      	b.n	800535e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8005354:	6839      	ldr	r1, [r7, #0]
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f000 f840 	bl	80053dc <USBD_CtlError>
      break;
 800535c:	e000      	b.n	8005360 <USBD_ClrFeature+0x3c>
      break;
 800535e:	bf00      	nop
  }
}
 8005360:	bf00      	nop
 8005362:	3708      	adds	r7, #8
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}

08005368 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b084      	sub	sp, #16
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	781a      	ldrb	r2, [r3, #0]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	3301      	adds	r3, #1
 8005382:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	781a      	ldrb	r2, [r3, #0]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	3301      	adds	r3, #1
 8005390:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8005392:	68f8      	ldr	r0, [r7, #12]
 8005394:	f7ff fabc 	bl	8004910 <SWAPBYTE>
 8005398:	4603      	mov	r3, r0
 800539a:	461a      	mov	r2, r3
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	3301      	adds	r3, #1
 80053a4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	3301      	adds	r3, #1
 80053aa:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80053ac:	68f8      	ldr	r0, [r7, #12]
 80053ae:	f7ff faaf 	bl	8004910 <SWAPBYTE>
 80053b2:	4603      	mov	r3, r0
 80053b4:	461a      	mov	r2, r3
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	3301      	adds	r3, #1
 80053be:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	3301      	adds	r3, #1
 80053c4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80053c6:	68f8      	ldr	r0, [r7, #12]
 80053c8:	f7ff faa2 	bl	8004910 <SWAPBYTE>
 80053cc:	4603      	mov	r3, r0
 80053ce:	461a      	mov	r2, r3
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	80da      	strh	r2, [r3, #6]
}
 80053d4:	bf00      	nop
 80053d6:	3710      	adds	r7, #16
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}

080053dc <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b082      	sub	sp, #8
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
 80053e4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80053e6:	2180      	movs	r1, #128	; 0x80
 80053e8:	6878      	ldr	r0, [r7, #4]
 80053ea:	f000 fca9 	bl	8005d40 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80053ee:	2100      	movs	r1, #0
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f000 fca5 	bl	8005d40 <USBD_LL_StallEP>
}
 80053f6:	bf00      	nop
 80053f8:	3708      	adds	r7, #8
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}

080053fe <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80053fe:	b580      	push	{r7, lr}
 8005400:	b086      	sub	sp, #24
 8005402:	af00      	add	r7, sp, #0
 8005404:	60f8      	str	r0, [r7, #12]
 8005406:	60b9      	str	r1, [r7, #8]
 8005408:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800540a:	2300      	movs	r3, #0
 800540c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d036      	beq.n	8005482 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8005418:	6938      	ldr	r0, [r7, #16]
 800541a:	f000 f836 	bl	800548a <USBD_GetLen>
 800541e:	4603      	mov	r3, r0
 8005420:	3301      	adds	r3, #1
 8005422:	b29b      	uxth	r3, r3
 8005424:	005b      	lsls	r3, r3, #1
 8005426:	b29a      	uxth	r2, r3
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800542c:	7dfb      	ldrb	r3, [r7, #23]
 800542e:	68ba      	ldr	r2, [r7, #8]
 8005430:	4413      	add	r3, r2
 8005432:	687a      	ldr	r2, [r7, #4]
 8005434:	7812      	ldrb	r2, [r2, #0]
 8005436:	701a      	strb	r2, [r3, #0]
  idx++;
 8005438:	7dfb      	ldrb	r3, [r7, #23]
 800543a:	3301      	adds	r3, #1
 800543c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800543e:	7dfb      	ldrb	r3, [r7, #23]
 8005440:	68ba      	ldr	r2, [r7, #8]
 8005442:	4413      	add	r3, r2
 8005444:	2203      	movs	r2, #3
 8005446:	701a      	strb	r2, [r3, #0]
  idx++;
 8005448:	7dfb      	ldrb	r3, [r7, #23]
 800544a:	3301      	adds	r3, #1
 800544c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800544e:	e013      	b.n	8005478 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8005450:	7dfb      	ldrb	r3, [r7, #23]
 8005452:	68ba      	ldr	r2, [r7, #8]
 8005454:	4413      	add	r3, r2
 8005456:	693a      	ldr	r2, [r7, #16]
 8005458:	7812      	ldrb	r2, [r2, #0]
 800545a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800545c:	693b      	ldr	r3, [r7, #16]
 800545e:	3301      	adds	r3, #1
 8005460:	613b      	str	r3, [r7, #16]
    idx++;
 8005462:	7dfb      	ldrb	r3, [r7, #23]
 8005464:	3301      	adds	r3, #1
 8005466:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8005468:	7dfb      	ldrb	r3, [r7, #23]
 800546a:	68ba      	ldr	r2, [r7, #8]
 800546c:	4413      	add	r3, r2
 800546e:	2200      	movs	r2, #0
 8005470:	701a      	strb	r2, [r3, #0]
    idx++;
 8005472:	7dfb      	ldrb	r3, [r7, #23]
 8005474:	3301      	adds	r3, #1
 8005476:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	781b      	ldrb	r3, [r3, #0]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d1e7      	bne.n	8005450 <USBD_GetString+0x52>
 8005480:	e000      	b.n	8005484 <USBD_GetString+0x86>
    return;
 8005482:	bf00      	nop
  }
}
 8005484:	3718      	adds	r7, #24
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}

0800548a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800548a:	b480      	push	{r7}
 800548c:	b085      	sub	sp, #20
 800548e:	af00      	add	r7, sp, #0
 8005490:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8005492:	2300      	movs	r3, #0
 8005494:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800549a:	e005      	b.n	80054a8 <USBD_GetLen+0x1e>
  {
    len++;
 800549c:	7bfb      	ldrb	r3, [r7, #15]
 800549e:	3301      	adds	r3, #1
 80054a0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	3301      	adds	r3, #1
 80054a6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	781b      	ldrb	r3, [r3, #0]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d1f5      	bne.n	800549c <USBD_GetLen+0x12>
  }

  return len;
 80054b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	3714      	adds	r7, #20
 80054b6:	46bd      	mov	sp, r7
 80054b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054bc:	4770      	bx	lr

080054be <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80054be:	b580      	push	{r7, lr}
 80054c0:	b084      	sub	sp, #16
 80054c2:	af00      	add	r7, sp, #0
 80054c4:	60f8      	str	r0, [r7, #12]
 80054c6:	60b9      	str	r1, [r7, #8]
 80054c8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2202      	movs	r2, #2
 80054ce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	687a      	ldr	r2, [r7, #4]
 80054d6:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	687a      	ldr	r2, [r7, #4]
 80054dc:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	68ba      	ldr	r2, [r7, #8]
 80054e2:	2100      	movs	r1, #0
 80054e4:	68f8      	ldr	r0, [r7, #12]
 80054e6:	f000 fcb4 	bl	8005e52 <USBD_LL_Transmit>

  return USBD_OK;
 80054ea:	2300      	movs	r3, #0
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	3710      	adds	r7, #16
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bd80      	pop	{r7, pc}

080054f4 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b084      	sub	sp, #16
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	60f8      	str	r0, [r7, #12]
 80054fc:	60b9      	str	r1, [r7, #8]
 80054fe:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	68ba      	ldr	r2, [r7, #8]
 8005504:	2100      	movs	r1, #0
 8005506:	68f8      	ldr	r0, [r7, #12]
 8005508:	f000 fca3 	bl	8005e52 <USBD_LL_Transmit>

  return USBD_OK;
 800550c:	2300      	movs	r3, #0
}
 800550e:	4618      	mov	r0, r3
 8005510:	3710      	adds	r7, #16
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}

08005516 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8005516:	b580      	push	{r7, lr}
 8005518:	b084      	sub	sp, #16
 800551a:	af00      	add	r7, sp, #0
 800551c:	60f8      	str	r0, [r7, #12]
 800551e:	60b9      	str	r1, [r7, #8]
 8005520:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	68ba      	ldr	r2, [r7, #8]
 8005526:	2100      	movs	r1, #0
 8005528:	68f8      	ldr	r0, [r7, #12]
 800552a:	f000 fcb3 	bl	8005e94 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800552e:	2300      	movs	r3, #0
}
 8005530:	4618      	mov	r0, r3
 8005532:	3710      	adds	r7, #16
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}

08005538 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b082      	sub	sp, #8
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2204      	movs	r2, #4
 8005544:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005548:	2300      	movs	r3, #0
 800554a:	2200      	movs	r2, #0
 800554c:	2100      	movs	r1, #0
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f000 fc7f 	bl	8005e52 <USBD_LL_Transmit>

  return USBD_OK;
 8005554:	2300      	movs	r3, #0
}
 8005556:	4618      	mov	r0, r3
 8005558:	3708      	adds	r7, #8
 800555a:	46bd      	mov	sp, r7
 800555c:	bd80      	pop	{r7, pc}

0800555e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800555e:	b580      	push	{r7, lr}
 8005560:	b082      	sub	sp, #8
 8005562:	af00      	add	r7, sp, #0
 8005564:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2205      	movs	r2, #5
 800556a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800556e:	2300      	movs	r3, #0
 8005570:	2200      	movs	r2, #0
 8005572:	2100      	movs	r1, #0
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	f000 fc8d 	bl	8005e94 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800557a:	2300      	movs	r3, #0
}
 800557c:	4618      	mov	r0, r3
 800557e:	3708      	adds	r7, #8
 8005580:	46bd      	mov	sp, r7
 8005582:	bd80      	pop	{r7, pc}

08005584 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8005588:	2200      	movs	r2, #0
 800558a:	4912      	ldr	r1, [pc, #72]	; (80055d4 <MX_USB_DEVICE_Init+0x50>)
 800558c:	4812      	ldr	r0, [pc, #72]	; (80055d8 <MX_USB_DEVICE_Init+0x54>)
 800558e:	f7fe feae 	bl	80042ee <USBD_Init>
 8005592:	4603      	mov	r3, r0
 8005594:	2b00      	cmp	r3, #0
 8005596:	d001      	beq.n	800559c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8005598:	f7fb f856 	bl	8000648 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MIDI) != USBD_OK)
 800559c:	490f      	ldr	r1, [pc, #60]	; (80055dc <MX_USB_DEVICE_Init+0x58>)
 800559e:	480e      	ldr	r0, [pc, #56]	; (80055d8 <MX_USB_DEVICE_Init+0x54>)
 80055a0:	f7fe fed5 	bl	800434e <USBD_RegisterClass>
 80055a4:	4603      	mov	r3, r0
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d001      	beq.n	80055ae <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80055aa:	f7fb f84d 	bl	8000648 <Error_Handler>
  }
  if (USBD_MIDI_RegisterInterface(&hUsbDeviceFS, &USBD_MIDI_fops) != USBD_OK)
 80055ae:	490c      	ldr	r1, [pc, #48]	; (80055e0 <MX_USB_DEVICE_Init+0x5c>)
 80055b0:	4809      	ldr	r0, [pc, #36]	; (80055d8 <MX_USB_DEVICE_Init+0x54>)
 80055b2:	f7fe fe45 	bl	8004240 <USBD_MIDI_RegisterInterface>
 80055b6:	4603      	mov	r3, r0
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d001      	beq.n	80055c0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80055bc:	f7fb f844 	bl	8000648 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80055c0:	4805      	ldr	r0, [pc, #20]	; (80055d8 <MX_USB_DEVICE_Init+0x54>)
 80055c2:	f7fe feeb 	bl	800439c <USBD_Start>
 80055c6:	4603      	mov	r3, r0
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d001      	beq.n	80055d0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80055cc:	f7fb f83c 	bl	8000648 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80055d0:	bf00      	nop
 80055d2:	bd80      	pop	{r7, pc}
 80055d4:	200000d8 	.word	0x200000d8
 80055d8:	20001d30 	.word	0x20001d30
 80055dc:	2000000c 	.word	0x2000000c
 80055e0:	20000128 	.word	0x20000128

080055e4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b083      	sub	sp, #12
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	4603      	mov	r3, r0
 80055ec:	6039      	str	r1, [r7, #0]
 80055ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	2212      	movs	r2, #18
 80055f4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80055f6:	4b03      	ldr	r3, [pc, #12]	; (8005604 <USBD_FS_DeviceDescriptor+0x20>)
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	370c      	adds	r7, #12
 80055fc:	46bd      	mov	sp, r7
 80055fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005602:	4770      	bx	lr
 8005604:	200000f4 	.word	0x200000f4

08005608 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005608:	b480      	push	{r7}
 800560a:	b083      	sub	sp, #12
 800560c:	af00      	add	r7, sp, #0
 800560e:	4603      	mov	r3, r0
 8005610:	6039      	str	r1, [r7, #0]
 8005612:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	2204      	movs	r2, #4
 8005618:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800561a:	4b03      	ldr	r3, [pc, #12]	; (8005628 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800561c:	4618      	mov	r0, r3
 800561e:	370c      	adds	r7, #12
 8005620:	46bd      	mov	sp, r7
 8005622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005626:	4770      	bx	lr
 8005628:	20000108 	.word	0x20000108

0800562c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b082      	sub	sp, #8
 8005630:	af00      	add	r7, sp, #0
 8005632:	4603      	mov	r3, r0
 8005634:	6039      	str	r1, [r7, #0]
 8005636:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005638:	79fb      	ldrb	r3, [r7, #7]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d105      	bne.n	800564a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800563e:	683a      	ldr	r2, [r7, #0]
 8005640:	4907      	ldr	r1, [pc, #28]	; (8005660 <USBD_FS_ProductStrDescriptor+0x34>)
 8005642:	4808      	ldr	r0, [pc, #32]	; (8005664 <USBD_FS_ProductStrDescriptor+0x38>)
 8005644:	f7ff fedb 	bl	80053fe <USBD_GetString>
 8005648:	e004      	b.n	8005654 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800564a:	683a      	ldr	r2, [r7, #0]
 800564c:	4904      	ldr	r1, [pc, #16]	; (8005660 <USBD_FS_ProductStrDescriptor+0x34>)
 800564e:	4805      	ldr	r0, [pc, #20]	; (8005664 <USBD_FS_ProductStrDescriptor+0x38>)
 8005650:	f7ff fed5 	bl	80053fe <USBD_GetString>
  }
  return USBD_StrDesc;
 8005654:	4b02      	ldr	r3, [pc, #8]	; (8005660 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8005656:	4618      	mov	r0, r3
 8005658:	3708      	adds	r7, #8
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}
 800565e:	bf00      	nop
 8005660:	20002000 	.word	0x20002000
 8005664:	08006010 	.word	0x08006010

08005668 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b082      	sub	sp, #8
 800566c:	af00      	add	r7, sp, #0
 800566e:	4603      	mov	r3, r0
 8005670:	6039      	str	r1, [r7, #0]
 8005672:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8005674:	683a      	ldr	r2, [r7, #0]
 8005676:	4904      	ldr	r1, [pc, #16]	; (8005688 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8005678:	4804      	ldr	r0, [pc, #16]	; (800568c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800567a:	f7ff fec0 	bl	80053fe <USBD_GetString>
  return USBD_StrDesc;
 800567e:	4b02      	ldr	r3, [pc, #8]	; (8005688 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8005680:	4618      	mov	r0, r3
 8005682:	3708      	adds	r7, #8
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}
 8005688:	20002000 	.word	0x20002000
 800568c:	08006024 	.word	0x08006024

08005690 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b082      	sub	sp, #8
 8005694:	af00      	add	r7, sp, #0
 8005696:	4603      	mov	r3, r0
 8005698:	6039      	str	r1, [r7, #0]
 800569a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	221a      	movs	r2, #26
 80056a0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80056a2:	f000 f843 	bl	800572c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80056a6:	4b02      	ldr	r3, [pc, #8]	; (80056b0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	3708      	adds	r7, #8
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}
 80056b0:	2000010c 	.word	0x2000010c

080056b4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b082      	sub	sp, #8
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	4603      	mov	r3, r0
 80056bc:	6039      	str	r1, [r7, #0]
 80056be:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80056c0:	79fb      	ldrb	r3, [r7, #7]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d105      	bne.n	80056d2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80056c6:	683a      	ldr	r2, [r7, #0]
 80056c8:	4907      	ldr	r1, [pc, #28]	; (80056e8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80056ca:	4808      	ldr	r0, [pc, #32]	; (80056ec <USBD_FS_ConfigStrDescriptor+0x38>)
 80056cc:	f7ff fe97 	bl	80053fe <USBD_GetString>
 80056d0:	e004      	b.n	80056dc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80056d2:	683a      	ldr	r2, [r7, #0]
 80056d4:	4904      	ldr	r1, [pc, #16]	; (80056e8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80056d6:	4805      	ldr	r0, [pc, #20]	; (80056ec <USBD_FS_ConfigStrDescriptor+0x38>)
 80056d8:	f7ff fe91 	bl	80053fe <USBD_GetString>
  }
  return USBD_StrDesc;
 80056dc:	4b02      	ldr	r3, [pc, #8]	; (80056e8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80056de:	4618      	mov	r0, r3
 80056e0:	3708      	adds	r7, #8
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}
 80056e6:	bf00      	nop
 80056e8:	20002000 	.word	0x20002000
 80056ec:	08006038 	.word	0x08006038

080056f0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b082      	sub	sp, #8
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	4603      	mov	r3, r0
 80056f8:	6039      	str	r1, [r7, #0]
 80056fa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80056fc:	79fb      	ldrb	r3, [r7, #7]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d105      	bne.n	800570e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005702:	683a      	ldr	r2, [r7, #0]
 8005704:	4907      	ldr	r1, [pc, #28]	; (8005724 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8005706:	4808      	ldr	r0, [pc, #32]	; (8005728 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8005708:	f7ff fe79 	bl	80053fe <USBD_GetString>
 800570c:	e004      	b.n	8005718 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800570e:	683a      	ldr	r2, [r7, #0]
 8005710:	4904      	ldr	r1, [pc, #16]	; (8005724 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8005712:	4805      	ldr	r0, [pc, #20]	; (8005728 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8005714:	f7ff fe73 	bl	80053fe <USBD_GetString>
  }
  return USBD_StrDesc;
 8005718:	4b02      	ldr	r3, [pc, #8]	; (8005724 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800571a:	4618      	mov	r0, r3
 800571c:	3708      	adds	r7, #8
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}
 8005722:	bf00      	nop
 8005724:	20002000 	.word	0x20002000
 8005728:	08006048 	.word	0x08006048

0800572c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b084      	sub	sp, #16
 8005730:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8005732:	4b0f      	ldr	r3, [pc, #60]	; (8005770 <Get_SerialNum+0x44>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8005738:	4b0e      	ldr	r3, [pc, #56]	; (8005774 <Get_SerialNum+0x48>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800573e:	4b0e      	ldr	r3, [pc, #56]	; (8005778 <Get_SerialNum+0x4c>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8005744:	68fa      	ldr	r2, [r7, #12]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	4413      	add	r3, r2
 800574a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d009      	beq.n	8005766 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8005752:	2208      	movs	r2, #8
 8005754:	4909      	ldr	r1, [pc, #36]	; (800577c <Get_SerialNum+0x50>)
 8005756:	68f8      	ldr	r0, [r7, #12]
 8005758:	f000 f814 	bl	8005784 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800575c:	2204      	movs	r2, #4
 800575e:	4908      	ldr	r1, [pc, #32]	; (8005780 <Get_SerialNum+0x54>)
 8005760:	68b8      	ldr	r0, [r7, #8]
 8005762:	f000 f80f 	bl	8005784 <IntToUnicode>
  }
}
 8005766:	bf00      	nop
 8005768:	3710      	adds	r7, #16
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}
 800576e:	bf00      	nop
 8005770:	1fff7a10 	.word	0x1fff7a10
 8005774:	1fff7a14 	.word	0x1fff7a14
 8005778:	1fff7a18 	.word	0x1fff7a18
 800577c:	2000010e 	.word	0x2000010e
 8005780:	2000011e 	.word	0x2000011e

08005784 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8005784:	b480      	push	{r7}
 8005786:	b087      	sub	sp, #28
 8005788:	af00      	add	r7, sp, #0
 800578a:	60f8      	str	r0, [r7, #12]
 800578c:	60b9      	str	r1, [r7, #8]
 800578e:	4613      	mov	r3, r2
 8005790:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8005792:	2300      	movs	r3, #0
 8005794:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8005796:	2300      	movs	r3, #0
 8005798:	75fb      	strb	r3, [r7, #23]
 800579a:	e027      	b.n	80057ec <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	0f1b      	lsrs	r3, r3, #28
 80057a0:	2b09      	cmp	r3, #9
 80057a2:	d80b      	bhi.n	80057bc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	0f1b      	lsrs	r3, r3, #28
 80057a8:	b2da      	uxtb	r2, r3
 80057aa:	7dfb      	ldrb	r3, [r7, #23]
 80057ac:	005b      	lsls	r3, r3, #1
 80057ae:	4619      	mov	r1, r3
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	440b      	add	r3, r1
 80057b4:	3230      	adds	r2, #48	; 0x30
 80057b6:	b2d2      	uxtb	r2, r2
 80057b8:	701a      	strb	r2, [r3, #0]
 80057ba:	e00a      	b.n	80057d2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	0f1b      	lsrs	r3, r3, #28
 80057c0:	b2da      	uxtb	r2, r3
 80057c2:	7dfb      	ldrb	r3, [r7, #23]
 80057c4:	005b      	lsls	r3, r3, #1
 80057c6:	4619      	mov	r1, r3
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	440b      	add	r3, r1
 80057cc:	3237      	adds	r2, #55	; 0x37
 80057ce:	b2d2      	uxtb	r2, r2
 80057d0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	011b      	lsls	r3, r3, #4
 80057d6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80057d8:	7dfb      	ldrb	r3, [r7, #23]
 80057da:	005b      	lsls	r3, r3, #1
 80057dc:	3301      	adds	r3, #1
 80057de:	68ba      	ldr	r2, [r7, #8]
 80057e0:	4413      	add	r3, r2
 80057e2:	2200      	movs	r2, #0
 80057e4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80057e6:	7dfb      	ldrb	r3, [r7, #23]
 80057e8:	3301      	adds	r3, #1
 80057ea:	75fb      	strb	r3, [r7, #23]
 80057ec:	7dfa      	ldrb	r2, [r7, #23]
 80057ee:	79fb      	ldrb	r3, [r7, #7]
 80057f0:	429a      	cmp	r2, r3
 80057f2:	d3d3      	bcc.n	800579c <IntToUnicode+0x18>
  }
}
 80057f4:	bf00      	nop
 80057f6:	bf00      	nop
 80057f8:	371c      	adds	r7, #28
 80057fa:	46bd      	mov	sp, r7
 80057fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005800:	4770      	bx	lr
	...

08005804 <__NVIC_SystemReset>:
{
 8005804:	b480      	push	{r7}
 8005806:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005808:	f3bf 8f4f 	dsb	sy
}
 800580c:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800580e:	4b06      	ldr	r3, [pc, #24]	; (8005828 <__NVIC_SystemReset+0x24>)
 8005810:	68db      	ldr	r3, [r3, #12]
 8005812:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8005816:	4904      	ldr	r1, [pc, #16]	; (8005828 <__NVIC_SystemReset+0x24>)
 8005818:	4b04      	ldr	r3, [pc, #16]	; (800582c <__NVIC_SystemReset+0x28>)
 800581a:	4313      	orrs	r3, r2
 800581c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800581e:	f3bf 8f4f 	dsb	sy
}
 8005822:	bf00      	nop
    __NOP();
 8005824:	bf00      	nop
 8005826:	e7fd      	b.n	8005824 <__NVIC_SystemReset+0x20>
 8005828:	e000ed00 	.word	0xe000ed00
 800582c:	05fa0004 	.word	0x05fa0004

08005830 <MIDI_Init>:
  *         Initializes the MIDI media low layer
  * @param  None
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t MIDI_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005830:	b480      	push	{r7}
 8005832:	b083      	sub	sp, #12
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
 8005838:	460b      	mov	r3, r1
 800583a:	70fb      	strb	r3, [r7, #3]
  /*
     Add your initialization code here
  */
  return (0);
 800583c:	2300      	movs	r3, #0
}
 800583e:	4618      	mov	r0, r3
 8005840:	370c      	adds	r7, #12
 8005842:	46bd      	mov	sp, r7
 8005844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005848:	4770      	bx	lr

0800584a <MIDI_DeInit>:
  *         DeInitializes the MIDI media low layer
  * @param  None
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t MIDI_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800584a:	b480      	push	{r7}
 800584c:	b083      	sub	sp, #12
 800584e:	af00      	add	r7, sp, #0
 8005850:	6078      	str	r0, [r7, #4]
 8005852:	460b      	mov	r3, r1
 8005854:	70fb      	strb	r3, [r7, #3]
  /*
     Add your deinitialization code here
  */
  return (0);
 8005856:	2300      	movs	r3, #0
}
 8005858:	4618      	mov	r0, r3
 800585a:	370c      	adds	r7, #12
 800585c:	46bd      	mov	sp, r7
 800585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005862:	4770      	bx	lr

08005864 <MIDI_Send>:
  * @param  buffer: bufferfer of data to be received
  * @param  length: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t MIDI_Send (uint8_t* buffer, uint32_t length)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b084      	sub	sp, #16
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
 800586c:	6039      	str	r1, [r7, #0]
  uint8_t ret = USBD_OK;
 800586e:	2300      	movs	r3, #0
 8005870:	73fb      	strb	r3, [r7, #15]

  USBD_MIDI_SetTxBuffer(&hUsbDeviceFS, buffer, length);
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	b29b      	uxth	r3, r3
 8005876:	461a      	mov	r2, r3
 8005878:	6879      	ldr	r1, [r7, #4]
 800587a:	4807      	ldr	r0, [pc, #28]	; (8005898 <MIDI_Send+0x34>)
 800587c:	f7fe fcf3 	bl	8004266 <USBD_MIDI_SetTxBuffer>

  ret = USBD_MIDI_TransmitPacket(&hUsbDeviceFS);
 8005880:	4805      	ldr	r0, [pc, #20]	; (8005898 <MIDI_Send+0x34>)
 8005882:	f7fe fd0c 	bl	800429e <USBD_MIDI_TransmitPacket>
 8005886:	4603      	mov	r3, r0
 8005888:	73fb      	strb	r3, [r7, #15]

  return (ret);
 800588a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800588e:	4618      	mov	r0, r3
 8005890:	3710      	adds	r7, #16
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}
 8005896:	bf00      	nop
 8005898:	20001d30 	.word	0x20001d30

0800589c <MIDI_Receive>:
  * @param  buffer: bufferfer of data to be received
  * @param  length: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t MIDI_Receive (uint8_t* buffer, uint32_t length)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b084      	sub	sp, #16
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
 80058a4:	6039      	str	r1, [r7, #0]

  uint8_t chan = buffer[1] & 0xf;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	3301      	adds	r3, #1
 80058aa:	781b      	ldrb	r3, [r3, #0]
 80058ac:	f003 030f 	and.w	r3, r3, #15
 80058b0:	73fb      	strb	r3, [r7, #15]
  uint8_t msgtype = buffer[1] & 0xf0;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	3301      	adds	r3, #1
 80058b6:	781b      	ldrb	r3, [r3, #0]
 80058b8:	f023 030f 	bic.w	r3, r3, #15
 80058bc:	73bb      	strb	r3, [r7, #14]
  uint8_t b1 =  buffer[2];
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	789b      	ldrb	r3, [r3, #2]
 80058c2:	737b      	strb	r3, [r7, #13]
  uint8_t b2 =  buffer[3];
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	78db      	ldrb	r3, [r3, #3]
 80058c8:	733b      	strb	r3, [r7, #12]
  uint16_t b = ((b2 & 0x7f) << 7) | (b1 & 0x7f);
 80058ca:	7b3b      	ldrb	r3, [r7, #12]
 80058cc:	01db      	lsls	r3, r3, #7
 80058ce:	b21b      	sxth	r3, r3
 80058d0:	f403 537e 	and.w	r3, r3, #16256	; 0x3f80
 80058d4:	b21a      	sxth	r2, r3
 80058d6:	7b7b      	ldrb	r3, [r7, #13]
 80058d8:	b21b      	sxth	r3, r3
 80058da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058de:	b21b      	sxth	r3, r3
 80058e0:	4313      	orrs	r3, r2
 80058e2:	b21b      	sxth	r3, r3
 80058e4:	817b      	strh	r3, [r7, #10]
  
  switch (msgtype) {
 80058e6:	7bbb      	ldrb	r3, [r7, #14]
 80058e8:	2bf0      	cmp	r3, #240	; 0xf0
 80058ea:	d104      	bne.n	80058f6 <MIDI_Receive+0x5a>
  case 0xF0:
    if(chan == 0x0F) {
 80058ec:	7bfb      	ldrb	r3, [r7, #15]
 80058ee:	2b0f      	cmp	r3, #15
 80058f0:	d103      	bne.n	80058fa <MIDI_Receive+0x5e>
        NVIC_SystemReset(); // Reset into DFU mode
 80058f2:	f7ff ff87 	bl	8005804 <__NVIC_SystemReset>
    }
  	break;
  default:
  	break;
 80058f6:	bf00      	nop
 80058f8:	e000      	b.n	80058fc <MIDI_Receive+0x60>
  	break;
 80058fa:	bf00      	nop
  }
  
  return (0);
 80058fc:	2300      	movs	r3, #0
}
 80058fe:	4618      	mov	r0, r3
 8005900:	3710      	adds	r7, #16
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}

08005906 <MIDI_note_on>:

void MIDI_note_on(uint8_t note, uint8_t velocity) {
 8005906:	b580      	push	{r7, lr}
 8005908:	b084      	sub	sp, #16
 800590a:	af00      	add	r7, sp, #0
 800590c:	4603      	mov	r3, r0
 800590e:	460a      	mov	r2, r1
 8005910:	71fb      	strb	r3, [r7, #7]
 8005912:	4613      	mov	r3, r2
 8005914:	71bb      	strb	r3, [r7, #6]
    uint8_t b[4];
    b[0] = 0x0B;
 8005916:	230b      	movs	r3, #11
 8005918:	733b      	strb	r3, [r7, #12]
    b[1] = 0x90;
 800591a:	2390      	movs	r3, #144	; 0x90
 800591c:	737b      	strb	r3, [r7, #13]
    b[2] = note;
 800591e:	79fb      	ldrb	r3, [r7, #7]
 8005920:	73bb      	strb	r3, [r7, #14]
    b[3] = velocity;
 8005922:	79bb      	ldrb	r3, [r7, #6]
 8005924:	73fb      	strb	r3, [r7, #15]

    MIDI_Send(b, 4);
 8005926:	f107 030c 	add.w	r3, r7, #12
 800592a:	2104      	movs	r1, #4
 800592c:	4618      	mov	r0, r3
 800592e:	f7ff ff99 	bl	8005864 <MIDI_Send>

}
 8005932:	bf00      	nop
 8005934:	3710      	adds	r7, #16
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}

0800593a <MIDI_note_off>:

void MIDI_note_off(uint8_t note, uint8_t velocity) {
 800593a:	b580      	push	{r7, lr}
 800593c:	b084      	sub	sp, #16
 800593e:	af00      	add	r7, sp, #0
 8005940:	4603      	mov	r3, r0
 8005942:	460a      	mov	r2, r1
 8005944:	71fb      	strb	r3, [r7, #7]
 8005946:	4613      	mov	r3, r2
 8005948:	71bb      	strb	r3, [r7, #6]
    uint8_t b[4];
    b[0] = 0x0B;
 800594a:	230b      	movs	r3, #11
 800594c:	733b      	strb	r3, [r7, #12]
    b[1] = 0x80;
 800594e:	2380      	movs	r3, #128	; 0x80
 8005950:	737b      	strb	r3, [r7, #13]
    b[2] = note;
 8005952:	79fb      	ldrb	r3, [r7, #7]
 8005954:	73bb      	strb	r3, [r7, #14]
    b[3] = velocity;
 8005956:	79bb      	ldrb	r3, [r7, #6]
 8005958:	73fb      	strb	r3, [r7, #15]

    MIDI_Send(b, 4);
 800595a:	f107 030c 	add.w	r3, r7, #12
 800595e:	2104      	movs	r1, #4
 8005960:	4618      	mov	r0, r3
 8005962:	f7ff ff7f 	bl	8005864 <MIDI_Send>

}
 8005966:	bf00      	nop
 8005968:	3710      	adds	r7, #16
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}
	...

08005970 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b08a      	sub	sp, #40	; 0x28
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005978:	f107 0314 	add.w	r3, r7, #20
 800597c:	2200      	movs	r2, #0
 800597e:	601a      	str	r2, [r3, #0]
 8005980:	605a      	str	r2, [r3, #4]
 8005982:	609a      	str	r2, [r3, #8]
 8005984:	60da      	str	r2, [r3, #12]
 8005986:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005990:	d13a      	bne.n	8005a08 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005992:	2300      	movs	r3, #0
 8005994:	613b      	str	r3, [r7, #16]
 8005996:	4b1e      	ldr	r3, [pc, #120]	; (8005a10 <HAL_PCD_MspInit+0xa0>)
 8005998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800599a:	4a1d      	ldr	r2, [pc, #116]	; (8005a10 <HAL_PCD_MspInit+0xa0>)
 800599c:	f043 0301 	orr.w	r3, r3, #1
 80059a0:	6313      	str	r3, [r2, #48]	; 0x30
 80059a2:	4b1b      	ldr	r3, [pc, #108]	; (8005a10 <HAL_PCD_MspInit+0xa0>)
 80059a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059a6:	f003 0301 	and.w	r3, r3, #1
 80059aa:	613b      	str	r3, [r7, #16]
 80059ac:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80059ae:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80059b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059b4:	2302      	movs	r3, #2
 80059b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059b8:	2300      	movs	r3, #0
 80059ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80059bc:	2303      	movs	r3, #3
 80059be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80059c0:	230a      	movs	r3, #10
 80059c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80059c4:	f107 0314 	add.w	r3, r7, #20
 80059c8:	4619      	mov	r1, r3
 80059ca:	4812      	ldr	r0, [pc, #72]	; (8005a14 <HAL_PCD_MspInit+0xa4>)
 80059cc:	f7fb f882 	bl	8000ad4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80059d0:	4b0f      	ldr	r3, [pc, #60]	; (8005a10 <HAL_PCD_MspInit+0xa0>)
 80059d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059d4:	4a0e      	ldr	r2, [pc, #56]	; (8005a10 <HAL_PCD_MspInit+0xa0>)
 80059d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059da:	6353      	str	r3, [r2, #52]	; 0x34
 80059dc:	2300      	movs	r3, #0
 80059de:	60fb      	str	r3, [r7, #12]
 80059e0:	4b0b      	ldr	r3, [pc, #44]	; (8005a10 <HAL_PCD_MspInit+0xa0>)
 80059e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059e4:	4a0a      	ldr	r2, [pc, #40]	; (8005a10 <HAL_PCD_MspInit+0xa0>)
 80059e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80059ea:	6453      	str	r3, [r2, #68]	; 0x44
 80059ec:	4b08      	ldr	r3, [pc, #32]	; (8005a10 <HAL_PCD_MspInit+0xa0>)
 80059ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059f4:	60fb      	str	r3, [r7, #12]
 80059f6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80059f8:	2200      	movs	r2, #0
 80059fa:	2100      	movs	r1, #0
 80059fc:	2043      	movs	r0, #67	; 0x43
 80059fe:	f7fb f832 	bl	8000a66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8005a02:	2043      	movs	r0, #67	; 0x43
 8005a04:	f7fb f84b 	bl	8000a9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8005a08:	bf00      	nop
 8005a0a:	3728      	adds	r7, #40	; 0x28
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}
 8005a10:	40023800 	.word	0x40023800
 8005a14:	40020000 	.word	0x40020000

08005a18 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b082      	sub	sp, #8
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005a2c:	4619      	mov	r1, r3
 8005a2e:	4610      	mov	r0, r2
 8005a30:	f7fe fcff 	bl	8004432 <USBD_LL_SetupStage>
}
 8005a34:	bf00      	nop
 8005a36:	3708      	adds	r7, #8
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bd80      	pop	{r7, pc}

08005a3c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b082      	sub	sp, #8
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
 8005a44:	460b      	mov	r3, r1
 8005a46:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8005a4e:	78fa      	ldrb	r2, [r7, #3]
 8005a50:	6879      	ldr	r1, [r7, #4]
 8005a52:	4613      	mov	r3, r2
 8005a54:	00db      	lsls	r3, r3, #3
 8005a56:	1a9b      	subs	r3, r3, r2
 8005a58:	009b      	lsls	r3, r3, #2
 8005a5a:	440b      	add	r3, r1
 8005a5c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005a60:	681a      	ldr	r2, [r3, #0]
 8005a62:	78fb      	ldrb	r3, [r7, #3]
 8005a64:	4619      	mov	r1, r3
 8005a66:	f7fe fd39 	bl	80044dc <USBD_LL_DataOutStage>
}
 8005a6a:	bf00      	nop
 8005a6c:	3708      	adds	r7, #8
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd80      	pop	{r7, pc}

08005a72 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005a72:	b580      	push	{r7, lr}
 8005a74:	b082      	sub	sp, #8
 8005a76:	af00      	add	r7, sp, #0
 8005a78:	6078      	str	r0, [r7, #4]
 8005a7a:	460b      	mov	r3, r1
 8005a7c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8005a84:	78fa      	ldrb	r2, [r7, #3]
 8005a86:	6879      	ldr	r1, [r7, #4]
 8005a88:	4613      	mov	r3, r2
 8005a8a:	00db      	lsls	r3, r3, #3
 8005a8c:	1a9b      	subs	r3, r3, r2
 8005a8e:	009b      	lsls	r3, r3, #2
 8005a90:	440b      	add	r3, r1
 8005a92:	3348      	adds	r3, #72	; 0x48
 8005a94:	681a      	ldr	r2, [r3, #0]
 8005a96:	78fb      	ldrb	r3, [r7, #3]
 8005a98:	4619      	mov	r1, r3
 8005a9a:	f7fe fd82 	bl	80045a2 <USBD_LL_DataInStage>
}
 8005a9e:	bf00      	nop
 8005aa0:	3708      	adds	r7, #8
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}

08005aa6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005aa6:	b580      	push	{r7, lr}
 8005aa8:	b082      	sub	sp, #8
 8005aaa:	af00      	add	r7, sp, #0
 8005aac:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f7fe fe96 	bl	80047e6 <USBD_LL_SOF>
}
 8005aba:	bf00      	nop
 8005abc:	3708      	adds	r7, #8
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bd80      	pop	{r7, pc}

08005ac2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005ac2:	b580      	push	{r7, lr}
 8005ac4:	b084      	sub	sp, #16
 8005ac6:	af00      	add	r7, sp, #0
 8005ac8:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8005aca:	2301      	movs	r3, #1
 8005acc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	68db      	ldr	r3, [r3, #12]
 8005ad2:	2b02      	cmp	r3, #2
 8005ad4:	d001      	beq.n	8005ada <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8005ad6:	f7fa fdb7 	bl	8000648 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005ae0:	7bfa      	ldrb	r2, [r7, #15]
 8005ae2:	4611      	mov	r1, r2
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	f7fe fe40 	bl	800476a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005af0:	4618      	mov	r0, r3
 8005af2:	f7fe fdec 	bl	80046ce <USBD_LL_Reset>
}
 8005af6:	bf00      	nop
 8005af8:	3710      	adds	r7, #16
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}
	...

08005b00 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b082      	sub	sp, #8
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005b0e:	4618      	mov	r0, r3
 8005b10:	f7fe fe3b 	bl	800478a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	687a      	ldr	r2, [r7, #4]
 8005b20:	6812      	ldr	r2, [r2, #0]
 8005b22:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005b26:	f043 0301 	orr.w	r3, r3, #1
 8005b2a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6a1b      	ldr	r3, [r3, #32]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d005      	beq.n	8005b40 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8005b34:	4b04      	ldr	r3, [pc, #16]	; (8005b48 <HAL_PCD_SuspendCallback+0x48>)
 8005b36:	691b      	ldr	r3, [r3, #16]
 8005b38:	4a03      	ldr	r2, [pc, #12]	; (8005b48 <HAL_PCD_SuspendCallback+0x48>)
 8005b3a:	f043 0306 	orr.w	r3, r3, #6
 8005b3e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8005b40:	bf00      	nop
 8005b42:	3708      	adds	r7, #8
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}
 8005b48:	e000ed00 	.word	0xe000ed00

08005b4c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b082      	sub	sp, #8
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f7fe fe2b 	bl	80047b6 <USBD_LL_Resume>
}
 8005b60:	bf00      	nop
 8005b62:	3708      	adds	r7, #8
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}

08005b68 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b082      	sub	sp, #8
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
 8005b70:	460b      	mov	r3, r1
 8005b72:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005b7a:	78fa      	ldrb	r2, [r7, #3]
 8005b7c:	4611      	mov	r1, r2
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f7fe fe79 	bl	8004876 <USBD_LL_IsoOUTIncomplete>
}
 8005b84:	bf00      	nop
 8005b86:	3708      	adds	r7, #8
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd80      	pop	{r7, pc}

08005b8c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b082      	sub	sp, #8
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
 8005b94:	460b      	mov	r3, r1
 8005b96:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005b9e:	78fa      	ldrb	r2, [r7, #3]
 8005ba0:	4611      	mov	r1, r2
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f7fe fe41 	bl	800482a <USBD_LL_IsoINIncomplete>
}
 8005ba8:	bf00      	nop
 8005baa:	3708      	adds	r7, #8
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bd80      	pop	{r7, pc}

08005bb0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b082      	sub	sp, #8
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	f7fe fe7f 	bl	80048c2 <USBD_LL_DevConnected>
}
 8005bc4:	bf00      	nop
 8005bc6:	3708      	adds	r7, #8
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bd80      	pop	{r7, pc}

08005bcc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b082      	sub	sp, #8
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005bda:	4618      	mov	r0, r3
 8005bdc:	f7fe fe7c 	bl	80048d8 <USBD_LL_DevDisconnected>
}
 8005be0:	bf00      	nop
 8005be2:	3708      	adds	r7, #8
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}

08005be8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b082      	sub	sp, #8
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	781b      	ldrb	r3, [r3, #0]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d13c      	bne.n	8005c72 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8005bf8:	4a20      	ldr	r2, [pc, #128]	; (8005c7c <USBD_LL_Init+0x94>)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	4a1e      	ldr	r2, [pc, #120]	; (8005c7c <USBD_LL_Init+0x94>)
 8005c04:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8005c08:	4b1c      	ldr	r3, [pc, #112]	; (8005c7c <USBD_LL_Init+0x94>)
 8005c0a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8005c0e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8005c10:	4b1a      	ldr	r3, [pc, #104]	; (8005c7c <USBD_LL_Init+0x94>)
 8005c12:	2204      	movs	r2, #4
 8005c14:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8005c16:	4b19      	ldr	r3, [pc, #100]	; (8005c7c <USBD_LL_Init+0x94>)
 8005c18:	2202      	movs	r2, #2
 8005c1a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8005c1c:	4b17      	ldr	r3, [pc, #92]	; (8005c7c <USBD_LL_Init+0x94>)
 8005c1e:	2200      	movs	r2, #0
 8005c20:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8005c22:	4b16      	ldr	r3, [pc, #88]	; (8005c7c <USBD_LL_Init+0x94>)
 8005c24:	2202      	movs	r2, #2
 8005c26:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8005c28:	4b14      	ldr	r3, [pc, #80]	; (8005c7c <USBD_LL_Init+0x94>)
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8005c2e:	4b13      	ldr	r3, [pc, #76]	; (8005c7c <USBD_LL_Init+0x94>)
 8005c30:	2200      	movs	r2, #0
 8005c32:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8005c34:	4b11      	ldr	r3, [pc, #68]	; (8005c7c <USBD_LL_Init+0x94>)
 8005c36:	2200      	movs	r2, #0
 8005c38:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8005c3a:	4b10      	ldr	r3, [pc, #64]	; (8005c7c <USBD_LL_Init+0x94>)
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8005c40:	4b0e      	ldr	r3, [pc, #56]	; (8005c7c <USBD_LL_Init+0x94>)
 8005c42:	2200      	movs	r2, #0
 8005c44:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8005c46:	480d      	ldr	r0, [pc, #52]	; (8005c7c <USBD_LL_Init+0x94>)
 8005c48:	f7fb f8c8 	bl	8000ddc <HAL_PCD_Init>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d001      	beq.n	8005c56 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8005c52:	f7fa fcf9 	bl	8000648 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8005c56:	2180      	movs	r1, #128	; 0x80
 8005c58:	4808      	ldr	r0, [pc, #32]	; (8005c7c <USBD_LL_Init+0x94>)
 8005c5a:	f7fc fa26 	bl	80020aa <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8005c5e:	2240      	movs	r2, #64	; 0x40
 8005c60:	2100      	movs	r1, #0
 8005c62:	4806      	ldr	r0, [pc, #24]	; (8005c7c <USBD_LL_Init+0x94>)
 8005c64:	f7fc f9da 	bl	800201c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8005c68:	2280      	movs	r2, #128	; 0x80
 8005c6a:	2101      	movs	r1, #1
 8005c6c:	4803      	ldr	r0, [pc, #12]	; (8005c7c <USBD_LL_Init+0x94>)
 8005c6e:	f7fc f9d5 	bl	800201c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8005c72:	2300      	movs	r3, #0
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	3708      	adds	r7, #8
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}
 8005c7c:	20002200 	.word	0x20002200

08005c80 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b084      	sub	sp, #16
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005c88:	2300      	movs	r3, #0
 8005c8a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005c96:	4618      	mov	r0, r3
 8005c98:	f7fb f9bd 	bl	8001016 <HAL_PCD_Start>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005ca0:	7bfb      	ldrb	r3, [r7, #15]
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f000 f942 	bl	8005f2c <USBD_Get_USB_Status>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8005cac:	7bbb      	ldrb	r3, [r7, #14]
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3710      	adds	r7, #16
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}

08005cb6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8005cb6:	b580      	push	{r7, lr}
 8005cb8:	b084      	sub	sp, #16
 8005cba:	af00      	add	r7, sp, #0
 8005cbc:	6078      	str	r0, [r7, #4]
 8005cbe:	4608      	mov	r0, r1
 8005cc0:	4611      	mov	r1, r2
 8005cc2:	461a      	mov	r2, r3
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	70fb      	strb	r3, [r7, #3]
 8005cc8:	460b      	mov	r3, r1
 8005cca:	70bb      	strb	r3, [r7, #2]
 8005ccc:	4613      	mov	r3, r2
 8005cce:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8005cde:	78bb      	ldrb	r3, [r7, #2]
 8005ce0:	883a      	ldrh	r2, [r7, #0]
 8005ce2:	78f9      	ldrb	r1, [r7, #3]
 8005ce4:	f7fb fda1 	bl	800182a <HAL_PCD_EP_Open>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005cec:	7bfb      	ldrb	r3, [r7, #15]
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f000 f91c 	bl	8005f2c <USBD_Get_USB_Status>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8005cf8:	7bbb      	ldrb	r3, [r7, #14]
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3710      	adds	r7, #16
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}

08005d02 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005d02:	b580      	push	{r7, lr}
 8005d04:	b084      	sub	sp, #16
 8005d06:	af00      	add	r7, sp, #0
 8005d08:	6078      	str	r0, [r7, #4]
 8005d0a:	460b      	mov	r3, r1
 8005d0c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005d12:	2300      	movs	r3, #0
 8005d14:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005d1c:	78fa      	ldrb	r2, [r7, #3]
 8005d1e:	4611      	mov	r1, r2
 8005d20:	4618      	mov	r0, r3
 8005d22:	f7fb fdea 	bl	80018fa <HAL_PCD_EP_Close>
 8005d26:	4603      	mov	r3, r0
 8005d28:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005d2a:	7bfb      	ldrb	r3, [r7, #15]
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	f000 f8fd 	bl	8005f2c <USBD_Get_USB_Status>
 8005d32:	4603      	mov	r3, r0
 8005d34:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8005d36:	7bbb      	ldrb	r3, [r7, #14]
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	3710      	adds	r7, #16
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bd80      	pop	{r7, pc}

08005d40 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b084      	sub	sp, #16
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
 8005d48:	460b      	mov	r3, r1
 8005d4a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005d50:	2300      	movs	r3, #0
 8005d52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005d5a:	78fa      	ldrb	r2, [r7, #3]
 8005d5c:	4611      	mov	r1, r2
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f7fb fec2 	bl	8001ae8 <HAL_PCD_EP_SetStall>
 8005d64:	4603      	mov	r3, r0
 8005d66:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005d68:	7bfb      	ldrb	r3, [r7, #15]
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f000 f8de 	bl	8005f2c <USBD_Get_USB_Status>
 8005d70:	4603      	mov	r3, r0
 8005d72:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8005d74:	7bbb      	ldrb	r3, [r7, #14]
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	3710      	adds	r7, #16
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}

08005d7e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005d7e:	b580      	push	{r7, lr}
 8005d80:	b084      	sub	sp, #16
 8005d82:	af00      	add	r7, sp, #0
 8005d84:	6078      	str	r0, [r7, #4]
 8005d86:	460b      	mov	r3, r1
 8005d88:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005d98:	78fa      	ldrb	r2, [r7, #3]
 8005d9a:	4611      	mov	r1, r2
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	f7fb ff07 	bl	8001bb0 <HAL_PCD_EP_ClrStall>
 8005da2:	4603      	mov	r3, r0
 8005da4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005da6:	7bfb      	ldrb	r3, [r7, #15]
 8005da8:	4618      	mov	r0, r3
 8005daa:	f000 f8bf 	bl	8005f2c <USBD_Get_USB_Status>
 8005dae:	4603      	mov	r3, r0
 8005db0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8005db2:	7bbb      	ldrb	r3, [r7, #14]
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	3710      	adds	r7, #16
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bd80      	pop	{r7, pc}

08005dbc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b085      	sub	sp, #20
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
 8005dc4:	460b      	mov	r3, r1
 8005dc6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005dce:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8005dd0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	da0b      	bge.n	8005df0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8005dd8:	78fb      	ldrb	r3, [r7, #3]
 8005dda:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005dde:	68f9      	ldr	r1, [r7, #12]
 8005de0:	4613      	mov	r3, r2
 8005de2:	00db      	lsls	r3, r3, #3
 8005de4:	1a9b      	subs	r3, r3, r2
 8005de6:	009b      	lsls	r3, r3, #2
 8005de8:	440b      	add	r3, r1
 8005dea:	333e      	adds	r3, #62	; 0x3e
 8005dec:	781b      	ldrb	r3, [r3, #0]
 8005dee:	e00b      	b.n	8005e08 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8005df0:	78fb      	ldrb	r3, [r7, #3]
 8005df2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005df6:	68f9      	ldr	r1, [r7, #12]
 8005df8:	4613      	mov	r3, r2
 8005dfa:	00db      	lsls	r3, r3, #3
 8005dfc:	1a9b      	subs	r3, r3, r2
 8005dfe:	009b      	lsls	r3, r3, #2
 8005e00:	440b      	add	r3, r1
 8005e02:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005e06:	781b      	ldrb	r3, [r3, #0]
  }
}
 8005e08:	4618      	mov	r0, r3
 8005e0a:	3714      	adds	r7, #20
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e12:	4770      	bx	lr

08005e14 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b084      	sub	sp, #16
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
 8005e1c:	460b      	mov	r3, r1
 8005e1e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005e20:	2300      	movs	r3, #0
 8005e22:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005e24:	2300      	movs	r3, #0
 8005e26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005e2e:	78fa      	ldrb	r2, [r7, #3]
 8005e30:	4611      	mov	r1, r2
 8005e32:	4618      	mov	r0, r3
 8005e34:	f7fb fcd4 	bl	80017e0 <HAL_PCD_SetAddress>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005e3c:	7bfb      	ldrb	r3, [r7, #15]
 8005e3e:	4618      	mov	r0, r3
 8005e40:	f000 f874 	bl	8005f2c <USBD_Get_USB_Status>
 8005e44:	4603      	mov	r3, r0
 8005e46:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8005e48:	7bbb      	ldrb	r3, [r7, #14]
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	3710      	adds	r7, #16
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}

08005e52 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8005e52:	b580      	push	{r7, lr}
 8005e54:	b086      	sub	sp, #24
 8005e56:	af00      	add	r7, sp, #0
 8005e58:	60f8      	str	r0, [r7, #12]
 8005e5a:	607a      	str	r2, [r7, #4]
 8005e5c:	603b      	str	r3, [r7, #0]
 8005e5e:	460b      	mov	r3, r1
 8005e60:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005e62:	2300      	movs	r3, #0
 8005e64:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005e66:	2300      	movs	r3, #0
 8005e68:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8005e70:	7af9      	ldrb	r1, [r7, #11]
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	687a      	ldr	r2, [r7, #4]
 8005e76:	f7fb fded 	bl	8001a54 <HAL_PCD_EP_Transmit>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005e7e:	7dfb      	ldrb	r3, [r7, #23]
 8005e80:	4618      	mov	r0, r3
 8005e82:	f000 f853 	bl	8005f2c <USBD_Get_USB_Status>
 8005e86:	4603      	mov	r3, r0
 8005e88:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8005e8a:	7dbb      	ldrb	r3, [r7, #22]
}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	3718      	adds	r7, #24
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd80      	pop	{r7, pc}

08005e94 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b086      	sub	sp, #24
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	60f8      	str	r0, [r7, #12]
 8005e9c:	607a      	str	r2, [r7, #4]
 8005e9e:	603b      	str	r3, [r7, #0]
 8005ea0:	460b      	mov	r3, r1
 8005ea2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8005eb2:	7af9      	ldrb	r1, [r7, #11]
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	687a      	ldr	r2, [r7, #4]
 8005eb8:	f7fb fd69 	bl	800198e <HAL_PCD_EP_Receive>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005ec0:	7dfb      	ldrb	r3, [r7, #23]
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	f000 f832 	bl	8005f2c <USBD_Get_USB_Status>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8005ecc:	7dbb      	ldrb	r3, [r7, #22]
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3718      	adds	r7, #24
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}

08005ed6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005ed6:	b580      	push	{r7, lr}
 8005ed8:	b082      	sub	sp, #8
 8005eda:	af00      	add	r7, sp, #0
 8005edc:	6078      	str	r0, [r7, #4]
 8005ede:	460b      	mov	r3, r1
 8005ee0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005ee8:	78fa      	ldrb	r2, [r7, #3]
 8005eea:	4611      	mov	r1, r2
 8005eec:	4618      	mov	r0, r3
 8005eee:	f7fb fd99 	bl	8001a24 <HAL_PCD_EP_GetRxCount>
 8005ef2:	4603      	mov	r3, r0
}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	3708      	adds	r7, #8
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bd80      	pop	{r7, pc}

08005efc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b083      	sub	sp, #12
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_AUDIO_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8005f04:	4b03      	ldr	r3, [pc, #12]	; (8005f14 <USBD_static_malloc+0x18>)
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	370c      	adds	r7, #12
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f10:	4770      	bx	lr
 8005f12:	bf00      	nop
 8005f14:	20000158 	.word	0x20000158

08005f18 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b083      	sub	sp, #12
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]

}
 8005f20:	bf00      	nop
 8005f22:	370c      	adds	r7, #12
 8005f24:	46bd      	mov	sp, r7
 8005f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2a:	4770      	bx	lr

08005f2c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b085      	sub	sp, #20
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	4603      	mov	r3, r0
 8005f34:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005f36:	2300      	movs	r3, #0
 8005f38:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8005f3a:	79fb      	ldrb	r3, [r7, #7]
 8005f3c:	2b03      	cmp	r3, #3
 8005f3e:	d817      	bhi.n	8005f70 <USBD_Get_USB_Status+0x44>
 8005f40:	a201      	add	r2, pc, #4	; (adr r2, 8005f48 <USBD_Get_USB_Status+0x1c>)
 8005f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f46:	bf00      	nop
 8005f48:	08005f59 	.word	0x08005f59
 8005f4c:	08005f5f 	.word	0x08005f5f
 8005f50:	08005f65 	.word	0x08005f65
 8005f54:	08005f6b 	.word	0x08005f6b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8005f58:	2300      	movs	r3, #0
 8005f5a:	73fb      	strb	r3, [r7, #15]
    break;
 8005f5c:	e00b      	b.n	8005f76 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8005f5e:	2303      	movs	r3, #3
 8005f60:	73fb      	strb	r3, [r7, #15]
    break;
 8005f62:	e008      	b.n	8005f76 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8005f64:	2301      	movs	r3, #1
 8005f66:	73fb      	strb	r3, [r7, #15]
    break;
 8005f68:	e005      	b.n	8005f76 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8005f6a:	2303      	movs	r3, #3
 8005f6c:	73fb      	strb	r3, [r7, #15]
    break;
 8005f6e:	e002      	b.n	8005f76 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8005f70:	2303      	movs	r3, #3
 8005f72:	73fb      	strb	r3, [r7, #15]
    break;
 8005f74:	bf00      	nop
  }
  return usb_status;
 8005f76:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	3714      	adds	r7, #20
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f82:	4770      	bx	lr

08005f84 <__libc_init_array>:
 8005f84:	b570      	push	{r4, r5, r6, lr}
 8005f86:	4d0d      	ldr	r5, [pc, #52]	; (8005fbc <__libc_init_array+0x38>)
 8005f88:	4c0d      	ldr	r4, [pc, #52]	; (8005fc0 <__libc_init_array+0x3c>)
 8005f8a:	1b64      	subs	r4, r4, r5
 8005f8c:	10a4      	asrs	r4, r4, #2
 8005f8e:	2600      	movs	r6, #0
 8005f90:	42a6      	cmp	r6, r4
 8005f92:	d109      	bne.n	8005fa8 <__libc_init_array+0x24>
 8005f94:	4d0b      	ldr	r5, [pc, #44]	; (8005fc4 <__libc_init_array+0x40>)
 8005f96:	4c0c      	ldr	r4, [pc, #48]	; (8005fc8 <__libc_init_array+0x44>)
 8005f98:	f000 f82e 	bl	8005ff8 <_init>
 8005f9c:	1b64      	subs	r4, r4, r5
 8005f9e:	10a4      	asrs	r4, r4, #2
 8005fa0:	2600      	movs	r6, #0
 8005fa2:	42a6      	cmp	r6, r4
 8005fa4:	d105      	bne.n	8005fb2 <__libc_init_array+0x2e>
 8005fa6:	bd70      	pop	{r4, r5, r6, pc}
 8005fa8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fac:	4798      	blx	r3
 8005fae:	3601      	adds	r6, #1
 8005fb0:	e7ee      	b.n	8005f90 <__libc_init_array+0xc>
 8005fb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fb6:	4798      	blx	r3
 8005fb8:	3601      	adds	r6, #1
 8005fba:	e7f2      	b.n	8005fa2 <__libc_init_array+0x1e>
 8005fbc:	08006070 	.word	0x08006070
 8005fc0:	08006070 	.word	0x08006070
 8005fc4:	08006070 	.word	0x08006070
 8005fc8:	08006074 	.word	0x08006074

08005fcc <memcpy>:
 8005fcc:	440a      	add	r2, r1
 8005fce:	4291      	cmp	r1, r2
 8005fd0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005fd4:	d100      	bne.n	8005fd8 <memcpy+0xc>
 8005fd6:	4770      	bx	lr
 8005fd8:	b510      	push	{r4, lr}
 8005fda:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005fde:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005fe2:	4291      	cmp	r1, r2
 8005fe4:	d1f9      	bne.n	8005fda <memcpy+0xe>
 8005fe6:	bd10      	pop	{r4, pc}

08005fe8 <memset>:
 8005fe8:	4402      	add	r2, r0
 8005fea:	4603      	mov	r3, r0
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d100      	bne.n	8005ff2 <memset+0xa>
 8005ff0:	4770      	bx	lr
 8005ff2:	f803 1b01 	strb.w	r1, [r3], #1
 8005ff6:	e7f9      	b.n	8005fec <memset+0x4>

08005ff8 <_init>:
 8005ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ffa:	bf00      	nop
 8005ffc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ffe:	bc08      	pop	{r3}
 8006000:	469e      	mov	lr, r3
 8006002:	4770      	bx	lr

08006004 <_fini>:
 8006004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006006:	bf00      	nop
 8006008:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800600a:	bc08      	pop	{r3}
 800600c:	469e      	mov	lr, r3
 800600e:	4770      	bx	lr
